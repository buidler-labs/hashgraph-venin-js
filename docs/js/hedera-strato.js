import{AccountBalanceQuery as Q,Hbar as B,TransferTransaction as F,TokenAssociateTransaction as U,ContractFunctionParameters as g,PrivateKey as I,AccountCreateTransaction as C,AccountInfoQuery as s,AccountDeleteTransaction as c,AccountUpdateTransaction as l,AccountId as S,ContractId as Z,ContractInfoQuery as G,ContractDeleteTransaction as L,ContractCallQuery as x,ContractExecuteTransaction as y,TransactionId as d,Client as b,AccountRecordsQuery as V,Wallet as N,TransactionReceiptQuery as R,SignerSignature as A,Status as D,FileCreateTransaction as m,FileAppendTransaction as E,FileId as J,FileInfoQuery as t,FileDeleteTransaction as i,FileUpdateTransaction as X,FileContentsQuery as n,TransactionRecordQuery as u,TransactionResponse as H,TokenType as W,TokenCreateTransaction as a,TokenDeleteTransaction as o,TokenUpdateTransaction as h,Key as Y,TokenInfoQuery as e,TopicCreateTransaction as k,TopicId as p,TopicInfoQuery as M,TopicDeleteTransaction as T,TopicMessageSubmitTransaction as z,TopicUpdateTransaction as r,ContractCreateTransaction as v}from"/js/hashgraph-sdk.js";function w(Q,B,F){return B in Q?Object.defineProperty(Q,B,{value:F,enumerable:!0,configurable:!0,writable:!0}):Q[B]=F,Q}function K(Q,B,F,U,g,I,C){try{var s=Q[I](C),c=s.value}catch(Q){return void F(Q)}s.done?B(c):Promise.resolve(c).then(U,g)}function O(Q){return function(){var B=this,F=arguments;return new Promise((function(U,g){var I=Q.apply(B,F);function C(Q){K(I,U,g,C,s,"next",Q)}function s(Q){K(I,U,g,C,s,"throw",Q)}C(void 0)}))}}function P(Q,B){if(!(Q instanceof B))throw new TypeError("Cannot call a class as a function")}function f(Q,B){for(var F=0;F<B.length;F++){var U=B[F];U.enumerable=U.enumerable||!1,U.configurable=!0,"value"in U&&(U.writable=!0),Object.defineProperty(Q,U.key,U)}}function j(Q,B,F){return B&&f(Q.prototype,B),F&&f(Q,F),Object.defineProperty(Q,"prototype",{writable:!1}),Q}var q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},_={exports:{}};!function(Q){var B=function(Q){var B,F=Object.prototype,U=F.hasOwnProperty,g="function"==typeof Symbol?Symbol:{},I=g.iterator||"@@iterator",C=g.asyncIterator||"@@asyncIterator",s=g.toStringTag||"@@toStringTag";function c(Q,B,F){return Object.defineProperty(Q,B,{value:F,enumerable:!0,configurable:!0,writable:!0}),Q[B]}try{c({},"")}catch(Q){c=function(Q,B,F){return Q[B]=F}}function l(Q,B,F,U){var g=B&&B.prototype instanceof d?B:d,I=Object.create(g.prototype),C=new X(U||[]);return I._invoke=function(Q,B,F){var U=Z;return function(g,I){if(U===L)throw new Error("Generator is already running");if(U===x){if("throw"===g)throw I;return u()}for(F.method=g,F.arg=I;;){var C=F.delegate;if(C){var s=J(C,F);if(s){if(s===y)continue;return s}}if("next"===F.method)F.sent=F._sent=F.arg;else if("throw"===F.method){if(U===Z)throw U=x,F.arg;F.dispatchException(F.arg)}else"return"===F.method&&F.abrupt("return",F.arg);U=L;var c=S(Q,B,F);if("normal"===c.type){if(U=F.done?x:G,c.arg===y)continue;return{value:c.arg,done:F.done}}"throw"===c.type&&(U=x,F.method="throw",F.arg=c.arg)}}}(Q,F,C),I}function S(Q,B,F){try{return{type:"normal",arg:Q.call(B,F)}}catch(Q){return{type:"throw",arg:Q}}}Q.wrap=l;var Z="suspendedStart",G="suspendedYield",L="executing",x="completed",y={};function d(){}function b(){}function V(){}var N={};c(N,I,(function(){return this}));var R=Object.getPrototypeOf,A=R&&R(R(n([])));A&&A!==F&&U.call(A,I)&&(N=A);var D=V.prototype=d.prototype=Object.create(N);function m(Q){["next","throw","return"].forEach((function(B){c(Q,B,(function(Q){return this._invoke(B,Q)}))}))}function E(Q,B){function F(g,I,C,s){var c=S(Q[g],Q,I);if("throw"!==c.type){var l=c.arg,Z=l.value;return Z&&"object"==typeof Z&&U.call(Z,"__await")?B.resolve(Z.__await).then((function(Q){F("next",Q,C,s)}),(function(Q){F("throw",Q,C,s)})):B.resolve(Z).then((function(Q){l.value=Q,C(l)}),(function(Q){return F("throw",Q,C,s)}))}s(c.arg)}var g;this._invoke=function(Q,U){function I(){return new B((function(B,g){F(Q,U,B,g)}))}return g=g?g.then(I,I):I()}}function J(Q,F){var U=Q.iterator[F.method];if(U===B){if(F.delegate=null,"throw"===F.method){if(Q.iterator.return&&(F.method="return",F.arg=B,J(Q,F),"throw"===F.method))return y;F.method="throw",F.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var g=S(U,Q.iterator,F.arg);if("throw"===g.type)return F.method="throw",F.arg=g.arg,F.delegate=null,y;var I=g.arg;return I?I.done?(F[Q.resultName]=I.value,F.next=Q.nextLoc,"return"!==F.method&&(F.method="next",F.arg=B),F.delegate=null,y):I:(F.method="throw",F.arg=new TypeError("iterator result is not an object"),F.delegate=null,y)}function t(Q){var B={tryLoc:Q[0]};1 in Q&&(B.catchLoc=Q[1]),2 in Q&&(B.finallyLoc=Q[2],B.afterLoc=Q[3]),this.tryEntries.push(B)}function i(Q){var B=Q.completion||{};B.type="normal",delete B.arg,Q.completion=B}function X(Q){this.tryEntries=[{tryLoc:"root"}],Q.forEach(t,this),this.reset(!0)}function n(Q){if(Q){var F=Q[I];if(F)return F.call(Q);if("function"==typeof Q.next)return Q;if(!isNaN(Q.length)){var g=-1,C=function F(){for(;++g<Q.length;)if(U.call(Q,g))return F.value=Q[g],F.done=!1,F;return F.value=B,F.done=!0,F};return C.next=C}}return{next:u}}function u(){return{value:B,done:!0}}return b.prototype=V,c(D,"constructor",V),c(V,"constructor",b),b.displayName=c(V,s,"GeneratorFunction"),Q.isGeneratorFunction=function(Q){var B="function"==typeof Q&&Q.constructor;return!!B&&(B===b||"GeneratorFunction"===(B.displayName||B.name))},Q.mark=function(Q){return Object.setPrototypeOf?Object.setPrototypeOf(Q,V):(Q.__proto__=V,c(Q,s,"GeneratorFunction")),Q.prototype=Object.create(D),Q},Q.awrap=function(Q){return{__await:Q}},m(E.prototype),c(E.prototype,C,(function(){return this})),Q.AsyncIterator=E,Q.async=function(B,F,U,g,I){void 0===I&&(I=Promise);var C=new E(l(B,F,U,g),I);return Q.isGeneratorFunction(F)?C:C.next().then((function(Q){return Q.done?Q.value:C.next()}))},m(D),c(D,s,"Generator"),c(D,I,(function(){return this})),c(D,"toString",(function(){return"[object Generator]"})),Q.keys=function(Q){var B=[];for(var F in Q)B.push(F);return B.reverse(),function F(){for(;B.length;){var U=B.pop();if(U in Q)return F.value=U,F.done=!1,F}return F.done=!0,F}},Q.values=n,X.prototype={constructor:X,reset:function(Q){if(this.prev=0,this.next=0,this.sent=this._sent=B,this.done=!1,this.delegate=null,this.method="next",this.arg=B,this.tryEntries.forEach(i),!Q)for(var F in this)"t"===F.charAt(0)&&U.call(this,F)&&!isNaN(+F.slice(1))&&(this[F]=B)},stop:function(){this.done=!0;var Q=this.tryEntries[0].completion;if("throw"===Q.type)throw Q.arg;return this.rval},dispatchException:function(Q){if(this.done)throw Q;var F=this;function g(U,g){return s.type="throw",s.arg=Q,F.next=U,g&&(F.method="next",F.arg=B),!!g}for(var I=this.tryEntries.length-1;I>=0;--I){var C=this.tryEntries[I],s=C.completion;if("root"===C.tryLoc)return g("end");if(C.tryLoc<=this.prev){var c=U.call(C,"catchLoc"),l=U.call(C,"finallyLoc");if(c&&l){if(this.prev<C.catchLoc)return g(C.catchLoc,!0);if(this.prev<C.finallyLoc)return g(C.finallyLoc)}else if(c){if(this.prev<C.catchLoc)return g(C.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<C.finallyLoc)return g(C.finallyLoc)}}}},abrupt:function(Q,B){for(var F=this.tryEntries.length-1;F>=0;--F){var g=this.tryEntries[F];if(g.tryLoc<=this.prev&&U.call(g,"finallyLoc")&&this.prev<g.finallyLoc){var I=g;break}}I&&("break"===Q||"continue"===Q)&&I.tryLoc<=B&&B<=I.finallyLoc&&(I=null);var C=I?I.completion:{};return C.type=Q,C.arg=B,I?(this.method="next",this.next=I.finallyLoc,y):this.complete(C)},complete:function(Q,B){if("throw"===Q.type)throw Q.arg;return"break"===Q.type||"continue"===Q.type?this.next=Q.arg:"return"===Q.type?(this.rval=this.arg=Q.arg,this.method="return",this.next="end"):"normal"===Q.type&&B&&(this.next=B),y},finish:function(Q){for(var B=this.tryEntries.length-1;B>=0;--B){var F=this.tryEntries[B];if(F.finallyLoc===Q)return this.complete(F.completion,F.afterLoc),i(F),y}},catch:function(Q){for(var B=this.tryEntries.length-1;B>=0;--B){var F=this.tryEntries[B];if(F.tryLoc===Q){var U=F.completion;if("throw"===U.type){var g=U.arg;i(F)}return g}}throw new Error("illegal catch attempt")},delegateYield:function(Q,F,U){return this.delegate={iterator:n(Q),resultName:F,nextLoc:U},"next"===this.method&&(this.arg=B),y}},Q}(Q.exports);try{regeneratorRuntime=B}catch(Q){"object"==typeof globalThis?globalThis.regeneratorRuntime=B:Function("r","regeneratorRuntime = r")(B)}}(_);var $,QQ=_.exports,BQ={exports:{}},FQ="object"==typeof Reflect?Reflect:null,UQ=FQ&&"function"==typeof FQ.apply?FQ.apply:function(Q,B,F){return Function.prototype.apply.call(Q,B,F)};$=FQ&&"function"==typeof FQ.ownKeys?FQ.ownKeys:Object.getOwnPropertySymbols?function(Q){return Object.getOwnPropertyNames(Q).concat(Object.getOwnPropertySymbols(Q))}:function(Q){return Object.getOwnPropertyNames(Q)};var gQ=Number.isNaN||function(Q){return Q!=Q};function IQ(){IQ.init.call(this)}BQ.exports=IQ,BQ.exports.once=function(Q,B){return new Promise((function(F,U){function g(F){Q.removeListener(B,I),U(F)}function I(){"function"==typeof Q.removeListener&&Q.removeListener("error",g),F([].slice.call(arguments))}yQ(Q,B,I,{once:!0}),"error"!==B&&function(Q,B,F){"function"==typeof Q.on&&yQ(Q,"error",B,F)}(Q,g,{once:!0})}))},IQ.EventEmitter=IQ,IQ.prototype._events=void 0,IQ.prototype._eventsCount=0,IQ.prototype._maxListeners=void 0;var CQ=10;function sQ(Q){if("function"!=typeof Q)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof Q)}function cQ(Q){return void 0===Q._maxListeners?IQ.defaultMaxListeners:Q._maxListeners}function lQ(Q,B,F,U){var g,I,C,s;if(sQ(F),void 0===(I=Q._events)?(I=Q._events=Object.create(null),Q._eventsCount=0):(void 0!==I.newListener&&(Q.emit("newListener",B,F.listener?F.listener:F),I=Q._events),C=I[B]),void 0===C)C=I[B]=F,++Q._eventsCount;else if("function"==typeof C?C=I[B]=U?[F,C]:[C,F]:U?C.unshift(F):C.push(F),(g=cQ(Q))>0&&C.length>g&&!C.warned){C.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+C.length+" "+String(B)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=Q,c.type=B,c.count=C.length,s=c,console&&console.warn&&console.warn(s)}return Q}function SQ(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function ZQ(Q,B,F){var U={fired:!1,wrapFn:void 0,target:Q,type:B,listener:F},g=SQ.bind(U);return g.listener=F,U.wrapFn=g,g}function GQ(Q,B,F){var U=Q._events;if(void 0===U)return[];var g=U[B];return void 0===g?[]:"function"==typeof g?F?[g.listener||g]:[g]:F?function(Q){for(var B=new Array(Q.length),F=0;F<B.length;++F)B[F]=Q[F].listener||Q[F];return B}(g):xQ(g,g.length)}function LQ(Q){var B=this._events;if(void 0!==B){var F=B[Q];if("function"==typeof F)return 1;if(void 0!==F)return F.length}return 0}function xQ(Q,B){for(var F=new Array(B),U=0;U<B;++U)F[U]=Q[U];return F}function yQ(Q,B,F,U){if("function"==typeof Q.on)U.once?Q.once(B,F):Q.on(B,F);else{if("function"!=typeof Q.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof Q);Q.addEventListener(B,(function g(I){U.once&&Q.removeEventListener(B,g),F(I)}))}}Object.defineProperty(IQ,"defaultMaxListeners",{enumerable:!0,get:function(){return CQ},set:function(Q){if("number"!=typeof Q||Q<0||gQ(Q))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+Q+".");CQ=Q}}),IQ.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},IQ.prototype.setMaxListeners=function(Q){if("number"!=typeof Q||Q<0||gQ(Q))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+Q+".");return this._maxListeners=Q,this},IQ.prototype.getMaxListeners=function(){return cQ(this)},IQ.prototype.emit=function(Q){for(var B=[],F=1;F<arguments.length;F++)B.push(arguments[F]);var U="error"===Q,g=this._events;if(void 0!==g)U=U&&void 0===g.error;else if(!U)return!1;if(U){var I;if(B.length>0&&(I=B[0]),I instanceof Error)throw I;var C=new Error("Unhandled error."+(I?" ("+I.message+")":""));throw C.context=I,C}var s=g[Q];if(void 0===s)return!1;if("function"==typeof s)UQ(s,this,B);else{var c=s.length,l=xQ(s,c);for(F=0;F<c;++F)UQ(l[F],this,B)}return!0},IQ.prototype.addListener=function(Q,B){return lQ(this,Q,B,!1)},IQ.prototype.on=IQ.prototype.addListener,IQ.prototype.prependListener=function(Q,B){return lQ(this,Q,B,!0)},IQ.prototype.once=function(Q,B){return sQ(B),this.on(Q,ZQ(this,Q,B)),this},IQ.prototype.prependOnceListener=function(Q,B){return sQ(B),this.prependListener(Q,ZQ(this,Q,B)),this},IQ.prototype.removeListener=function(Q,B){var F,U,g,I,C;if(sQ(B),void 0===(U=this._events))return this;if(void 0===(F=U[Q]))return this;if(F===B||F.listener===B)0==--this._eventsCount?this._events=Object.create(null):(delete U[Q],U.removeListener&&this.emit("removeListener",Q,F.listener||B));else if("function"!=typeof F){for(g=-1,I=F.length-1;I>=0;I--)if(F[I]===B||F[I].listener===B){C=F[I].listener,g=I;break}if(g<0)return this;0===g?F.shift():function(Q,B){for(;B+1<Q.length;B++)Q[B]=Q[B+1];Q.pop()}(F,g),1===F.length&&(U[Q]=F[0]),void 0!==U.removeListener&&this.emit("removeListener",Q,C||B)}return this},IQ.prototype.off=IQ.prototype.removeListener,IQ.prototype.removeAllListeners=function(Q){var B,F,U;if(void 0===(F=this._events))return this;if(void 0===F.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==F[Q]&&(0==--this._eventsCount?this._events=Object.create(null):delete F[Q]),this;if(0===arguments.length){var g,I=Object.keys(F);for(U=0;U<I.length;++U)"removeListener"!==(g=I[U])&&this.removeAllListeners(g);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(B=F[Q]))this.removeListener(Q,B);else if(void 0!==B)for(U=B.length-1;U>=0;U--)this.removeListener(Q,B[U]);return this},IQ.prototype.listeners=function(Q){return GQ(this,Q,!0)},IQ.prototype.rawListeners=function(Q){return GQ(this,Q,!1)},IQ.listenerCount=function(Q,B){return"function"==typeof Q.listenerCount?Q.listenerCount(B):LQ.call(Q,B)},IQ.prototype.listenerCount=LQ,IQ.prototype.eventNames=function(){return this._eventsCount>0?$(this._events):[]};var dQ={exports:{}};!function(Q,B){function F(Q,B){if(!Q)throw new Error(B||"Assertion failed")}function U(Q,B){Q.super_=B;var F=function(){};F.prototype=B.prototype,Q.prototype=new F,Q.prototype.constructor=Q}function g(Q,B,F){if(g.isBN(Q))return Q;this.negative=0,this.words=null,this.length=0,this.red=null,null!==Q&&("le"!==B&&"be"!==B||(F=B,B=10),this._init(Q||0,B||10,F||"be"))}var I;"object"==typeof Q?Q.exports=g:B.BN=g,g.BN=g,g.wordSize=26;try{I="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:require("buffer").Buffer}catch(Q){}function C(Q,B){var F=Q.charCodeAt(B);return F>=65&&F<=70?F-55:F>=97&&F<=102?F-87:F-48&15}function s(Q,B,F){var U=C(Q,F);return F-1>=B&&(U|=C(Q,F-1)<<4),U}function c(Q,B,F,U){for(var g=0,I=Math.min(Q.length,F),C=B;C<I;C++){var s=Q.charCodeAt(C)-48;g*=U,g+=s>=49?s-49+10:s>=17?s-17+10:s}return g}g.isBN=function(Q){return Q instanceof g||null!==Q&&"object"==typeof Q&&Q.constructor.wordSize===g.wordSize&&Array.isArray(Q.words)},g.max=function(Q,B){return Q.cmp(B)>0?Q:B},g.min=function(Q,B){return Q.cmp(B)<0?Q:B},g.prototype._init=function(Q,B,U){if("number"==typeof Q)return this._initNumber(Q,B,U);if("object"==typeof Q)return this._initArray(Q,B,U);"hex"===B&&(B=16),F(B===(0|B)&&B>=2&&B<=36);var g=0;"-"===(Q=Q.toString().replace(/\s+/g,""))[0]&&(g++,this.negative=1),g<Q.length&&(16===B?this._parseHex(Q,g,U):(this._parseBase(Q,B,g),"le"===U&&this._initArray(this.toArray(),B,U)))},g.prototype._initNumber=function(Q,B,U){Q<0&&(this.negative=1,Q=-Q),Q<67108864?(this.words=[67108863&Q],this.length=1):Q<4503599627370496?(this.words=[67108863&Q,Q/67108864&67108863],this.length=2):(F(Q<9007199254740992),this.words=[67108863&Q,Q/67108864&67108863,1],this.length=3),"le"===U&&this._initArray(this.toArray(),B,U)},g.prototype._initArray=function(Q,B,U){if(F("number"==typeof Q.length),Q.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(Q.length/3),this.words=new Array(this.length);for(var g=0;g<this.length;g++)this.words[g]=0;var I,C,s=0;if("be"===U)for(g=Q.length-1,I=0;g>=0;g-=3)C=Q[g]|Q[g-1]<<8|Q[g-2]<<16,this.words[I]|=C<<s&67108863,this.words[I+1]=C>>>26-s&67108863,(s+=24)>=26&&(s-=26,I++);else if("le"===U)for(g=0,I=0;g<Q.length;g+=3)C=Q[g]|Q[g+1]<<8|Q[g+2]<<16,this.words[I]|=C<<s&67108863,this.words[I+1]=C>>>26-s&67108863,(s+=24)>=26&&(s-=26,I++);return this.strip()},g.prototype._parseHex=function(Q,B,F){this.length=Math.ceil((Q.length-B)/6),this.words=new Array(this.length);for(var U=0;U<this.length;U++)this.words[U]=0;var g,I=0,C=0;if("be"===F)for(U=Q.length-1;U>=B;U-=2)g=s(Q,B,U)<<I,this.words[C]|=67108863&g,I>=18?(I-=18,C+=1,this.words[C]|=g>>>26):I+=8;else for(U=(Q.length-B)%2==0?B+1:B;U<Q.length;U+=2)g=s(Q,B,U)<<I,this.words[C]|=67108863&g,I>=18?(I-=18,C+=1,this.words[C]|=g>>>26):I+=8;this.strip()},g.prototype._parseBase=function(Q,B,F){this.words=[0],this.length=1;for(var U=0,g=1;g<=67108863;g*=B)U++;U--,g=g/B|0;for(var I=Q.length-F,C=I%U,s=Math.min(I,I-C)+F,l=0,S=F;S<s;S+=U)l=c(Q,S,S+U,B),this.imuln(g),this.words[0]+l<67108864?this.words[0]+=l:this._iaddn(l);if(0!==C){var Z=1;for(l=c(Q,S,Q.length,B),S=0;S<C;S++)Z*=B;this.imuln(Z),this.words[0]+l<67108864?this.words[0]+=l:this._iaddn(l)}this.strip()},g.prototype.copy=function(Q){Q.words=new Array(this.length);for(var B=0;B<this.length;B++)Q.words[B]=this.words[B];Q.length=this.length,Q.negative=this.negative,Q.red=this.red},g.prototype.clone=function(){var Q=new g(null);return this.copy(Q),Q},g.prototype._expand=function(Q){for(;this.length<Q;)this.words[this.length++]=0;return this},g.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},g.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},g.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],S=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],Z=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function G(Q,B,F){F.negative=B.negative^Q.negative;var U=Q.length+B.length|0;F.length=U,U=U-1|0;var g=0|Q.words[0],I=0|B.words[0],C=g*I,s=67108863&C,c=C/67108864|0;F.words[0]=s;for(var l=1;l<U;l++){for(var S=c>>>26,Z=67108863&c,G=Math.min(l,B.length-1),L=Math.max(0,l-Q.length+1);L<=G;L++){var x=l-L|0;S+=(C=(g=0|Q.words[x])*(I=0|B.words[L])+Z)/67108864|0,Z=67108863&C}F.words[l]=0|Z,c=0|S}return 0!==c?F.words[l]=0|c:F.length--,F.strip()}g.prototype.toString=function(Q,B){var U;if(B=0|B||1,16===(Q=Q||10)||"hex"===Q){U="";for(var g=0,I=0,C=0;C<this.length;C++){var s=this.words[C],c=(16777215&(s<<g|I)).toString(16);U=0!=(I=s>>>24-g&16777215)||C!==this.length-1?l[6-c.length]+c+U:c+U,(g+=2)>=26&&(g-=26,C--)}for(0!==I&&(U=I.toString(16)+U);U.length%B!=0;)U="0"+U;return 0!==this.negative&&(U="-"+U),U}if(Q===(0|Q)&&Q>=2&&Q<=36){var G=S[Q],L=Z[Q];U="";var x=this.clone();for(x.negative=0;!x.isZero();){var y=x.modn(L).toString(Q);U=(x=x.idivn(L)).isZero()?y+U:l[G-y.length]+y+U}for(this.isZero()&&(U="0"+U);U.length%B!=0;)U="0"+U;return 0!==this.negative&&(U="-"+U),U}F(!1,"Base should be between 2 and 36")},g.prototype.toNumber=function(){var Q=this.words[0];return 2===this.length?Q+=67108864*this.words[1]:3===this.length&&1===this.words[2]?Q+=4503599627370496+67108864*this.words[1]:this.length>2&&F(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-Q:Q},g.prototype.toJSON=function(){return this.toString(16)},g.prototype.toBuffer=function(Q,B){return F(void 0!==I),this.toArrayLike(I,Q,B)},g.prototype.toArray=function(Q,B){return this.toArrayLike(Array,Q,B)},g.prototype.toArrayLike=function(Q,B,U){var g=this.byteLength(),I=U||Math.max(1,g);F(g<=I,"byte array longer than desired length"),F(I>0,"Requested array length <= 0"),this.strip();var C,s,c="le"===B,l=new Q(I),S=this.clone();if(c){for(s=0;!S.isZero();s++)C=S.andln(255),S.iushrn(8),l[s]=C;for(;s<I;s++)l[s]=0}else{for(s=0;s<I-g;s++)l[s]=0;for(s=0;!S.isZero();s++)C=S.andln(255),S.iushrn(8),l[I-s-1]=C}return l},Math.clz32?g.prototype._countBits=function(Q){return 32-Math.clz32(Q)}:g.prototype._countBits=function(Q){var B=Q,F=0;return B>=4096&&(F+=13,B>>>=13),B>=64&&(F+=7,B>>>=7),B>=8&&(F+=4,B>>>=4),B>=2&&(F+=2,B>>>=2),F+B},g.prototype._zeroBits=function(Q){if(0===Q)return 26;var B=Q,F=0;return 0==(8191&B)&&(F+=13,B>>>=13),0==(127&B)&&(F+=7,B>>>=7),0==(15&B)&&(F+=4,B>>>=4),0==(3&B)&&(F+=2,B>>>=2),0==(1&B)&&F++,F},g.prototype.bitLength=function(){var Q=this.words[this.length-1],B=this._countBits(Q);return 26*(this.length-1)+B},g.prototype.zeroBits=function(){if(this.isZero())return 0;for(var Q=0,B=0;B<this.length;B++){var F=this._zeroBits(this.words[B]);if(Q+=F,26!==F)break}return Q},g.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},g.prototype.toTwos=function(Q){return 0!==this.negative?this.abs().inotn(Q).iaddn(1):this.clone()},g.prototype.fromTwos=function(Q){return this.testn(Q-1)?this.notn(Q).iaddn(1).ineg():this.clone()},g.prototype.isNeg=function(){return 0!==this.negative},g.prototype.neg=function(){return this.clone().ineg()},g.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},g.prototype.iuor=function(Q){for(;this.length<Q.length;)this.words[this.length++]=0;for(var B=0;B<Q.length;B++)this.words[B]=this.words[B]|Q.words[B];return this.strip()},g.prototype.ior=function(Q){return F(0==(this.negative|Q.negative)),this.iuor(Q)},g.prototype.or=function(Q){return this.length>Q.length?this.clone().ior(Q):Q.clone().ior(this)},g.prototype.uor=function(Q){return this.length>Q.length?this.clone().iuor(Q):Q.clone().iuor(this)},g.prototype.iuand=function(Q){var B;B=this.length>Q.length?Q:this;for(var F=0;F<B.length;F++)this.words[F]=this.words[F]&Q.words[F];return this.length=B.length,this.strip()},g.prototype.iand=function(Q){return F(0==(this.negative|Q.negative)),this.iuand(Q)},g.prototype.and=function(Q){return this.length>Q.length?this.clone().iand(Q):Q.clone().iand(this)},g.prototype.uand=function(Q){return this.length>Q.length?this.clone().iuand(Q):Q.clone().iuand(this)},g.prototype.iuxor=function(Q){var B,F;this.length>Q.length?(B=this,F=Q):(B=Q,F=this);for(var U=0;U<F.length;U++)this.words[U]=B.words[U]^F.words[U];if(this!==B)for(;U<B.length;U++)this.words[U]=B.words[U];return this.length=B.length,this.strip()},g.prototype.ixor=function(Q){return F(0==(this.negative|Q.negative)),this.iuxor(Q)},g.prototype.xor=function(Q){return this.length>Q.length?this.clone().ixor(Q):Q.clone().ixor(this)},g.prototype.uxor=function(Q){return this.length>Q.length?this.clone().iuxor(Q):Q.clone().iuxor(this)},g.prototype.inotn=function(Q){F("number"==typeof Q&&Q>=0);var B=0|Math.ceil(Q/26),U=Q%26;this._expand(B),U>0&&B--;for(var g=0;g<B;g++)this.words[g]=67108863&~this.words[g];return U>0&&(this.words[g]=~this.words[g]&67108863>>26-U),this.strip()},g.prototype.notn=function(Q){return this.clone().inotn(Q)},g.prototype.setn=function(Q,B){F("number"==typeof Q&&Q>=0);var U=Q/26|0,g=Q%26;return this._expand(U+1),this.words[U]=B?this.words[U]|1<<g:this.words[U]&~(1<<g),this.strip()},g.prototype.iadd=function(Q){var B,F,U;if(0!==this.negative&&0===Q.negative)return this.negative=0,B=this.isub(Q),this.negative^=1,this._normSign();if(0===this.negative&&0!==Q.negative)return Q.negative=0,B=this.isub(Q),Q.negative=1,B._normSign();this.length>Q.length?(F=this,U=Q):(F=Q,U=this);for(var g=0,I=0;I<U.length;I++)B=(0|F.words[I])+(0|U.words[I])+g,this.words[I]=67108863&B,g=B>>>26;for(;0!==g&&I<F.length;I++)B=(0|F.words[I])+g,this.words[I]=67108863&B,g=B>>>26;if(this.length=F.length,0!==g)this.words[this.length]=g,this.length++;else if(F!==this)for(;I<F.length;I++)this.words[I]=F.words[I];return this},g.prototype.add=function(Q){var B;return 0!==Q.negative&&0===this.negative?(Q.negative=0,B=this.sub(Q),Q.negative^=1,B):0===Q.negative&&0!==this.negative?(this.negative=0,B=Q.sub(this),this.negative=1,B):this.length>Q.length?this.clone().iadd(Q):Q.clone().iadd(this)},g.prototype.isub=function(Q){if(0!==Q.negative){Q.negative=0;var B=this.iadd(Q);return Q.negative=1,B._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(Q),this.negative=1,this._normSign();var F,U,g=this.cmp(Q);if(0===g)return this.negative=0,this.length=1,this.words[0]=0,this;g>0?(F=this,U=Q):(F=Q,U=this);for(var I=0,C=0;C<U.length;C++)I=(B=(0|F.words[C])-(0|U.words[C])+I)>>26,this.words[C]=67108863&B;for(;0!==I&&C<F.length;C++)I=(B=(0|F.words[C])+I)>>26,this.words[C]=67108863&B;if(0===I&&C<F.length&&F!==this)for(;C<F.length;C++)this.words[C]=F.words[C];return this.length=Math.max(this.length,C),F!==this&&(this.negative=1),this.strip()},g.prototype.sub=function(Q){return this.clone().isub(Q)};var L=function(Q,B,F){var U,g,I,C=Q.words,s=B.words,c=F.words,l=0,S=0|C[0],Z=8191&S,G=S>>>13,L=0|C[1],x=8191&L,y=L>>>13,d=0|C[2],b=8191&d,V=d>>>13,N=0|C[3],R=8191&N,A=N>>>13,D=0|C[4],m=8191&D,E=D>>>13,J=0|C[5],t=8191&J,i=J>>>13,X=0|C[6],n=8191&X,u=X>>>13,H=0|C[7],W=8191&H,a=H>>>13,o=0|C[8],h=8191&o,Y=o>>>13,e=0|C[9],k=8191&e,p=e>>>13,M=0|s[0],T=8191&M,z=M>>>13,r=0|s[1],v=8191&r,w=r>>>13,K=0|s[2],O=8191&K,P=K>>>13,f=0|s[3],j=8191&f,q=f>>>13,_=0|s[4],$=8191&_,QQ=_>>>13,BQ=0|s[5],FQ=8191&BQ,UQ=BQ>>>13,gQ=0|s[6],IQ=8191&gQ,CQ=gQ>>>13,sQ=0|s[7],cQ=8191&sQ,lQ=sQ>>>13,SQ=0|s[8],ZQ=8191&SQ,GQ=SQ>>>13,LQ=0|s[9],xQ=8191&LQ,yQ=LQ>>>13;F.negative=Q.negative^B.negative,F.length=19;var dQ=(l+(U=Math.imul(Z,T))|0)+((8191&(g=(g=Math.imul(Z,z))+Math.imul(G,T)|0))<<13)|0;l=((I=Math.imul(G,z))+(g>>>13)|0)+(dQ>>>26)|0,dQ&=67108863,U=Math.imul(x,T),g=(g=Math.imul(x,z))+Math.imul(y,T)|0,I=Math.imul(y,z);var bQ=(l+(U=U+Math.imul(Z,v)|0)|0)+((8191&(g=(g=g+Math.imul(Z,w)|0)+Math.imul(G,v)|0))<<13)|0;l=((I=I+Math.imul(G,w)|0)+(g>>>13)|0)+(bQ>>>26)|0,bQ&=67108863,U=Math.imul(b,T),g=(g=Math.imul(b,z))+Math.imul(V,T)|0,I=Math.imul(V,z),U=U+Math.imul(x,v)|0,g=(g=g+Math.imul(x,w)|0)+Math.imul(y,v)|0,I=I+Math.imul(y,w)|0;var VQ=(l+(U=U+Math.imul(Z,O)|0)|0)+((8191&(g=(g=g+Math.imul(Z,P)|0)+Math.imul(G,O)|0))<<13)|0;l=((I=I+Math.imul(G,P)|0)+(g>>>13)|0)+(VQ>>>26)|0,VQ&=67108863,U=Math.imul(R,T),g=(g=Math.imul(R,z))+Math.imul(A,T)|0,I=Math.imul(A,z),U=U+Math.imul(b,v)|0,g=(g=g+Math.imul(b,w)|0)+Math.imul(V,v)|0,I=I+Math.imul(V,w)|0,U=U+Math.imul(x,O)|0,g=(g=g+Math.imul(x,P)|0)+Math.imul(y,O)|0,I=I+Math.imul(y,P)|0;var NQ=(l+(U=U+Math.imul(Z,j)|0)|0)+((8191&(g=(g=g+Math.imul(Z,q)|0)+Math.imul(G,j)|0))<<13)|0;l=((I=I+Math.imul(G,q)|0)+(g>>>13)|0)+(NQ>>>26)|0,NQ&=67108863,U=Math.imul(m,T),g=(g=Math.imul(m,z))+Math.imul(E,T)|0,I=Math.imul(E,z),U=U+Math.imul(R,v)|0,g=(g=g+Math.imul(R,w)|0)+Math.imul(A,v)|0,I=I+Math.imul(A,w)|0,U=U+Math.imul(b,O)|0,g=(g=g+Math.imul(b,P)|0)+Math.imul(V,O)|0,I=I+Math.imul(V,P)|0,U=U+Math.imul(x,j)|0,g=(g=g+Math.imul(x,q)|0)+Math.imul(y,j)|0,I=I+Math.imul(y,q)|0;var RQ=(l+(U=U+Math.imul(Z,$)|0)|0)+((8191&(g=(g=g+Math.imul(Z,QQ)|0)+Math.imul(G,$)|0))<<13)|0;l=((I=I+Math.imul(G,QQ)|0)+(g>>>13)|0)+(RQ>>>26)|0,RQ&=67108863,U=Math.imul(t,T),g=(g=Math.imul(t,z))+Math.imul(i,T)|0,I=Math.imul(i,z),U=U+Math.imul(m,v)|0,g=(g=g+Math.imul(m,w)|0)+Math.imul(E,v)|0,I=I+Math.imul(E,w)|0,U=U+Math.imul(R,O)|0,g=(g=g+Math.imul(R,P)|0)+Math.imul(A,O)|0,I=I+Math.imul(A,P)|0,U=U+Math.imul(b,j)|0,g=(g=g+Math.imul(b,q)|0)+Math.imul(V,j)|0,I=I+Math.imul(V,q)|0,U=U+Math.imul(x,$)|0,g=(g=g+Math.imul(x,QQ)|0)+Math.imul(y,$)|0,I=I+Math.imul(y,QQ)|0;var AQ=(l+(U=U+Math.imul(Z,FQ)|0)|0)+((8191&(g=(g=g+Math.imul(Z,UQ)|0)+Math.imul(G,FQ)|0))<<13)|0;l=((I=I+Math.imul(G,UQ)|0)+(g>>>13)|0)+(AQ>>>26)|0,AQ&=67108863,U=Math.imul(n,T),g=(g=Math.imul(n,z))+Math.imul(u,T)|0,I=Math.imul(u,z),U=U+Math.imul(t,v)|0,g=(g=g+Math.imul(t,w)|0)+Math.imul(i,v)|0,I=I+Math.imul(i,w)|0,U=U+Math.imul(m,O)|0,g=(g=g+Math.imul(m,P)|0)+Math.imul(E,O)|0,I=I+Math.imul(E,P)|0,U=U+Math.imul(R,j)|0,g=(g=g+Math.imul(R,q)|0)+Math.imul(A,j)|0,I=I+Math.imul(A,q)|0,U=U+Math.imul(b,$)|0,g=(g=g+Math.imul(b,QQ)|0)+Math.imul(V,$)|0,I=I+Math.imul(V,QQ)|0,U=U+Math.imul(x,FQ)|0,g=(g=g+Math.imul(x,UQ)|0)+Math.imul(y,FQ)|0,I=I+Math.imul(y,UQ)|0;var DQ=(l+(U=U+Math.imul(Z,IQ)|0)|0)+((8191&(g=(g=g+Math.imul(Z,CQ)|0)+Math.imul(G,IQ)|0))<<13)|0;l=((I=I+Math.imul(G,CQ)|0)+(g>>>13)|0)+(DQ>>>26)|0,DQ&=67108863,U=Math.imul(W,T),g=(g=Math.imul(W,z))+Math.imul(a,T)|0,I=Math.imul(a,z),U=U+Math.imul(n,v)|0,g=(g=g+Math.imul(n,w)|0)+Math.imul(u,v)|0,I=I+Math.imul(u,w)|0,U=U+Math.imul(t,O)|0,g=(g=g+Math.imul(t,P)|0)+Math.imul(i,O)|0,I=I+Math.imul(i,P)|0,U=U+Math.imul(m,j)|0,g=(g=g+Math.imul(m,q)|0)+Math.imul(E,j)|0,I=I+Math.imul(E,q)|0,U=U+Math.imul(R,$)|0,g=(g=g+Math.imul(R,QQ)|0)+Math.imul(A,$)|0,I=I+Math.imul(A,QQ)|0,U=U+Math.imul(b,FQ)|0,g=(g=g+Math.imul(b,UQ)|0)+Math.imul(V,FQ)|0,I=I+Math.imul(V,UQ)|0,U=U+Math.imul(x,IQ)|0,g=(g=g+Math.imul(x,CQ)|0)+Math.imul(y,IQ)|0,I=I+Math.imul(y,CQ)|0;var mQ=(l+(U=U+Math.imul(Z,cQ)|0)|0)+((8191&(g=(g=g+Math.imul(Z,lQ)|0)+Math.imul(G,cQ)|0))<<13)|0;l=((I=I+Math.imul(G,lQ)|0)+(g>>>13)|0)+(mQ>>>26)|0,mQ&=67108863,U=Math.imul(h,T),g=(g=Math.imul(h,z))+Math.imul(Y,T)|0,I=Math.imul(Y,z),U=U+Math.imul(W,v)|0,g=(g=g+Math.imul(W,w)|0)+Math.imul(a,v)|0,I=I+Math.imul(a,w)|0,U=U+Math.imul(n,O)|0,g=(g=g+Math.imul(n,P)|0)+Math.imul(u,O)|0,I=I+Math.imul(u,P)|0,U=U+Math.imul(t,j)|0,g=(g=g+Math.imul(t,q)|0)+Math.imul(i,j)|0,I=I+Math.imul(i,q)|0,U=U+Math.imul(m,$)|0,g=(g=g+Math.imul(m,QQ)|0)+Math.imul(E,$)|0,I=I+Math.imul(E,QQ)|0,U=U+Math.imul(R,FQ)|0,g=(g=g+Math.imul(R,UQ)|0)+Math.imul(A,FQ)|0,I=I+Math.imul(A,UQ)|0,U=U+Math.imul(b,IQ)|0,g=(g=g+Math.imul(b,CQ)|0)+Math.imul(V,IQ)|0,I=I+Math.imul(V,CQ)|0,U=U+Math.imul(x,cQ)|0,g=(g=g+Math.imul(x,lQ)|0)+Math.imul(y,cQ)|0,I=I+Math.imul(y,lQ)|0;var EQ=(l+(U=U+Math.imul(Z,ZQ)|0)|0)+((8191&(g=(g=g+Math.imul(Z,GQ)|0)+Math.imul(G,ZQ)|0))<<13)|0;l=((I=I+Math.imul(G,GQ)|0)+(g>>>13)|0)+(EQ>>>26)|0,EQ&=67108863,U=Math.imul(k,T),g=(g=Math.imul(k,z))+Math.imul(p,T)|0,I=Math.imul(p,z),U=U+Math.imul(h,v)|0,g=(g=g+Math.imul(h,w)|0)+Math.imul(Y,v)|0,I=I+Math.imul(Y,w)|0,U=U+Math.imul(W,O)|0,g=(g=g+Math.imul(W,P)|0)+Math.imul(a,O)|0,I=I+Math.imul(a,P)|0,U=U+Math.imul(n,j)|0,g=(g=g+Math.imul(n,q)|0)+Math.imul(u,j)|0,I=I+Math.imul(u,q)|0,U=U+Math.imul(t,$)|0,g=(g=g+Math.imul(t,QQ)|0)+Math.imul(i,$)|0,I=I+Math.imul(i,QQ)|0,U=U+Math.imul(m,FQ)|0,g=(g=g+Math.imul(m,UQ)|0)+Math.imul(E,FQ)|0,I=I+Math.imul(E,UQ)|0,U=U+Math.imul(R,IQ)|0,g=(g=g+Math.imul(R,CQ)|0)+Math.imul(A,IQ)|0,I=I+Math.imul(A,CQ)|0,U=U+Math.imul(b,cQ)|0,g=(g=g+Math.imul(b,lQ)|0)+Math.imul(V,cQ)|0,I=I+Math.imul(V,lQ)|0,U=U+Math.imul(x,ZQ)|0,g=(g=g+Math.imul(x,GQ)|0)+Math.imul(y,ZQ)|0,I=I+Math.imul(y,GQ)|0;var JQ=(l+(U=U+Math.imul(Z,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(Z,yQ)|0)+Math.imul(G,xQ)|0))<<13)|0;l=((I=I+Math.imul(G,yQ)|0)+(g>>>13)|0)+(JQ>>>26)|0,JQ&=67108863,U=Math.imul(k,v),g=(g=Math.imul(k,w))+Math.imul(p,v)|0,I=Math.imul(p,w),U=U+Math.imul(h,O)|0,g=(g=g+Math.imul(h,P)|0)+Math.imul(Y,O)|0,I=I+Math.imul(Y,P)|0,U=U+Math.imul(W,j)|0,g=(g=g+Math.imul(W,q)|0)+Math.imul(a,j)|0,I=I+Math.imul(a,q)|0,U=U+Math.imul(n,$)|0,g=(g=g+Math.imul(n,QQ)|0)+Math.imul(u,$)|0,I=I+Math.imul(u,QQ)|0,U=U+Math.imul(t,FQ)|0,g=(g=g+Math.imul(t,UQ)|0)+Math.imul(i,FQ)|0,I=I+Math.imul(i,UQ)|0,U=U+Math.imul(m,IQ)|0,g=(g=g+Math.imul(m,CQ)|0)+Math.imul(E,IQ)|0,I=I+Math.imul(E,CQ)|0,U=U+Math.imul(R,cQ)|0,g=(g=g+Math.imul(R,lQ)|0)+Math.imul(A,cQ)|0,I=I+Math.imul(A,lQ)|0,U=U+Math.imul(b,ZQ)|0,g=(g=g+Math.imul(b,GQ)|0)+Math.imul(V,ZQ)|0,I=I+Math.imul(V,GQ)|0;var tQ=(l+(U=U+Math.imul(x,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(x,yQ)|0)+Math.imul(y,xQ)|0))<<13)|0;l=((I=I+Math.imul(y,yQ)|0)+(g>>>13)|0)+(tQ>>>26)|0,tQ&=67108863,U=Math.imul(k,O),g=(g=Math.imul(k,P))+Math.imul(p,O)|0,I=Math.imul(p,P),U=U+Math.imul(h,j)|0,g=(g=g+Math.imul(h,q)|0)+Math.imul(Y,j)|0,I=I+Math.imul(Y,q)|0,U=U+Math.imul(W,$)|0,g=(g=g+Math.imul(W,QQ)|0)+Math.imul(a,$)|0,I=I+Math.imul(a,QQ)|0,U=U+Math.imul(n,FQ)|0,g=(g=g+Math.imul(n,UQ)|0)+Math.imul(u,FQ)|0,I=I+Math.imul(u,UQ)|0,U=U+Math.imul(t,IQ)|0,g=(g=g+Math.imul(t,CQ)|0)+Math.imul(i,IQ)|0,I=I+Math.imul(i,CQ)|0,U=U+Math.imul(m,cQ)|0,g=(g=g+Math.imul(m,lQ)|0)+Math.imul(E,cQ)|0,I=I+Math.imul(E,lQ)|0,U=U+Math.imul(R,ZQ)|0,g=(g=g+Math.imul(R,GQ)|0)+Math.imul(A,ZQ)|0,I=I+Math.imul(A,GQ)|0;var iQ=(l+(U=U+Math.imul(b,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(b,yQ)|0)+Math.imul(V,xQ)|0))<<13)|0;l=((I=I+Math.imul(V,yQ)|0)+(g>>>13)|0)+(iQ>>>26)|0,iQ&=67108863,U=Math.imul(k,j),g=(g=Math.imul(k,q))+Math.imul(p,j)|0,I=Math.imul(p,q),U=U+Math.imul(h,$)|0,g=(g=g+Math.imul(h,QQ)|0)+Math.imul(Y,$)|0,I=I+Math.imul(Y,QQ)|0,U=U+Math.imul(W,FQ)|0,g=(g=g+Math.imul(W,UQ)|0)+Math.imul(a,FQ)|0,I=I+Math.imul(a,UQ)|0,U=U+Math.imul(n,IQ)|0,g=(g=g+Math.imul(n,CQ)|0)+Math.imul(u,IQ)|0,I=I+Math.imul(u,CQ)|0,U=U+Math.imul(t,cQ)|0,g=(g=g+Math.imul(t,lQ)|0)+Math.imul(i,cQ)|0,I=I+Math.imul(i,lQ)|0,U=U+Math.imul(m,ZQ)|0,g=(g=g+Math.imul(m,GQ)|0)+Math.imul(E,ZQ)|0,I=I+Math.imul(E,GQ)|0;var XQ=(l+(U=U+Math.imul(R,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(R,yQ)|0)+Math.imul(A,xQ)|0))<<13)|0;l=((I=I+Math.imul(A,yQ)|0)+(g>>>13)|0)+(XQ>>>26)|0,XQ&=67108863,U=Math.imul(k,$),g=(g=Math.imul(k,QQ))+Math.imul(p,$)|0,I=Math.imul(p,QQ),U=U+Math.imul(h,FQ)|0,g=(g=g+Math.imul(h,UQ)|0)+Math.imul(Y,FQ)|0,I=I+Math.imul(Y,UQ)|0,U=U+Math.imul(W,IQ)|0,g=(g=g+Math.imul(W,CQ)|0)+Math.imul(a,IQ)|0,I=I+Math.imul(a,CQ)|0,U=U+Math.imul(n,cQ)|0,g=(g=g+Math.imul(n,lQ)|0)+Math.imul(u,cQ)|0,I=I+Math.imul(u,lQ)|0,U=U+Math.imul(t,ZQ)|0,g=(g=g+Math.imul(t,GQ)|0)+Math.imul(i,ZQ)|0,I=I+Math.imul(i,GQ)|0;var nQ=(l+(U=U+Math.imul(m,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(m,yQ)|0)+Math.imul(E,xQ)|0))<<13)|0;l=((I=I+Math.imul(E,yQ)|0)+(g>>>13)|0)+(nQ>>>26)|0,nQ&=67108863,U=Math.imul(k,FQ),g=(g=Math.imul(k,UQ))+Math.imul(p,FQ)|0,I=Math.imul(p,UQ),U=U+Math.imul(h,IQ)|0,g=(g=g+Math.imul(h,CQ)|0)+Math.imul(Y,IQ)|0,I=I+Math.imul(Y,CQ)|0,U=U+Math.imul(W,cQ)|0,g=(g=g+Math.imul(W,lQ)|0)+Math.imul(a,cQ)|0,I=I+Math.imul(a,lQ)|0,U=U+Math.imul(n,ZQ)|0,g=(g=g+Math.imul(n,GQ)|0)+Math.imul(u,ZQ)|0,I=I+Math.imul(u,GQ)|0;var uQ=(l+(U=U+Math.imul(t,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(t,yQ)|0)+Math.imul(i,xQ)|0))<<13)|0;l=((I=I+Math.imul(i,yQ)|0)+(g>>>13)|0)+(uQ>>>26)|0,uQ&=67108863,U=Math.imul(k,IQ),g=(g=Math.imul(k,CQ))+Math.imul(p,IQ)|0,I=Math.imul(p,CQ),U=U+Math.imul(h,cQ)|0,g=(g=g+Math.imul(h,lQ)|0)+Math.imul(Y,cQ)|0,I=I+Math.imul(Y,lQ)|0,U=U+Math.imul(W,ZQ)|0,g=(g=g+Math.imul(W,GQ)|0)+Math.imul(a,ZQ)|0,I=I+Math.imul(a,GQ)|0;var HQ=(l+(U=U+Math.imul(n,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(n,yQ)|0)+Math.imul(u,xQ)|0))<<13)|0;l=((I=I+Math.imul(u,yQ)|0)+(g>>>13)|0)+(HQ>>>26)|0,HQ&=67108863,U=Math.imul(k,cQ),g=(g=Math.imul(k,lQ))+Math.imul(p,cQ)|0,I=Math.imul(p,lQ),U=U+Math.imul(h,ZQ)|0,g=(g=g+Math.imul(h,GQ)|0)+Math.imul(Y,ZQ)|0,I=I+Math.imul(Y,GQ)|0;var WQ=(l+(U=U+Math.imul(W,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(W,yQ)|0)+Math.imul(a,xQ)|0))<<13)|0;l=((I=I+Math.imul(a,yQ)|0)+(g>>>13)|0)+(WQ>>>26)|0,WQ&=67108863,U=Math.imul(k,ZQ),g=(g=Math.imul(k,GQ))+Math.imul(p,ZQ)|0,I=Math.imul(p,GQ);var aQ=(l+(U=U+Math.imul(h,xQ)|0)|0)+((8191&(g=(g=g+Math.imul(h,yQ)|0)+Math.imul(Y,xQ)|0))<<13)|0;l=((I=I+Math.imul(Y,yQ)|0)+(g>>>13)|0)+(aQ>>>26)|0,aQ&=67108863;var oQ=(l+(U=Math.imul(k,xQ))|0)+((8191&(g=(g=Math.imul(k,yQ))+Math.imul(p,xQ)|0))<<13)|0;return l=((I=Math.imul(p,yQ))+(g>>>13)|0)+(oQ>>>26)|0,oQ&=67108863,c[0]=dQ,c[1]=bQ,c[2]=VQ,c[3]=NQ,c[4]=RQ,c[5]=AQ,c[6]=DQ,c[7]=mQ,c[8]=EQ,c[9]=JQ,c[10]=tQ,c[11]=iQ,c[12]=XQ,c[13]=nQ,c[14]=uQ,c[15]=HQ,c[16]=WQ,c[17]=aQ,c[18]=oQ,0!==l&&(c[19]=l,F.length++),F};function x(Q,B,F){return(new y).mulp(Q,B,F)}function y(Q,B){this.x=Q,this.y=B}Math.imul||(L=G),g.prototype.mulTo=function(Q,B){var F,U=this.length+Q.length;return F=10===this.length&&10===Q.length?L(this,Q,B):U<63?G(this,Q,B):U<1024?function(Q,B,F){F.negative=B.negative^Q.negative,F.length=Q.length+B.length;for(var U=0,g=0,I=0;I<F.length-1;I++){var C=g;g=0;for(var s=67108863&U,c=Math.min(I,B.length-1),l=Math.max(0,I-Q.length+1);l<=c;l++){var S=I-l,Z=(0|Q.words[S])*(0|B.words[l]),G=67108863&Z;s=67108863&(G=G+s|0),g+=(C=(C=C+(Z/67108864|0)|0)+(G>>>26)|0)>>>26,C&=67108863}F.words[I]=s,U=C,C=g}return 0!==U?F.words[I]=U:F.length--,F.strip()}(this,Q,B):x(this,Q,B),F},y.prototype.makeRBT=function(Q){for(var B=new Array(Q),F=g.prototype._countBits(Q)-1,U=0;U<Q;U++)B[U]=this.revBin(U,F,Q);return B},y.prototype.revBin=function(Q,B,F){if(0===Q||Q===F-1)return Q;for(var U=0,g=0;g<B;g++)U|=(1&Q)<<B-g-1,Q>>=1;return U},y.prototype.permute=function(Q,B,F,U,g,I){for(var C=0;C<I;C++)U[C]=B[Q[C]],g[C]=F[Q[C]]},y.prototype.transform=function(Q,B,F,U,g,I){this.permute(I,Q,B,F,U,g);for(var C=1;C<g;C<<=1)for(var s=C<<1,c=Math.cos(2*Math.PI/s),l=Math.sin(2*Math.PI/s),S=0;S<g;S+=s)for(var Z=c,G=l,L=0;L<C;L++){var x=F[S+L],y=U[S+L],d=F[S+L+C],b=U[S+L+C],V=Z*d-G*b;b=Z*b+G*d,d=V,F[S+L]=x+d,U[S+L]=y+b,F[S+L+C]=x-d,U[S+L+C]=y-b,L!==s&&(V=c*Z-l*G,G=c*G+l*Z,Z=V)}},y.prototype.guessLen13b=function(Q,B){var F=1|Math.max(B,Q),U=1&F,g=0;for(F=F/2|0;F;F>>>=1)g++;return 1<<g+1+U},y.prototype.conjugate=function(Q,B,F){if(!(F<=1))for(var U=0;U<F/2;U++){var g=Q[U];Q[U]=Q[F-U-1],Q[F-U-1]=g,g=B[U],B[U]=-B[F-U-1],B[F-U-1]=-g}},y.prototype.normalize13b=function(Q,B){for(var F=0,U=0;U<B/2;U++){var g=8192*Math.round(Q[2*U+1]/B)+Math.round(Q[2*U]/B)+F;Q[U]=67108863&g,F=g<67108864?0:g/67108864|0}return Q},y.prototype.convert13b=function(Q,B,U,g){for(var I=0,C=0;C<B;C++)I+=0|Q[C],U[2*C]=8191&I,I>>>=13,U[2*C+1]=8191&I,I>>>=13;for(C=2*B;C<g;++C)U[C]=0;F(0===I),F(0==(-8192&I))},y.prototype.stub=function(Q){for(var B=new Array(Q),F=0;F<Q;F++)B[F]=0;return B},y.prototype.mulp=function(Q,B,F){var U=2*this.guessLen13b(Q.length,B.length),g=this.makeRBT(U),I=this.stub(U),C=new Array(U),s=new Array(U),c=new Array(U),l=new Array(U),S=new Array(U),Z=new Array(U),G=F.words;G.length=U,this.convert13b(Q.words,Q.length,C,U),this.convert13b(B.words,B.length,l,U),this.transform(C,I,s,c,U,g),this.transform(l,I,S,Z,U,g);for(var L=0;L<U;L++){var x=s[L]*S[L]-c[L]*Z[L];c[L]=s[L]*Z[L]+c[L]*S[L],s[L]=x}return this.conjugate(s,c,U),this.transform(s,c,G,I,U,g),this.conjugate(G,I,U),this.normalize13b(G,U),F.negative=Q.negative^B.negative,F.length=Q.length+B.length,F.strip()},g.prototype.mul=function(Q){var B=new g(null);return B.words=new Array(this.length+Q.length),this.mulTo(Q,B)},g.prototype.mulf=function(Q){var B=new g(null);return B.words=new Array(this.length+Q.length),x(this,Q,B)},g.prototype.imul=function(Q){return this.clone().mulTo(Q,this)},g.prototype.imuln=function(Q){F("number"==typeof Q),F(Q<67108864);for(var B=0,U=0;U<this.length;U++){var g=(0|this.words[U])*Q,I=(67108863&g)+(67108863&B);B>>=26,B+=g/67108864|0,B+=I>>>26,this.words[U]=67108863&I}return 0!==B&&(this.words[U]=B,this.length++),this},g.prototype.muln=function(Q){return this.clone().imuln(Q)},g.prototype.sqr=function(){return this.mul(this)},g.prototype.isqr=function(){return this.imul(this.clone())},g.prototype.pow=function(Q){var B=function(Q){for(var B=new Array(Q.bitLength()),F=0;F<B.length;F++){var U=F/26|0,g=F%26;B[F]=(Q.words[U]&1<<g)>>>g}return B}(Q);if(0===B.length)return new g(1);for(var F=this,U=0;U<B.length&&0===B[U];U++,F=F.sqr());if(++U<B.length)for(var I=F.sqr();U<B.length;U++,I=I.sqr())0!==B[U]&&(F=F.mul(I));return F},g.prototype.iushln=function(Q){F("number"==typeof Q&&Q>=0);var B,U=Q%26,g=(Q-U)/26,I=67108863>>>26-U<<26-U;if(0!==U){var C=0;for(B=0;B<this.length;B++){var s=this.words[B]&I,c=(0|this.words[B])-s<<U;this.words[B]=c|C,C=s>>>26-U}C&&(this.words[B]=C,this.length++)}if(0!==g){for(B=this.length-1;B>=0;B--)this.words[B+g]=this.words[B];for(B=0;B<g;B++)this.words[B]=0;this.length+=g}return this.strip()},g.prototype.ishln=function(Q){return F(0===this.negative),this.iushln(Q)},g.prototype.iushrn=function(Q,B,U){var g;F("number"==typeof Q&&Q>=0),g=B?(B-B%26)/26:0;var I=Q%26,C=Math.min((Q-I)/26,this.length),s=67108863^67108863>>>I<<I,c=U;if(g-=C,g=Math.max(0,g),c){for(var l=0;l<C;l++)c.words[l]=this.words[l];c.length=C}if(0===C);else if(this.length>C)for(this.length-=C,l=0;l<this.length;l++)this.words[l]=this.words[l+C];else this.words[0]=0,this.length=1;var S=0;for(l=this.length-1;l>=0&&(0!==S||l>=g);l--){var Z=0|this.words[l];this.words[l]=S<<26-I|Z>>>I,S=Z&s}return c&&0!==S&&(c.words[c.length++]=S),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},g.prototype.ishrn=function(Q,B,U){return F(0===this.negative),this.iushrn(Q,B,U)},g.prototype.shln=function(Q){return this.clone().ishln(Q)},g.prototype.ushln=function(Q){return this.clone().iushln(Q)},g.prototype.shrn=function(Q){return this.clone().ishrn(Q)},g.prototype.ushrn=function(Q){return this.clone().iushrn(Q)},g.prototype.testn=function(Q){F("number"==typeof Q&&Q>=0);var B=Q%26,U=(Q-B)/26,g=1<<B;return!(this.length<=U||!(this.words[U]&g))},g.prototype.imaskn=function(Q){F("number"==typeof Q&&Q>=0);var B=Q%26,U=(Q-B)/26;if(F(0===this.negative,"imaskn works only with positive numbers"),this.length<=U)return this;if(0!==B&&U++,this.length=Math.min(U,this.length),0!==B){var g=67108863^67108863>>>B<<B;this.words[this.length-1]&=g}return this.strip()},g.prototype.maskn=function(Q){return this.clone().imaskn(Q)},g.prototype.iaddn=function(Q){return F("number"==typeof Q),F(Q<67108864),Q<0?this.isubn(-Q):0!==this.negative?1===this.length&&(0|this.words[0])<Q?(this.words[0]=Q-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(Q),this.negative=1,this):this._iaddn(Q)},g.prototype._iaddn=function(Q){this.words[0]+=Q;for(var B=0;B<this.length&&this.words[B]>=67108864;B++)this.words[B]-=67108864,B===this.length-1?this.words[B+1]=1:this.words[B+1]++;return this.length=Math.max(this.length,B+1),this},g.prototype.isubn=function(Q){if(F("number"==typeof Q),F(Q<67108864),Q<0)return this.iaddn(-Q);if(0!==this.negative)return this.negative=0,this.iaddn(Q),this.negative=1,this;if(this.words[0]-=Q,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var B=0;B<this.length&&this.words[B]<0;B++)this.words[B]+=67108864,this.words[B+1]-=1;return this.strip()},g.prototype.addn=function(Q){return this.clone().iaddn(Q)},g.prototype.subn=function(Q){return this.clone().isubn(Q)},g.prototype.iabs=function(){return this.negative=0,this},g.prototype.abs=function(){return this.clone().iabs()},g.prototype._ishlnsubmul=function(Q,B,U){var g,I,C=Q.length+U;this._expand(C);var s=0;for(g=0;g<Q.length;g++){I=(0|this.words[g+U])+s;var c=(0|Q.words[g])*B;s=((I-=67108863&c)>>26)-(c/67108864|0),this.words[g+U]=67108863&I}for(;g<this.length-U;g++)s=(I=(0|this.words[g+U])+s)>>26,this.words[g+U]=67108863&I;if(0===s)return this.strip();for(F(-1===s),s=0,g=0;g<this.length;g++)s=(I=-(0|this.words[g])+s)>>26,this.words[g]=67108863&I;return this.negative=1,this.strip()},g.prototype._wordDiv=function(Q,B){var F=(this.length,Q.length),U=this.clone(),I=Q,C=0|I.words[I.length-1];0!=(F=26-this._countBits(C))&&(I=I.ushln(F),U.iushln(F),C=0|I.words[I.length-1]);var s,c=U.length-I.length;if("mod"!==B){(s=new g(null)).length=c+1,s.words=new Array(s.length);for(var l=0;l<s.length;l++)s.words[l]=0}var S=U.clone()._ishlnsubmul(I,1,c);0===S.negative&&(U=S,s&&(s.words[c]=1));for(var Z=c-1;Z>=0;Z--){var G=67108864*(0|U.words[I.length+Z])+(0|U.words[I.length+Z-1]);for(G=Math.min(G/C|0,67108863),U._ishlnsubmul(I,G,Z);0!==U.negative;)G--,U.negative=0,U._ishlnsubmul(I,1,Z),U.isZero()||(U.negative^=1);s&&(s.words[Z]=G)}return s&&s.strip(),U.strip(),"div"!==B&&0!==F&&U.iushrn(F),{div:s||null,mod:U}},g.prototype.divmod=function(Q,B,U){return F(!Q.isZero()),this.isZero()?{div:new g(0),mod:new g(0)}:0!==this.negative&&0===Q.negative?(s=this.neg().divmod(Q,B),"mod"!==B&&(I=s.div.neg()),"div"!==B&&(C=s.mod.neg(),U&&0!==C.negative&&C.iadd(Q)),{div:I,mod:C}):0===this.negative&&0!==Q.negative?(s=this.divmod(Q.neg(),B),"mod"!==B&&(I=s.div.neg()),{div:I,mod:s.mod}):0!=(this.negative&Q.negative)?(s=this.neg().divmod(Q.neg(),B),"div"!==B&&(C=s.mod.neg(),U&&0!==C.negative&&C.isub(Q)),{div:s.div,mod:C}):Q.length>this.length||this.cmp(Q)<0?{div:new g(0),mod:this}:1===Q.length?"div"===B?{div:this.divn(Q.words[0]),mod:null}:"mod"===B?{div:null,mod:new g(this.modn(Q.words[0]))}:{div:this.divn(Q.words[0]),mod:new g(this.modn(Q.words[0]))}:this._wordDiv(Q,B);var I,C,s},g.prototype.div=function(Q){return this.divmod(Q,"div",!1).div},g.prototype.mod=function(Q){return this.divmod(Q,"mod",!1).mod},g.prototype.umod=function(Q){return this.divmod(Q,"mod",!0).mod},g.prototype.divRound=function(Q){var B=this.divmod(Q);if(B.mod.isZero())return B.div;var F=0!==B.div.negative?B.mod.isub(Q):B.mod,U=Q.ushrn(1),g=Q.andln(1),I=F.cmp(U);return I<0||1===g&&0===I?B.div:0!==B.div.negative?B.div.isubn(1):B.div.iaddn(1)},g.prototype.modn=function(Q){F(Q<=67108863);for(var B=(1<<26)%Q,U=0,g=this.length-1;g>=0;g--)U=(B*U+(0|this.words[g]))%Q;return U},g.prototype.idivn=function(Q){F(Q<=67108863);for(var B=0,U=this.length-1;U>=0;U--){var g=(0|this.words[U])+67108864*B;this.words[U]=g/Q|0,B=g%Q}return this.strip()},g.prototype.divn=function(Q){return this.clone().idivn(Q)},g.prototype.egcd=function(Q){F(0===Q.negative),F(!Q.isZero());var B=this,U=Q.clone();B=0!==B.negative?B.umod(Q):B.clone();for(var I=new g(1),C=new g(0),s=new g(0),c=new g(1),l=0;B.isEven()&&U.isEven();)B.iushrn(1),U.iushrn(1),++l;for(var S=U.clone(),Z=B.clone();!B.isZero();){for(var G=0,L=1;0==(B.words[0]&L)&&G<26;++G,L<<=1);if(G>0)for(B.iushrn(G);G-- >0;)(I.isOdd()||C.isOdd())&&(I.iadd(S),C.isub(Z)),I.iushrn(1),C.iushrn(1);for(var x=0,y=1;0==(U.words[0]&y)&&x<26;++x,y<<=1);if(x>0)for(U.iushrn(x);x-- >0;)(s.isOdd()||c.isOdd())&&(s.iadd(S),c.isub(Z)),s.iushrn(1),c.iushrn(1);B.cmp(U)>=0?(B.isub(U),I.isub(s),C.isub(c)):(U.isub(B),s.isub(I),c.isub(C))}return{a:s,b:c,gcd:U.iushln(l)}},g.prototype._invmp=function(Q){F(0===Q.negative),F(!Q.isZero());var B=this,U=Q.clone();B=0!==B.negative?B.umod(Q):B.clone();for(var I,C=new g(1),s=new g(0),c=U.clone();B.cmpn(1)>0&&U.cmpn(1)>0;){for(var l=0,S=1;0==(B.words[0]&S)&&l<26;++l,S<<=1);if(l>0)for(B.iushrn(l);l-- >0;)C.isOdd()&&C.iadd(c),C.iushrn(1);for(var Z=0,G=1;0==(U.words[0]&G)&&Z<26;++Z,G<<=1);if(Z>0)for(U.iushrn(Z);Z-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);B.cmp(U)>=0?(B.isub(U),C.isub(s)):(U.isub(B),s.isub(C))}return(I=0===B.cmpn(1)?C:s).cmpn(0)<0&&I.iadd(Q),I},g.prototype.gcd=function(Q){if(this.isZero())return Q.abs();if(Q.isZero())return this.abs();var B=this.clone(),F=Q.clone();B.negative=0,F.negative=0;for(var U=0;B.isEven()&&F.isEven();U++)B.iushrn(1),F.iushrn(1);for(;;){for(;B.isEven();)B.iushrn(1);for(;F.isEven();)F.iushrn(1);var g=B.cmp(F);if(g<0){var I=B;B=F,F=I}else if(0===g||0===F.cmpn(1))break;B.isub(F)}return F.iushln(U)},g.prototype.invm=function(Q){return this.egcd(Q).a.umod(Q)},g.prototype.isEven=function(){return 0==(1&this.words[0])},g.prototype.isOdd=function(){return 1==(1&this.words[0])},g.prototype.andln=function(Q){return this.words[0]&Q},g.prototype.bincn=function(Q){F("number"==typeof Q);var B=Q%26,U=(Q-B)/26,g=1<<B;if(this.length<=U)return this._expand(U+1),this.words[U]|=g,this;for(var I=g,C=U;0!==I&&C<this.length;C++){var s=0|this.words[C];I=(s+=I)>>>26,s&=67108863,this.words[C]=s}return 0!==I&&(this.words[C]=I,this.length++),this},g.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},g.prototype.cmpn=function(Q){var B,U=Q<0;if(0!==this.negative&&!U)return-1;if(0===this.negative&&U)return 1;if(this.strip(),this.length>1)B=1;else{U&&(Q=-Q),F(Q<=67108863,"Number is too big");var g=0|this.words[0];B=g===Q?0:g<Q?-1:1}return 0!==this.negative?0|-B:B},g.prototype.cmp=function(Q){if(0!==this.negative&&0===Q.negative)return-1;if(0===this.negative&&0!==Q.negative)return 1;var B=this.ucmp(Q);return 0!==this.negative?0|-B:B},g.prototype.ucmp=function(Q){if(this.length>Q.length)return 1;if(this.length<Q.length)return-1;for(var B=0,F=this.length-1;F>=0;F--){var U=0|this.words[F],g=0|Q.words[F];if(U!==g){U<g?B=-1:U>g&&(B=1);break}}return B},g.prototype.gtn=function(Q){return 1===this.cmpn(Q)},g.prototype.gt=function(Q){return 1===this.cmp(Q)},g.prototype.gten=function(Q){return this.cmpn(Q)>=0},g.prototype.gte=function(Q){return this.cmp(Q)>=0},g.prototype.ltn=function(Q){return-1===this.cmpn(Q)},g.prototype.lt=function(Q){return-1===this.cmp(Q)},g.prototype.lten=function(Q){return this.cmpn(Q)<=0},g.prototype.lte=function(Q){return this.cmp(Q)<=0},g.prototype.eqn=function(Q){return 0===this.cmpn(Q)},g.prototype.eq=function(Q){return 0===this.cmp(Q)},g.red=function(Q){return new D(Q)},g.prototype.toRed=function(Q){return F(!this.red,"Already a number in reduction context"),F(0===this.negative,"red works only with positives"),Q.convertTo(this)._forceRed(Q)},g.prototype.fromRed=function(){return F(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},g.prototype._forceRed=function(Q){return this.red=Q,this},g.prototype.forceRed=function(Q){return F(!this.red,"Already a number in reduction context"),this._forceRed(Q)},g.prototype.redAdd=function(Q){return F(this.red,"redAdd works only with red numbers"),this.red.add(this,Q)},g.prototype.redIAdd=function(Q){return F(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,Q)},g.prototype.redSub=function(Q){return F(this.red,"redSub works only with red numbers"),this.red.sub(this,Q)},g.prototype.redISub=function(Q){return F(this.red,"redISub works only with red numbers"),this.red.isub(this,Q)},g.prototype.redShl=function(Q){return F(this.red,"redShl works only with red numbers"),this.red.shl(this,Q)},g.prototype.redMul=function(Q){return F(this.red,"redMul works only with red numbers"),this.red._verify2(this,Q),this.red.mul(this,Q)},g.prototype.redIMul=function(Q){return F(this.red,"redMul works only with red numbers"),this.red._verify2(this,Q),this.red.imul(this,Q)},g.prototype.redSqr=function(){return F(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},g.prototype.redISqr=function(){return F(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},g.prototype.redSqrt=function(){return F(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},g.prototype.redInvm=function(){return F(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},g.prototype.redNeg=function(){return F(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},g.prototype.redPow=function(Q){return F(this.red&&!Q.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,Q)};var d={k256:null,p224:null,p192:null,p25519:null};function b(Q,B){this.name=Q,this.p=new g(B,16),this.n=this.p.bitLength(),this.k=new g(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function V(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function N(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function R(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function A(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function D(Q){if("string"==typeof Q){var B=g._prime(Q);this.m=B.p,this.prime=B}else F(Q.gtn(1),"modulus must be greater than 1"),this.m=Q,this.prime=null}function m(Q){D.call(this,Q),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new g(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var Q=new g(null);return Q.words=new Array(Math.ceil(this.n/13)),Q},b.prototype.ireduce=function(Q){var B,F=Q;do{this.split(F,this.tmp),B=(F=(F=this.imulK(F)).iadd(this.tmp)).bitLength()}while(B>this.n);var U=B<this.n?-1:F.ucmp(this.p);return 0===U?(F.words[0]=0,F.length=1):U>0?F.isub(this.p):void 0!==F.strip?F.strip():F._strip(),F},b.prototype.split=function(Q,B){Q.iushrn(this.n,0,B)},b.prototype.imulK=function(Q){return Q.imul(this.k)},U(V,b),V.prototype.split=function(Q,B){for(var F=4194303,U=Math.min(Q.length,9),g=0;g<U;g++)B.words[g]=Q.words[g];if(B.length=U,Q.length<=9)return Q.words[0]=0,void(Q.length=1);var I=Q.words[9];for(B.words[B.length++]=I&F,g=10;g<Q.length;g++){var C=0|Q.words[g];Q.words[g-10]=(C&F)<<4|I>>>22,I=C}I>>>=22,Q.words[g-10]=I,0===I&&Q.length>10?Q.length-=10:Q.length-=9},V.prototype.imulK=function(Q){Q.words[Q.length]=0,Q.words[Q.length+1]=0,Q.length+=2;for(var B=0,F=0;F<Q.length;F++){var U=0|Q.words[F];B+=977*U,Q.words[F]=67108863&B,B=64*U+(B/67108864|0)}return 0===Q.words[Q.length-1]&&(Q.length--,0===Q.words[Q.length-1]&&Q.length--),Q},U(N,b),U(R,b),U(A,b),A.prototype.imulK=function(Q){for(var B=0,F=0;F<Q.length;F++){var U=19*(0|Q.words[F])+B,g=67108863&U;U>>>=26,Q.words[F]=g,B=U}return 0!==B&&(Q.words[Q.length++]=B),Q},g._prime=function(Q){if(d[Q])return d[Q];var B;if("k256"===Q)B=new V;else if("p224"===Q)B=new N;else if("p192"===Q)B=new R;else{if("p25519"!==Q)throw new Error("Unknown prime "+Q);B=new A}return d[Q]=B,B},D.prototype._verify1=function(Q){F(0===Q.negative,"red works only with positives"),F(Q.red,"red works only with red numbers")},D.prototype._verify2=function(Q,B){F(0==(Q.negative|B.negative),"red works only with positives"),F(Q.red&&Q.red===B.red,"red works only with red numbers")},D.prototype.imod=function(Q){return this.prime?this.prime.ireduce(Q)._forceRed(this):Q.umod(this.m)._forceRed(this)},D.prototype.neg=function(Q){return Q.isZero()?Q.clone():this.m.sub(Q)._forceRed(this)},D.prototype.add=function(Q,B){this._verify2(Q,B);var F=Q.add(B);return F.cmp(this.m)>=0&&F.isub(this.m),F._forceRed(this)},D.prototype.iadd=function(Q,B){this._verify2(Q,B);var F=Q.iadd(B);return F.cmp(this.m)>=0&&F.isub(this.m),F},D.prototype.sub=function(Q,B){this._verify2(Q,B);var F=Q.sub(B);return F.cmpn(0)<0&&F.iadd(this.m),F._forceRed(this)},D.prototype.isub=function(Q,B){this._verify2(Q,B);var F=Q.isub(B);return F.cmpn(0)<0&&F.iadd(this.m),F},D.prototype.shl=function(Q,B){return this._verify1(Q),this.imod(Q.ushln(B))},D.prototype.imul=function(Q,B){return this._verify2(Q,B),this.imod(Q.imul(B))},D.prototype.mul=function(Q,B){return this._verify2(Q,B),this.imod(Q.mul(B))},D.prototype.isqr=function(Q){return this.imul(Q,Q.clone())},D.prototype.sqr=function(Q){return this.mul(Q,Q)},D.prototype.sqrt=function(Q){if(Q.isZero())return Q.clone();var B=this.m.andln(3);if(F(B%2==1),3===B){var U=this.m.add(new g(1)).iushrn(2);return this.pow(Q,U)}for(var I=this.m.subn(1),C=0;!I.isZero()&&0===I.andln(1);)C++,I.iushrn(1);F(!I.isZero());var s=new g(1).toRed(this),c=s.redNeg(),l=this.m.subn(1).iushrn(1),S=this.m.bitLength();for(S=new g(2*S*S).toRed(this);0!==this.pow(S,l).cmp(c);)S.redIAdd(c);for(var Z=this.pow(S,I),G=this.pow(Q,I.addn(1).iushrn(1)),L=this.pow(Q,I),x=C;0!==L.cmp(s);){for(var y=L,d=0;0!==y.cmp(s);d++)y=y.redSqr();F(d<x);var b=this.pow(Z,new g(1).iushln(x-d-1));G=G.redMul(b),Z=b.redSqr(),L=L.redMul(Z),x=d}return G},D.prototype.invm=function(Q){var B=Q._invmp(this.m);return 0!==B.negative?(B.negative=0,this.imod(B).redNeg()):this.imod(B)},D.prototype.pow=function(Q,B){if(B.isZero())return new g(1).toRed(this);if(0===B.cmpn(1))return Q.clone();var F=new Array(16);F[0]=new g(1).toRed(this),F[1]=Q;for(var U=2;U<F.length;U++)F[U]=this.mul(F[U-1],Q);var I=F[0],C=0,s=0,c=B.bitLength()%26;for(0===c&&(c=26),U=B.length-1;U>=0;U--){for(var l=B.words[U],S=c-1;S>=0;S--){var Z=l>>S&1;I!==F[0]&&(I=this.sqr(I)),0!==Z||0!==C?(C<<=1,C|=Z,(4==++s||0===U&&0===S)&&(I=this.mul(I,F[C]),s=0,C=0)):s=0}c=26}return I},D.prototype.convertTo=function(Q){var B=Q.umod(this.m);return B===Q?B.clone():B},D.prototype.convertFrom=function(Q){var B=Q.clone();return B.red=null,B},g.mont=function(Q){return new m(Q)},U(m,D),m.prototype.convertTo=function(Q){return this.imod(Q.ushln(this.shift))},m.prototype.convertFrom=function(Q){var B=this.imod(Q.mul(this.rinv));return B.red=null,B},m.prototype.imul=function(Q,B){if(Q.isZero()||B.isZero())return Q.words[0]=0,Q.length=1,Q;var F=Q.imul(B),U=F.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),g=F.isub(U).iushrn(this.shift),I=g;return g.cmp(this.m)>=0?I=g.isub(this.m):g.cmpn(0)<0&&(I=g.iadd(this.m)),I._forceRed(this)},m.prototype.mul=function(Q,B){if(Q.isZero()||B.isZero())return new g(0)._forceRed(this);var F=Q.mul(B),U=F.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),I=F.isub(U).iushrn(this.shift),C=I;return I.cmp(this.m)>=0?C=I.isub(this.m):I.cmpn(0)<0&&(C=I.iadd(this.m)),C._forceRed(this)},m.prototype.invm=function(Q){return this.imod(Q._invmp(this.m).mul(this.r2))._forceRed(this)}}(dQ,q);var bQ=dQ.exports;let VQ=!1,NQ=!1;const RQ={debug:1,default:2,info:2,warning:3,error:4,off:5};let AQ=RQ.default,DQ=null;const mQ=function(){try{const Q=[];if(["NFD","NFC","NFKD","NFKC"].forEach((B=>{try{if("test"!=="test".normalize(B))throw new Error("bad normalize")}catch(F){Q.push(B)}})),Q.length)throw new Error("missing "+Q.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(Q){return Q.message}return null}();var EQ,JQ;!function(Q){Q.DEBUG="DEBUG",Q.INFO="INFO",Q.WARNING="WARNING",Q.ERROR="ERROR",Q.OFF="OFF"}(EQ||(EQ={})),function(Q){Q.UNKNOWN_ERROR="UNKNOWN_ERROR",Q.NOT_IMPLEMENTED="NOT_IMPLEMENTED",Q.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",Q.NETWORK_ERROR="NETWORK_ERROR",Q.SERVER_ERROR="SERVER_ERROR",Q.TIMEOUT="TIMEOUT",Q.BUFFER_OVERRUN="BUFFER_OVERRUN",Q.NUMERIC_FAULT="NUMERIC_FAULT",Q.MISSING_NEW="MISSING_NEW",Q.INVALID_ARGUMENT="INVALID_ARGUMENT",Q.MISSING_ARGUMENT="MISSING_ARGUMENT",Q.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",Q.CALL_EXCEPTION="CALL_EXCEPTION",Q.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",Q.NONCE_EXPIRED="NONCE_EXPIRED",Q.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",Q.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",Q.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(JQ||(JQ={}));const tQ="0123456789abcdef";class iQ{constructor(Q){Object.defineProperty(this,"version",{enumerable:!0,value:Q,writable:!1})}_log(Q,B){const F=Q.toLowerCase();null==RQ[F]&&this.throwArgumentError("invalid log level name","logLevel",Q),AQ>RQ[F]||console.log.apply(console,B)}debug(...Q){this._log(iQ.levels.DEBUG,Q)}info(...Q){this._log(iQ.levels.INFO,Q)}warn(...Q){this._log(iQ.levels.WARNING,Q)}makeError(Q,B,F){if(NQ)return this.makeError("censored error",B,{});B||(B=iQ.errors.UNKNOWN_ERROR),F||(F={});const U=[];Object.keys(F).forEach((Q=>{const B=F[Q];try{if(B instanceof Uint8Array){let F="";for(let Q=0;Q<B.length;Q++)F+=tQ[B[Q]>>4],F+=tQ[15&B[Q]];U.push(Q+"=Uint8Array(0x"+F+")")}else U.push(Q+"="+JSON.stringify(B))}catch(B){U.push(Q+"="+JSON.stringify(F[Q].toString()))}})),U.push(`code=${B}`),U.push(`version=${this.version}`);const g=Q;let I="";switch(B){case JQ.NUMERIC_FAULT:{I="NUMERIC_FAULT";const B=Q;switch(B){case"overflow":case"underflow":case"division-by-zero":I+="-"+B;break;case"negative-power":case"negative-width":I+="-unsupported";break;case"unbound-bitwise-result":I+="-unbound-result"}break}case JQ.CALL_EXCEPTION:case JQ.INSUFFICIENT_FUNDS:case JQ.MISSING_NEW:case JQ.NONCE_EXPIRED:case JQ.REPLACEMENT_UNDERPRICED:case JQ.TRANSACTION_REPLACED:case JQ.UNPREDICTABLE_GAS_LIMIT:I=B}I&&(Q+=" [ See: https://links.ethers.org/v5-errors-"+I+" ]"),U.length&&(Q+=" ("+U.join(", ")+")");const C=new Error(Q);return C.reason=g,C.code=B,Object.keys(F).forEach((function(Q){C[Q]=F[Q]})),C}throwError(Q,B,F){throw this.makeError(Q,B,F)}throwArgumentError(Q,B,F){return this.throwError(Q,iQ.errors.INVALID_ARGUMENT,{argument:B,value:F})}assert(Q,B,F,U){Q||this.throwError(B,F,U)}assertArgument(Q,B,F,U){Q||this.throwArgumentError(B,F,U)}checkNormalize(Q){mQ&&this.throwError("platform missing String.prototype.normalize",iQ.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:mQ})}checkSafeUint53(Q,B){"number"==typeof Q&&(null==B&&(B="value not safe"),(Q<0||Q>=9007199254740991)&&this.throwError(B,iQ.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:Q}),Q%1&&this.throwError(B,iQ.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:Q}))}checkArgumentCount(Q,B,F){F=F?": "+F:"",Q<B&&this.throwError("missing argument"+F,iQ.errors.MISSING_ARGUMENT,{count:Q,expectedCount:B}),Q>B&&this.throwError("too many arguments"+F,iQ.errors.UNEXPECTED_ARGUMENT,{count:Q,expectedCount:B})}checkNew(Q,B){Q!==Object&&null!=Q||this.throwError("missing new",iQ.errors.MISSING_NEW,{name:B.name})}checkAbstract(Q,B){Q===B?this.throwError("cannot instantiate abstract class "+JSON.stringify(B.name)+" directly; use a sub-class",iQ.errors.UNSUPPORTED_OPERATION,{name:Q.name,operation:"new"}):Q!==Object&&null!=Q||this.throwError("missing new",iQ.errors.MISSING_NEW,{name:B.name})}static globalLogger(){return DQ||(DQ=new iQ("logger/5.6.0")),DQ}static setCensorship(Q,B){if(!Q&&B&&this.globalLogger().throwError("cannot permanently disable censorship",iQ.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),VQ){if(!Q)return;this.globalLogger().throwError("error censorship permanent",iQ.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}NQ=!!Q,VQ=!!B}static setLogLevel(Q){const B=RQ[Q.toLowerCase()];null!=B?AQ=B:iQ.globalLogger().warn("invalid log level - "+Q)}static from(Q){return new iQ(Q)}}iQ.errors=JQ,iQ.levels=EQ;const XQ=new iQ("bytes/5.6.1");function nQ(Q){return!!Q.toHexString}function uQ(Q){return Q.slice||(Q.slice=function(){const B=Array.prototype.slice.call(arguments);return uQ(new Uint8Array(Array.prototype.slice.apply(Q,B)))}),Q}function HQ(Q){return"number"==typeof Q&&Q==Q&&Q%1==0}function WQ(Q){if(null==Q)return!1;if(Q.constructor===Uint8Array)return!0;if("string"==typeof Q)return!1;if(!HQ(Q.length)||Q.length<0)return!1;for(let B=0;B<Q.length;B++){const F=Q[B];if(!HQ(F)||F<0||F>=256)return!1}return!0}function aQ(Q,B){if(B||(B={}),"number"==typeof Q){XQ.checkSafeUint53(Q,"invalid arrayify value");const B=[];for(;Q;)B.unshift(255&Q),Q=parseInt(String(Q/256));return 0===B.length&&B.push(0),uQ(new Uint8Array(B))}if(B.allowMissingPrefix&&"string"==typeof Q&&"0x"!==Q.substring(0,2)&&(Q="0x"+Q),nQ(Q)&&(Q=Q.toHexString()),hQ(Q)){let F=Q.substring(2);F.length%2&&("left"===B.hexPad?F="0"+F:"right"===B.hexPad?F+="0":XQ.throwArgumentError("hex data is odd-length","value",Q));const U=[];for(let Q=0;Q<F.length;Q+=2)U.push(parseInt(F.substring(Q,Q+2),16));return uQ(new Uint8Array(U))}return WQ(Q)?uQ(new Uint8Array(Q)):XQ.throwArgumentError("invalid arrayify value","value",Q)}function oQ(Q){const B=Q.map((Q=>aQ(Q))),F=B.reduce(((Q,B)=>Q+B.length),0),U=new Uint8Array(F);return B.reduce(((Q,B)=>(U.set(B,Q),Q+B.length)),0),uQ(U)}function hQ(Q,B){return!("string"!=typeof Q||!Q.match(/^0x[0-9A-Fa-f]*$/))&&(!B||Q.length===2+2*B)}function YQ(Q,B){if(B||(B={}),"number"==typeof Q){XQ.checkSafeUint53(Q,"invalid hexlify value");let B="";for(;Q;)B="0123456789abcdef"[15&Q]+B,Q=Math.floor(Q/16);return B.length?(B.length%2&&(B="0"+B),"0x"+B):"0x00"}if("bigint"==typeof Q)return(Q=Q.toString(16)).length%2?"0x0"+Q:"0x"+Q;if(B.allowMissingPrefix&&"string"==typeof Q&&"0x"!==Q.substring(0,2)&&(Q="0x"+Q),nQ(Q))return Q.toHexString();if(hQ(Q))return Q.length%2&&("left"===B.hexPad?Q="0x0"+Q.substring(2):"right"===B.hexPad?Q+="0":XQ.throwArgumentError("hex data is odd-length","value",Q)),Q.toLowerCase();if(WQ(Q)){let B="0x";for(let F=0;F<Q.length;F++){let U=Q[F];B+="0123456789abcdef"[(240&U)>>4]+"0123456789abcdef"[15&U]}return B}return XQ.throwArgumentError("invalid hexlify value","value",Q)}function eQ(Q,B){for("string"!=typeof Q?Q=YQ(Q):hQ(Q)||XQ.throwArgumentError("invalid hex string","value",Q),Q.length>2*B+2&&XQ.throwArgumentError("value out of range","value",arguments[1]);Q.length<2*B+2;)Q="0x0"+Q.substring(2);return Q}var kQ=bQ.BN;const pQ=new iQ("bignumber/5.6.0"),MQ={};let TQ=!1;class zQ{constructor(Q,B){pQ.checkNew(new.target,zQ),Q!==MQ&&pQ.throwError("cannot call constructor directly; use BigNumber.from",iQ.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=B,this._isBigNumber=!0,Object.freeze(this)}fromTwos(Q){return vQ(wQ(this).fromTwos(Q))}toTwos(Q){return vQ(wQ(this).toTwos(Q))}abs(){return"-"===this._hex[0]?zQ.from(this._hex.substring(1)):this}add(Q){return vQ(wQ(this).add(wQ(Q)))}sub(Q){return vQ(wQ(this).sub(wQ(Q)))}div(Q){return zQ.from(Q).isZero()&&KQ("division-by-zero","div"),vQ(wQ(this).div(wQ(Q)))}mul(Q){return vQ(wQ(this).mul(wQ(Q)))}mod(Q){const B=wQ(Q);return B.isNeg()&&KQ("division-by-zero","mod"),vQ(wQ(this).umod(B))}pow(Q){const B=wQ(Q);return B.isNeg()&&KQ("negative-power","pow"),vQ(wQ(this).pow(B))}and(Q){const B=wQ(Q);return(this.isNegative()||B.isNeg())&&KQ("unbound-bitwise-result","and"),vQ(wQ(this).and(B))}or(Q){const B=wQ(Q);return(this.isNegative()||B.isNeg())&&KQ("unbound-bitwise-result","or"),vQ(wQ(this).or(B))}xor(Q){const B=wQ(Q);return(this.isNegative()||B.isNeg())&&KQ("unbound-bitwise-result","xor"),vQ(wQ(this).xor(B))}mask(Q){return(this.isNegative()||Q<0)&&KQ("negative-width","mask"),vQ(wQ(this).maskn(Q))}shl(Q){return(this.isNegative()||Q<0)&&KQ("negative-width","shl"),vQ(wQ(this).shln(Q))}shr(Q){return(this.isNegative()||Q<0)&&KQ("negative-width","shr"),vQ(wQ(this).shrn(Q))}eq(Q){return wQ(this).eq(wQ(Q))}lt(Q){return wQ(this).lt(wQ(Q))}lte(Q){return wQ(this).lte(wQ(Q))}gt(Q){return wQ(this).gt(wQ(Q))}gte(Q){return wQ(this).gte(wQ(Q))}isNegative(){return"-"===this._hex[0]}isZero(){return wQ(this).isZero()}toNumber(){try{return wQ(this).toNumber()}catch(Q){KQ("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(Q){}return pQ.throwError("this platform does not support BigInt",iQ.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?TQ||(TQ=!0,pQ.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?pQ.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",iQ.errors.UNEXPECTED_ARGUMENT,{}):pQ.throwError("BigNumber.toString does not accept parameters",iQ.errors.UNEXPECTED_ARGUMENT,{})),wQ(this).toString(10)}toHexString(){return this._hex}toJSON(Q){return{type:"BigNumber",hex:this.toHexString()}}static from(Q){if(Q instanceof zQ)return Q;if("string"==typeof Q)return Q.match(/^-?0x[0-9a-f]+$/i)?new zQ(MQ,rQ(Q)):Q.match(/^-?[0-9]+$/)?new zQ(MQ,rQ(new kQ(Q))):pQ.throwArgumentError("invalid BigNumber string","value",Q);if("number"==typeof Q)return Q%1&&KQ("underflow","BigNumber.from",Q),(Q>=9007199254740991||Q<=-9007199254740991)&&KQ("overflow","BigNumber.from",Q),zQ.from(String(Q));const B=Q;if("bigint"==typeof B)return zQ.from(B.toString());if(WQ(B))return zQ.from(YQ(B));if(B)if(B.toHexString){const Q=B.toHexString();if("string"==typeof Q)return zQ.from(Q)}else{let Q=B._hex;if(null==Q&&"BigNumber"===B.type&&(Q=B.hex),"string"==typeof Q&&(hQ(Q)||"-"===Q[0]&&hQ(Q.substring(1))))return zQ.from(Q)}return pQ.throwArgumentError("invalid BigNumber value","value",Q)}static isBigNumber(Q){return!(!Q||!Q._isBigNumber)}}function rQ(Q){if("string"!=typeof Q)return rQ(Q.toString(16));if("-"===Q[0])return"-"===(Q=Q.substring(1))[0]&&pQ.throwArgumentError("invalid hex","value",Q),"0x00"===(Q=rQ(Q))?Q:"-"+Q;if("0x"!==Q.substring(0,2)&&(Q="0x"+Q),"0x"===Q)return"0x00";for(Q.length%2&&(Q="0x0"+Q.substring(2));Q.length>4&&"0x00"===Q.substring(0,4);)Q="0x"+Q.substring(4);return Q}function vQ(Q){return zQ.from(rQ(Q))}function wQ(Q){const B=zQ.from(Q).toHexString();return"-"===B[0]?new kQ("-"+B.substring(3),16):new kQ(B.substring(2),16)}function KQ(Q,B,F){const U={fault:Q,operation:B};return null!=F&&(U.value=F),pQ.throwError(Q,iQ.errors.NUMERIC_FAULT,U)}window&&window.__awaiter;const OQ=new iQ("properties/5.6.0");function PQ(Q,B,F){Object.defineProperty(Q,B,{enumerable:!0,value:F,writable:!1})}function fQ(Q,B){for(let F=0;F<32;F++){if(Q[B])return Q[B];if(!Q.prototype||"object"!=typeof Q.prototype)break;Q=Object.getPrototypeOf(Q.prototype).constructor}return null}const jQ={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function qQ(Q){if(null==Q||jQ[typeof Q])return!0;if(Array.isArray(Q)||"object"==typeof Q){if(!Object.isFrozen(Q))return!1;const B=Object.keys(Q);for(let F=0;F<B.length;F++){let U=null;try{U=Q[B[F]]}catch(Q){continue}if(!qQ(U))return!1}return!0}return OQ.throwArgumentError("Cannot deepCopy "+typeof Q,"object",Q)}function _Q(Q){if(qQ(Q))return Q;if(Array.isArray(Q))return Object.freeze(Q.map((Q=>$Q(Q))));if("object"==typeof Q){const B={};for(const F in Q){const U=Q[F];void 0!==U&&PQ(B,F,$Q(U))}return B}return OQ.throwArgumentError("Cannot deepCopy "+typeof Q,"object",Q)}function $Q(Q){return _Q(Q)}class QB{constructor(Q){for(const B in Q)this[B]=$Q(Q[B])}}const BB=new iQ("abi/5.6.0"),FB={};let UB={calldata:!0,memory:!0,storage:!0},gB={calldata:!0,memory:!0};function IB(Q,B){if("bytes"===Q||"string"===Q){if(UB[B])return!0}else if("address"===Q){if("payable"===B)return!0}else if((Q.indexOf("[")>=0||"tuple"===Q)&&gB[B])return!0;return(UB[B]||"payable"===B)&&BB.throwArgumentError("invalid modifier","name",B),!1}function CB(Q,B){for(let F in B)PQ(Q,F,B[F])}const sB=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),cB=new RegExp(/^(.*)\[([0-9]*)\]$/);class lB{constructor(Q,B){Q!==FB&&BB.throwError("use fromString",iQ.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),CB(this,B);let F=this.type.match(cB);CB(this,F?{arrayLength:parseInt(F[2]||"-1"),arrayChildren:lB.fromObject({type:F[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(Q){if(Q||(Q=sB.sighash),sB[Q]||BB.throwArgumentError("invalid format type","format",Q),Q===sB.json){let B={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(B.indexed=this.indexed),this.components&&(B.components=this.components.map((B=>JSON.parse(B.format(Q))))),JSON.stringify(B)}let B="";return"array"===this.baseType?(B+=this.arrayChildren.format(Q),B+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(Q!==sB.sighash&&(B+=this.type),B+="("+this.components.map((B=>B.format(Q))).join(Q===sB.full?", ":",")+")"):B+=this.type,Q!==sB.sighash&&(!0===this.indexed&&(B+=" indexed"),Q===sB.full&&this.name&&(B+=" "+this.name)),B}static from(Q,B){return"string"==typeof Q?lB.fromString(Q,B):lB.fromObject(Q)}static fromObject(Q){return lB.isParamType(Q)?Q:new lB(FB,{name:Q.name||null,type:RB(Q.type),indexed:null==Q.indexed?null:!!Q.indexed,components:Q.components?Q.components.map(lB.fromObject):null})}static fromString(Q,B){return F=function(Q,B){let F=Q;function U(B){BB.throwArgumentError(`unexpected character at position ${B}`,"param",Q)}function g(Q){let F={type:"",name:"",parent:Q,state:{allowType:!0}};return B&&(F.indexed=!1),F}Q=Q.replace(/\s/g," ");let I={type:"",name:"",state:{allowType:!0}},C=I;for(let F=0;F<Q.length;F++){let I=Q[F];switch(I){case"(":C.state.allowType&&""===C.type?C.type="tuple":C.state.allowParams||U(F),C.state.allowType=!1,C.type=RB(C.type),C.components=[g(C)],C=C.components[0];break;case")":delete C.state,"indexed"===C.name&&(B||U(F),C.indexed=!0,C.name=""),IB(C.type,C.name)&&(C.name=""),C.type=RB(C.type);let Q=C;C=C.parent,C||U(F),delete Q.parent,C.state.allowParams=!1,C.state.allowName=!0,C.state.allowArray=!0;break;case",":delete C.state,"indexed"===C.name&&(B||U(F),C.indexed=!0,C.name=""),IB(C.type,C.name)&&(C.name=""),C.type=RB(C.type);let s=g(C.parent);C.parent.components.push(s),delete C.parent,C=s;break;case" ":C.state.allowType&&""!==C.type&&(C.type=RB(C.type),delete C.state.allowType,C.state.allowName=!0,C.state.allowParams=!0),C.state.allowName&&""!==C.name&&("indexed"===C.name?(B||U(F),C.indexed&&U(F),C.indexed=!0,C.name=""):IB(C.type,C.name)?C.name="":C.state.allowName=!1);break;case"[":C.state.allowArray||U(F),C.type+=I,C.state.allowArray=!1,C.state.allowName=!1,C.state.readArray=!0;break;case"]":C.state.readArray||U(F),C.type+=I,C.state.readArray=!1,C.state.allowArray=!0,C.state.allowName=!0;break;default:C.state.allowType?(C.type+=I,C.state.allowParams=!0,C.state.allowArray=!0):C.state.allowName?(C.name+=I,delete C.state.allowArray):C.state.readArray?C.type+=I:U(F)}}return C.parent&&BB.throwArgumentError("unexpected eof","param",Q),delete I.state,"indexed"===C.name?(B||U(F.length-7),C.indexed&&U(F.length-7),C.indexed=!0,C.name=""):IB(C.type,C.name)&&(C.name=""),I.type=RB(I.type),I}(Q,!!B),lB.fromObject({name:F.name,type:F.type,indexed:F.indexed,components:F.components});var F}static isParamType(Q){return!(null==Q||!Q._isParamType)}}function SB(Q,B){return function(Q){Q=Q.trim();let B=[],F="",U=0;for(let g=0;g<Q.length;g++){let I=Q[g];","===I&&0===U?(B.push(F),F=""):(F+=I,"("===I?U++:")"===I&&(U--,-1===U&&BB.throwArgumentError("unbalanced parenthesis","value",Q)))}F&&B.push(F);return B}(Q).map((Q=>lB.fromString(Q,B)))}class ZB{constructor(Q,B){Q!==FB&&BB.throwError("use a static from method",iQ.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),CB(this,B),this._isFragment=!0,Object.freeze(this)}static from(Q){return ZB.isFragment(Q)?Q:"string"==typeof Q?ZB.fromString(Q):ZB.fromObject(Q)}static fromObject(Q){if(ZB.isFragment(Q))return Q;switch(Q.type){case"function":return bB.fromObject(Q);case"event":return GB.fromObject(Q);case"constructor":return dB.fromObject(Q);case"error":return NB.fromObject(Q);case"fallback":case"receive":return null}return BB.throwArgumentError("invalid fragment object","value",Q)}static fromString(Q){return"event"===(Q=(Q=(Q=Q.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?GB.fromString(Q.substring(5).trim()):"function"===Q.split(" ")[0]?bB.fromString(Q.substring(8).trim()):"constructor"===Q.split("(")[0].trim()?dB.fromString(Q.trim()):"error"===Q.split(" ")[0]?NB.fromString(Q.substring(5).trim()):BB.throwArgumentError("unsupported fragment","value",Q)}static isFragment(Q){return!(!Q||!Q._isFragment)}}class GB extends ZB{format(Q){if(Q||(Q=sB.sighash),sB[Q]||BB.throwArgumentError("invalid format type","format",Q),Q===sB.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((B=>JSON.parse(B.format(Q))))});let B="";return Q!==sB.sighash&&(B+="event "),B+=this.name+"("+this.inputs.map((B=>B.format(Q))).join(Q===sB.full?", ":",")+") ",Q!==sB.sighash&&this.anonymous&&(B+="anonymous "),B.trim()}static from(Q){return"string"==typeof Q?GB.fromString(Q):GB.fromObject(Q)}static fromObject(Q){if(GB.isEventFragment(Q))return Q;"event"!==Q.type&&BB.throwArgumentError("invalid event object","value",Q);const B={name:DB(Q.name),anonymous:Q.anonymous,inputs:Q.inputs?Q.inputs.map(lB.fromObject):[],type:"event"};return new GB(FB,B)}static fromString(Q){let B=Q.match(mB);B||BB.throwArgumentError("invalid event string","value",Q);let F=!1;return B[3].split(" ").forEach((Q=>{switch(Q.trim()){case"anonymous":F=!0;break;case"":break;default:BB.warn("unknown modifier: "+Q)}})),GB.fromObject({name:B[1].trim(),anonymous:F,inputs:SB(B[2],!0),type:"event"})}static isEventFragment(Q){return Q&&Q._isFragment&&"event"===Q.type}}function LB(Q,B){B.gas=null;let F=Q.split("@");return 1!==F.length?(F.length>2&&BB.throwArgumentError("invalid human-readable ABI signature","value",Q),F[1].match(/^[0-9]+$/)||BB.throwArgumentError("invalid human-readable ABI signature gas","value",Q),B.gas=zQ.from(F[1]),F[0]):Q}function xB(Q,B){B.constant=!1,B.payable=!1,B.stateMutability="nonpayable",Q.split(" ").forEach((Q=>{switch(Q.trim()){case"constant":B.constant=!0;break;case"payable":B.payable=!0,B.stateMutability="payable";break;case"nonpayable":B.payable=!1,B.stateMutability="nonpayable";break;case"pure":B.constant=!0,B.stateMutability="pure";break;case"view":B.constant=!0,B.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+Q)}}))}function yB(Q){let B={constant:!1,payable:!0,stateMutability:"payable"};return null!=Q.stateMutability?(B.stateMutability=Q.stateMutability,B.constant="view"===B.stateMutability||"pure"===B.stateMutability,null!=Q.constant&&!!Q.constant!==B.constant&&BB.throwArgumentError("cannot have constant function with mutability "+B.stateMutability,"value",Q),B.payable="payable"===B.stateMutability,null!=Q.payable&&!!Q.payable!==B.payable&&BB.throwArgumentError("cannot have payable function with mutability "+B.stateMutability,"value",Q)):null!=Q.payable?(B.payable=!!Q.payable,null!=Q.constant||B.payable||"constructor"===Q.type||BB.throwArgumentError("unable to determine stateMutability","value",Q),B.constant=!!Q.constant,B.constant?B.stateMutability="view":B.stateMutability=B.payable?"payable":"nonpayable",B.payable&&B.constant&&BB.throwArgumentError("cannot have constant payable function","value",Q)):null!=Q.constant?(B.constant=!!Q.constant,B.payable=!B.constant,B.stateMutability=B.constant?"view":"payable"):"constructor"!==Q.type&&BB.throwArgumentError("unable to determine stateMutability","value",Q),B}class dB extends ZB{format(Q){if(Q||(Q=sB.sighash),sB[Q]||BB.throwArgumentError("invalid format type","format",Q),Q===sB.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((B=>JSON.parse(B.format(Q))))});Q===sB.sighash&&BB.throwError("cannot format a constructor for sighash",iQ.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let B="constructor("+this.inputs.map((B=>B.format(Q))).join(Q===sB.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(B+=this.stateMutability+" "),B.trim()}static from(Q){return"string"==typeof Q?dB.fromString(Q):dB.fromObject(Q)}static fromObject(Q){if(dB.isConstructorFragment(Q))return Q;"constructor"!==Q.type&&BB.throwArgumentError("invalid constructor object","value",Q);let B=yB(Q);B.constant&&BB.throwArgumentError("constructor cannot be constant","value",Q);const F={name:null,type:Q.type,inputs:Q.inputs?Q.inputs.map(lB.fromObject):[],payable:B.payable,stateMutability:B.stateMutability,gas:Q.gas?zQ.from(Q.gas):null};return new dB(FB,F)}static fromString(Q){let B={type:"constructor"},F=(Q=LB(Q,B)).match(mB);return F&&"constructor"===F[1].trim()||BB.throwArgumentError("invalid constructor string","value",Q),B.inputs=SB(F[2].trim(),!1),xB(F[3].trim(),B),dB.fromObject(B)}static isConstructorFragment(Q){return Q&&Q._isFragment&&"constructor"===Q.type}}class bB extends dB{format(Q){if(Q||(Q=sB.sighash),sB[Q]||BB.throwArgumentError("invalid format type","format",Q),Q===sB.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((B=>JSON.parse(B.format(Q)))),outputs:this.outputs.map((B=>JSON.parse(B.format(Q))))});let B="";return Q!==sB.sighash&&(B+="function "),B+=this.name+"("+this.inputs.map((B=>B.format(Q))).join(Q===sB.full?", ":",")+") ",Q!==sB.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(B+=this.stateMutability+" "):this.constant&&(B+="view "),this.outputs&&this.outputs.length&&(B+="returns ("+this.outputs.map((B=>B.format(Q))).join(", ")+") "),null!=this.gas&&(B+="@"+this.gas.toString()+" ")),B.trim()}static from(Q){return"string"==typeof Q?bB.fromString(Q):bB.fromObject(Q)}static fromObject(Q){if(bB.isFunctionFragment(Q))return Q;"function"!==Q.type&&BB.throwArgumentError("invalid function object","value",Q);let B=yB(Q);const F={type:Q.type,name:DB(Q.name),constant:B.constant,inputs:Q.inputs?Q.inputs.map(lB.fromObject):[],outputs:Q.outputs?Q.outputs.map(lB.fromObject):[],payable:B.payable,stateMutability:B.stateMutability,gas:Q.gas?zQ.from(Q.gas):null};return new bB(FB,F)}static fromString(Q){let B={type:"function"},F=(Q=LB(Q,B)).split(" returns ");F.length>2&&BB.throwArgumentError("invalid function string","value",Q);let U=F[0].match(mB);if(U||BB.throwArgumentError("invalid function signature","value",Q),B.name=U[1].trim(),B.name&&DB(B.name),B.inputs=SB(U[2],!1),xB(U[3].trim(),B),F.length>1){let U=F[1].match(mB);""==U[1].trim()&&""==U[3].trim()||BB.throwArgumentError("unexpected tokens","value",Q),B.outputs=SB(U[2],!1)}else B.outputs=[];return bB.fromObject(B)}static isFunctionFragment(Q){return Q&&Q._isFragment&&"function"===Q.type}}function VB(Q){const B=Q.format();return"Error(string)"!==B&&"Panic(uint256)"!==B||BB.throwArgumentError(`cannot specify user defined ${B} error`,"fragment",Q),Q}class NB extends ZB{format(Q){if(Q||(Q=sB.sighash),sB[Q]||BB.throwArgumentError("invalid format type","format",Q),Q===sB.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((B=>JSON.parse(B.format(Q))))});let B="";return Q!==sB.sighash&&(B+="error "),B+=this.name+"("+this.inputs.map((B=>B.format(Q))).join(Q===sB.full?", ":",")+") ",B.trim()}static from(Q){return"string"==typeof Q?NB.fromString(Q):NB.fromObject(Q)}static fromObject(Q){if(NB.isErrorFragment(Q))return Q;"error"!==Q.type&&BB.throwArgumentError("invalid error object","value",Q);const B={type:Q.type,name:DB(Q.name),inputs:Q.inputs?Q.inputs.map(lB.fromObject):[]};return VB(new NB(FB,B))}static fromString(Q){let B={type:"error"},F=Q.match(mB);return F||BB.throwArgumentError("invalid error signature","value",Q),B.name=F[1].trim(),B.name&&DB(B.name),B.inputs=SB(F[2],!1),VB(NB.fromObject(B))}static isErrorFragment(Q){return Q&&Q._isFragment&&"error"===Q.type}}function RB(Q){return Q.match(/^uint($|[^1-9])/)?Q="uint256"+Q.substring(4):Q.match(/^int($|[^1-9])/)&&(Q="int256"+Q.substring(3)),Q}const AB=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function DB(Q){return Q&&Q.match(AB)||BB.throwArgumentError(`invalid identifier "${Q}"`,"value",Q),Q}const mB=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");const EB=new iQ("abi/5.6.0");class JB{constructor(Q,B,F,U){this.name=Q,this.type=B,this.localName=F,this.dynamic=U}_throwError(Q,B){EB.throwArgumentError(Q,this.localName,B)}}class tB{constructor(Q){PQ(this,"wordSize",Q||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(Q)}get data(){return function(Q){let B="0x";return Q.forEach((Q=>{B+=YQ(Q).substring(2)})),B}(this._data)}get length(){return this._dataLength}_writeData(Q){return this._data.push(Q),this._dataLength+=Q.length,Q.length}appendWriter(Q){return this._writeData(oQ(Q._data))}writeBytes(Q){let B=aQ(Q);const F=B.length%this.wordSize;return F&&(B=oQ([B,this._padding.slice(F)])),this._writeData(B)}_getValue(Q){let B=aQ(zQ.from(Q));return B.length>this.wordSize&&EB.throwError("value out-of-bounds",iQ.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:B.length}),B.length%this.wordSize&&(B=oQ([this._padding.slice(B.length%this.wordSize),B])),B}writeValue(Q){return this._writeData(this._getValue(Q))}writeUpdatableValue(){const Q=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,B=>{this._data[Q]=this._getValue(B)}}}class iB{constructor(Q,B,F,U){PQ(this,"_data",aQ(Q)),PQ(this,"wordSize",B||32),PQ(this,"_coerceFunc",F),PQ(this,"allowLoose",U),this._offset=0}get data(){return YQ(this._data)}get consumed(){return this._offset}static coerce(Q,B){let F=Q.match("^u?int([0-9]+)$");return F&&parseInt(F[1])<=48&&(B=B.toNumber()),B}coerce(Q,B){return this._coerceFunc?this._coerceFunc(Q,B):iB.coerce(Q,B)}_peekBytes(Q,B,F){let U=Math.ceil(B/this.wordSize)*this.wordSize;return this._offset+U>this._data.length&&(this.allowLoose&&F&&this._offset+B<=this._data.length?U=B:EB.throwError("data out-of-bounds",iQ.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+U})),this._data.slice(this._offset,this._offset+U)}subReader(Q){return new iB(this._data.slice(this._offset+Q),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(Q,B){let F=this._peekBytes(0,Q,!!B);return this._offset+=F.length,F.slice(0,Q)}readValue(){return zQ.from(this.readBytes(this.wordSize))}}var XB="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function nB(){throw new Error("setTimeout has not been defined")}function uB(){throw new Error("clearTimeout has not been defined")}var HB=nB,WB=uB;function aB(Q){if(HB===setTimeout)return setTimeout(Q,0);if((HB===nB||!HB)&&setTimeout)return HB=setTimeout,setTimeout(Q,0);try{return HB(Q,0)}catch(B){try{return HB.call(null,Q,0)}catch(B){return HB.call(this,Q,0)}}}"function"==typeof XB.setTimeout&&(HB=setTimeout),"function"==typeof XB.clearTimeout&&(WB=clearTimeout);var oB,hB=[],YB=!1,eB=-1;function kB(){YB&&oB&&(YB=!1,oB.length?hB=oB.concat(hB):eB=-1,hB.length&&pB())}function pB(){if(!YB){var Q=aB(kB);YB=!0;for(var B=hB.length;B;){for(oB=hB,hB=[];++eB<B;)oB&&oB[eB].run();eB=-1,B=hB.length}oB=null,YB=!1,function(Q){if(WB===clearTimeout)return clearTimeout(Q);if((WB===uB||!WB)&&clearTimeout)return WB=clearTimeout,clearTimeout(Q);try{WB(Q)}catch(B){try{return WB.call(null,Q)}catch(B){return WB.call(this,Q)}}}(Q)}}function MB(Q,B){this.fun=Q,this.array=B}MB.prototype.run=function(){this.fun.apply(null,this.array)};function TB(){}var zB=TB,rB=TB,vB=TB,wB=TB,KB=TB,OB=TB,PB=TB;var fB=XB.performance||{},jB=fB.now||fB.mozNow||fB.msNow||fB.oNow||fB.webkitNow||function(){return(new Date).getTime()};var qB=new Date;var _B={nextTick:function(Q){var B=new Array(arguments.length-1);if(arguments.length>1)for(var F=1;F<arguments.length;F++)B[F-1]=arguments[F];hB.push(new MB(Q,B)),1!==hB.length||YB||aB(pB)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:zB,addListener:rB,once:vB,off:wB,removeListener:KB,removeAllListeners:OB,emit:PB,binding:function(Q){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(Q){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(Q){var B=.001*jB.call(fB),F=Math.floor(B),U=Math.floor(B%1*1e9);return Q&&(F-=Q[0],(U-=Q[1])<0&&(F--,U+=1e9)),[F,U]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-qB)/1e3}},$B={exports:{}};!function(Q){!function(){var B="input is invalid type",F="object"==typeof window,U=F?window:{};U.JS_SHA3_NO_WINDOW&&(F=!1);var g=!F&&"object"==typeof self;!U.JS_SHA3_NO_NODE_JS&&"object"==typeof _B&&_B.versions&&_B.versions.node?U=q:g&&(U=self);var I=!U.JS_SHA3_NO_COMMON_JS&&Q.exports,C=!U.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,s="0123456789abcdef".split(""),c=[4,1024,262144,67108864],l=[0,8,16,24],S=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],Z=[224,256,384,512],G=[128,256],L=["hex","buffer","arrayBuffer","array","digest"],x={128:168,256:136};!U.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(Q){return"[object Array]"===Object.prototype.toString.call(Q)}),!C||!U.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(Q){return"object"==typeof Q&&Q.buffer&&Q.buffer.constructor===ArrayBuffer});for(var y=function(Q,B,F){return function(U){return new u(Q,B,Q).update(U)[F]()}},d=function(Q,B,F){return function(U,g){return new u(Q,B,g).update(U)[F]()}},b=function(Q,B,F){return function(B,U,g,I){return D["cshake"+Q].update(B,U,g,I)[F]()}},V=function(Q,B,F){return function(B,U,g,I){return D["kmac"+Q].update(B,U,g,I)[F]()}},N=function(Q,B,F,U){for(var g=0;g<L.length;++g){var I=L[g];Q[I]=B(F,U,I)}return Q},R=function(Q,B){var F=y(Q,B,"hex");return F.create=function(){return new u(Q,B,Q)},F.update=function(Q){return F.create().update(Q)},N(F,y,Q,B)},A=[{name:"keccak",padding:[1,256,65536,16777216],bits:Z,createMethod:R},{name:"sha3",padding:[6,1536,393216,100663296],bits:Z,createMethod:R},{name:"shake",padding:[31,7936,2031616,520093696],bits:G,createMethod:function(Q,B){var F=d(Q,B,"hex");return F.create=function(F){return new u(Q,B,F)},F.update=function(Q,B){return F.create(B).update(Q)},N(F,d,Q,B)}},{name:"cshake",padding:c,bits:G,createMethod:function(Q,B){var F=x[Q],U=b(Q,0,"hex");return U.create=function(U,g,I){return g||I?new u(Q,B,U).bytepad([g,I],F):D["shake"+Q].create(U)},U.update=function(Q,B,F,g){return U.create(B,F,g).update(Q)},N(U,b,Q,B)}},{name:"kmac",padding:c,bits:G,createMethod:function(Q,B){var F=x[Q],U=V(Q,0,"hex");return U.create=function(U,g,I){return new H(Q,B,g).bytepad(["KMAC",I],F).bytepad([U],F)},U.update=function(Q,B,F,g){return U.create(Q,F,g).update(B)},N(U,V,Q,B)}}],D={},m=[],E=0;E<A.length;++E)for(var J=A[E],t=J.bits,i=0;i<t.length;++i){var X=J.name+"_"+t[i];if(m.push(X),D[X]=J.createMethod(t[i],J.padding),"sha3"!==J.name){var n=J.name+t[i];m.push(n),D[n]=D[X]}}function u(Q,B,F){this.blocks=[],this.s=[],this.padding=B,this.outputBits=F,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(Q<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=F>>5,this.extraBytes=(31&F)>>3;for(var U=0;U<50;++U)this.s[U]=0}function H(Q,B,F){u.call(this,Q,B,F)}u.prototype.update=function(Q){if(this.finalized)throw new Error("finalize already called");var F,U=typeof Q;if("string"!==U){if("object"!==U)throw new Error(B);if(null===Q)throw new Error(B);if(C&&Q.constructor===ArrayBuffer)Q=new Uint8Array(Q);else if(!(Array.isArray(Q)||C&&ArrayBuffer.isView(Q)))throw new Error(B);F=!0}for(var g,I,s=this.blocks,c=this.byteCount,S=Q.length,Z=this.blockCount,G=0,L=this.s;G<S;){if(this.reset)for(this.reset=!1,s[0]=this.block,g=1;g<Z+1;++g)s[g]=0;if(F)for(g=this.start;G<S&&g<c;++G)s[g>>2]|=Q[G]<<l[3&g++];else for(g=this.start;G<S&&g<c;++G)(I=Q.charCodeAt(G))<128?s[g>>2]|=I<<l[3&g++]:I<2048?(s[g>>2]|=(192|I>>6)<<l[3&g++],s[g>>2]|=(128|63&I)<<l[3&g++]):I<55296||I>=57344?(s[g>>2]|=(224|I>>12)<<l[3&g++],s[g>>2]|=(128|I>>6&63)<<l[3&g++],s[g>>2]|=(128|63&I)<<l[3&g++]):(I=65536+((1023&I)<<10|1023&Q.charCodeAt(++G)),s[g>>2]|=(240|I>>18)<<l[3&g++],s[g>>2]|=(128|I>>12&63)<<l[3&g++],s[g>>2]|=(128|I>>6&63)<<l[3&g++],s[g>>2]|=(128|63&I)<<l[3&g++]);if(this.lastByteIndex=g,g>=c){for(this.start=g-c,this.block=s[Z],g=0;g<Z;++g)L[g]^=s[g];W(L),this.reset=!0}else this.start=g}return this},u.prototype.encode=function(Q,B){var F=255&Q,U=1,g=[F];for(F=255&(Q>>=8);F>0;)g.unshift(F),F=255&(Q>>=8),++U;return B?g.push(U):g.unshift(U),this.update(g),g.length},u.prototype.encodeString=function(Q){var F,U=typeof Q;if("string"!==U){if("object"!==U)throw new Error(B);if(null===Q)throw new Error(B);if(C&&Q.constructor===ArrayBuffer)Q=new Uint8Array(Q);else if(!(Array.isArray(Q)||C&&ArrayBuffer.isView(Q)))throw new Error(B);F=!0}var g=0,I=Q.length;if(F)g=I;else for(var s=0;s<Q.length;++s){var c=Q.charCodeAt(s);c<128?g+=1:c<2048?g+=2:c<55296||c>=57344?g+=3:(c=65536+((1023&c)<<10|1023&Q.charCodeAt(++s)),g+=4)}return g+=this.encode(8*g),this.update(Q),g},u.prototype.bytepad=function(Q,B){for(var F=this.encode(B),U=0;U<Q.length;++U)F+=this.encodeString(Q[U]);var g=B-F%B,I=[];return I.length=g,this.update(I),this},u.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var Q=this.blocks,B=this.lastByteIndex,F=this.blockCount,U=this.s;if(Q[B>>2]|=this.padding[3&B],this.lastByteIndex===this.byteCount)for(Q[0]=Q[F],B=1;B<F+1;++B)Q[B]=0;for(Q[F-1]|=2147483648,B=0;B<F;++B)U[B]^=Q[B];W(U)}},u.prototype.toString=u.prototype.hex=function(){this.finalize();for(var Q,B=this.blockCount,F=this.s,U=this.outputBlocks,g=this.extraBytes,I=0,C=0,c="";C<U;){for(I=0;I<B&&C<U;++I,++C)Q=F[I],c+=s[Q>>4&15]+s[15&Q]+s[Q>>12&15]+s[Q>>8&15]+s[Q>>20&15]+s[Q>>16&15]+s[Q>>28&15]+s[Q>>24&15];C%B==0&&(W(F),I=0)}return g&&(Q=F[I],c+=s[Q>>4&15]+s[15&Q],g>1&&(c+=s[Q>>12&15]+s[Q>>8&15]),g>2&&(c+=s[Q>>20&15]+s[Q>>16&15])),c},u.prototype.arrayBuffer=function(){this.finalize();var Q,B=this.blockCount,F=this.s,U=this.outputBlocks,g=this.extraBytes,I=0,C=0,s=this.outputBits>>3;Q=g?new ArrayBuffer(U+1<<2):new ArrayBuffer(s);for(var c=new Uint32Array(Q);C<U;){for(I=0;I<B&&C<U;++I,++C)c[C]=F[I];C%B==0&&W(F)}return g&&(c[I]=F[I],Q=Q.slice(0,s)),Q},u.prototype.buffer=u.prototype.arrayBuffer,u.prototype.digest=u.prototype.array=function(){this.finalize();for(var Q,B,F=this.blockCount,U=this.s,g=this.outputBlocks,I=this.extraBytes,C=0,s=0,c=[];s<g;){for(C=0;C<F&&s<g;++C,++s)Q=s<<2,B=U[C],c[Q]=255&B,c[Q+1]=B>>8&255,c[Q+2]=B>>16&255,c[Q+3]=B>>24&255;s%F==0&&W(U)}return I&&(Q=s<<2,B=U[C],c[Q]=255&B,I>1&&(c[Q+1]=B>>8&255),I>2&&(c[Q+2]=B>>16&255)),c},H.prototype=new u,H.prototype.finalize=function(){return this.encode(this.outputBits,!0),u.prototype.finalize.call(this)};var W=function(Q){var B,F,U,g,I,C,s,c,l,Z,G,L,x,y,d,b,V,N,R,A,D,m,E,J,t,i,X,n,u,H,W,a,o,h,Y,e,k,p,M,T,z,r,v,w,K,O,P,f,j,q,_,$,QQ,BQ,FQ,UQ,gQ,IQ,CQ,sQ,cQ,lQ,SQ;for(U=0;U<48;U+=2)g=Q[0]^Q[10]^Q[20]^Q[30]^Q[40],I=Q[1]^Q[11]^Q[21]^Q[31]^Q[41],C=Q[2]^Q[12]^Q[22]^Q[32]^Q[42],s=Q[3]^Q[13]^Q[23]^Q[33]^Q[43],c=Q[4]^Q[14]^Q[24]^Q[34]^Q[44],l=Q[5]^Q[15]^Q[25]^Q[35]^Q[45],Z=Q[6]^Q[16]^Q[26]^Q[36]^Q[46],G=Q[7]^Q[17]^Q[27]^Q[37]^Q[47],B=(L=Q[8]^Q[18]^Q[28]^Q[38]^Q[48])^(C<<1|s>>>31),F=(x=Q[9]^Q[19]^Q[29]^Q[39]^Q[49])^(s<<1|C>>>31),Q[0]^=B,Q[1]^=F,Q[10]^=B,Q[11]^=F,Q[20]^=B,Q[21]^=F,Q[30]^=B,Q[31]^=F,Q[40]^=B,Q[41]^=F,B=g^(c<<1|l>>>31),F=I^(l<<1|c>>>31),Q[2]^=B,Q[3]^=F,Q[12]^=B,Q[13]^=F,Q[22]^=B,Q[23]^=F,Q[32]^=B,Q[33]^=F,Q[42]^=B,Q[43]^=F,B=C^(Z<<1|G>>>31),F=s^(G<<1|Z>>>31),Q[4]^=B,Q[5]^=F,Q[14]^=B,Q[15]^=F,Q[24]^=B,Q[25]^=F,Q[34]^=B,Q[35]^=F,Q[44]^=B,Q[45]^=F,B=c^(L<<1|x>>>31),F=l^(x<<1|L>>>31),Q[6]^=B,Q[7]^=F,Q[16]^=B,Q[17]^=F,Q[26]^=B,Q[27]^=F,Q[36]^=B,Q[37]^=F,Q[46]^=B,Q[47]^=F,B=Z^(g<<1|I>>>31),F=G^(I<<1|g>>>31),Q[8]^=B,Q[9]^=F,Q[18]^=B,Q[19]^=F,Q[28]^=B,Q[29]^=F,Q[38]^=B,Q[39]^=F,Q[48]^=B,Q[49]^=F,y=Q[0],d=Q[1],O=Q[11]<<4|Q[10]>>>28,P=Q[10]<<4|Q[11]>>>28,n=Q[20]<<3|Q[21]>>>29,u=Q[21]<<3|Q[20]>>>29,sQ=Q[31]<<9|Q[30]>>>23,cQ=Q[30]<<9|Q[31]>>>23,r=Q[40]<<18|Q[41]>>>14,v=Q[41]<<18|Q[40]>>>14,h=Q[2]<<1|Q[3]>>>31,Y=Q[3]<<1|Q[2]>>>31,b=Q[13]<<12|Q[12]>>>20,V=Q[12]<<12|Q[13]>>>20,f=Q[22]<<10|Q[23]>>>22,j=Q[23]<<10|Q[22]>>>22,H=Q[33]<<13|Q[32]>>>19,W=Q[32]<<13|Q[33]>>>19,lQ=Q[42]<<2|Q[43]>>>30,SQ=Q[43]<<2|Q[42]>>>30,BQ=Q[5]<<30|Q[4]>>>2,FQ=Q[4]<<30|Q[5]>>>2,e=Q[14]<<6|Q[15]>>>26,k=Q[15]<<6|Q[14]>>>26,N=Q[25]<<11|Q[24]>>>21,R=Q[24]<<11|Q[25]>>>21,q=Q[34]<<15|Q[35]>>>17,_=Q[35]<<15|Q[34]>>>17,a=Q[45]<<29|Q[44]>>>3,o=Q[44]<<29|Q[45]>>>3,J=Q[6]<<28|Q[7]>>>4,t=Q[7]<<28|Q[6]>>>4,UQ=Q[17]<<23|Q[16]>>>9,gQ=Q[16]<<23|Q[17]>>>9,p=Q[26]<<25|Q[27]>>>7,M=Q[27]<<25|Q[26]>>>7,A=Q[36]<<21|Q[37]>>>11,D=Q[37]<<21|Q[36]>>>11,$=Q[47]<<24|Q[46]>>>8,QQ=Q[46]<<24|Q[47]>>>8,w=Q[8]<<27|Q[9]>>>5,K=Q[9]<<27|Q[8]>>>5,i=Q[18]<<20|Q[19]>>>12,X=Q[19]<<20|Q[18]>>>12,IQ=Q[29]<<7|Q[28]>>>25,CQ=Q[28]<<7|Q[29]>>>25,T=Q[38]<<8|Q[39]>>>24,z=Q[39]<<8|Q[38]>>>24,m=Q[48]<<14|Q[49]>>>18,E=Q[49]<<14|Q[48]>>>18,Q[0]=y^~b&N,Q[1]=d^~V&R,Q[10]=J^~i&n,Q[11]=t^~X&u,Q[20]=h^~e&p,Q[21]=Y^~k&M,Q[30]=w^~O&f,Q[31]=K^~P&j,Q[40]=BQ^~UQ&IQ,Q[41]=FQ^~gQ&CQ,Q[2]=b^~N&A,Q[3]=V^~R&D,Q[12]=i^~n&H,Q[13]=X^~u&W,Q[22]=e^~p&T,Q[23]=k^~M&z,Q[32]=O^~f&q,Q[33]=P^~j&_,Q[42]=UQ^~IQ&sQ,Q[43]=gQ^~CQ&cQ,Q[4]=N^~A&m,Q[5]=R^~D&E,Q[14]=n^~H&a,Q[15]=u^~W&o,Q[24]=p^~T&r,Q[25]=M^~z&v,Q[34]=f^~q&$,Q[35]=j^~_&QQ,Q[44]=IQ^~sQ&lQ,Q[45]=CQ^~cQ&SQ,Q[6]=A^~m&y,Q[7]=D^~E&d,Q[16]=H^~a&J,Q[17]=W^~o&t,Q[26]=T^~r&h,Q[27]=z^~v&Y,Q[36]=q^~$&w,Q[37]=_^~QQ&K,Q[46]=sQ^~lQ&BQ,Q[47]=cQ^~SQ&FQ,Q[8]=m^~y&b,Q[9]=E^~d&V,Q[18]=a^~J&i,Q[19]=o^~t&X,Q[28]=r^~h&e,Q[29]=v^~Y&k,Q[38]=$^~w&O,Q[39]=QQ^~K&P,Q[48]=lQ^~BQ&UQ,Q[49]=SQ^~FQ&gQ,Q[0]^=S[U],Q[1]^=S[U+1]};if(I)Q.exports=D;else for(E=0;E<m.length;++E)U[m[E]]=D[m[E]]}()}($B);var QF=$B.exports;function BF(Q){return"0x"+QF.keccak_256(aQ(Q))}const FF=new iQ("address/5.6.0");function UF(Q){hQ(Q,20)||FF.throwArgumentError("invalid address","address",Q);const B=(Q=Q.toLowerCase()).substring(2).split(""),F=new Uint8Array(40);for(let Q=0;Q<40;Q++)F[Q]=B[Q].charCodeAt(0);const U=aQ(BF(F));for(let Q=0;Q<40;Q+=2)U[Q>>1]>>4>=8&&(B[Q]=B[Q].toUpperCase()),(15&U[Q>>1])>=8&&(B[Q+1]=B[Q+1].toUpperCase());return"0x"+B.join("")}const gF={};for(let Q=0;Q<10;Q++)gF[String(Q)]=String(Q);for(let Q=0;Q<26;Q++)gF[String.fromCharCode(65+Q)]=String(10+Q);const IF=Math.floor((CF=9007199254740991,Math.log10?Math.log10(CF):Math.log(CF)/Math.LN10));var CF;function sF(Q){let B=null;if("string"!=typeof Q&&FF.throwArgumentError("invalid address","address",Q),Q.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==Q.substring(0,2)&&(Q="0x"+Q),B=UF(Q),Q.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&B!==Q&&FF.throwArgumentError("bad address checksum","address",Q);else if(Q.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(Q.substring(2,4)!==function(Q){let B=(Q=(Q=Q.toUpperCase()).substring(4)+Q.substring(0,2)+"00").split("").map((Q=>gF[Q])).join("");for(;B.length>=IF;){let Q=B.substring(0,IF);B=parseInt(Q,10)%97+B.substring(Q.length)}let F=String(98-parseInt(B,10)%97);for(;F.length<2;)F="0"+F;return F}(Q)&&FF.throwArgumentError("bad icap checksum","address",Q),F=Q.substring(4),B=new kQ(F,36).toString(16);B.length<40;)B="0"+B;B=UF("0x"+B)}else FF.throwArgumentError("invalid address","address",Q);var F;return B}class cF extends JB{constructor(Q){super("address","address",Q,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(Q,B){try{B=sF(B)}catch(Q){this._throwError(Q.message,B)}return Q.writeValue(B)}decode(Q){return sF(eQ(Q.readValue().toHexString(),20))}}class lF extends JB{constructor(Q){super(Q.name,Q.type,void 0,Q.dynamic),this.coder=Q}defaultValue(){return this.coder.defaultValue()}encode(Q,B){return this.coder.encode(Q,B)}decode(Q){return this.coder.decode(Q)}}const SF=new iQ("abi/5.6.0");function ZF(Q,B,F){let U=null;if(Array.isArray(F))U=F;else if(F&&"object"==typeof F){let Q={};U=B.map((B=>{const U=B.localName;return U||SF.throwError("cannot encode object for signature with missing names",iQ.errors.INVALID_ARGUMENT,{argument:"values",coder:B,value:F}),Q[U]&&SF.throwError("cannot encode object for signature with duplicate names",iQ.errors.INVALID_ARGUMENT,{argument:"values",coder:B,value:F}),Q[U]=!0,F[U]}))}else SF.throwArgumentError("invalid tuple value","tuple",F);B.length!==U.length&&SF.throwArgumentError("types/value length mismatch","tuple",F);let g=new tB(Q.wordSize),I=new tB(Q.wordSize),C=[];B.forEach(((Q,B)=>{let F=U[B];if(Q.dynamic){let B=I.length;Q.encode(I,F);let U=g.writeUpdatableValue();C.push((Q=>{U(Q+B)}))}else Q.encode(g,F)})),C.forEach((Q=>{Q(g.length)}));let s=Q.appendWriter(g);return s+=Q.appendWriter(I),s}function GF(Q,B){let F=[],U=Q.subReader(0);B.forEach((B=>{let g=null;if(B.dynamic){let F=Q.readValue(),I=U.subReader(F.toNumber());try{g=B.decode(I)}catch(Q){if(Q.code===iQ.errors.BUFFER_OVERRUN)throw Q;g=Q,g.baseType=B.name,g.name=B.localName,g.type=B.type}}else try{g=B.decode(Q)}catch(Q){if(Q.code===iQ.errors.BUFFER_OVERRUN)throw Q;g=Q,g.baseType=B.name,g.name=B.localName,g.type=B.type}null!=g&&F.push(g)}));const g=B.reduce(((Q,B)=>{const F=B.localName;return F&&(Q[F]||(Q[F]=0),Q[F]++),Q}),{});B.forEach(((Q,B)=>{let U=Q.localName;if(!U||1!==g[U])return;if("length"===U&&(U="_length"),null!=F[U])return;const I=F[B];I instanceof Error?Object.defineProperty(F,U,{enumerable:!0,get:()=>{throw I}}):F[U]=I}));for(let Q=0;Q<F.length;Q++){const B=F[Q];B instanceof Error&&Object.defineProperty(F,Q,{enumerable:!0,get:()=>{throw B}})}return Object.freeze(F)}class LF extends JB{constructor(Q,B,F){super("array",Q.type+"["+(B>=0?B:"")+"]",F,-1===B||Q.dynamic),this.coder=Q,this.length=B}defaultValue(){const Q=this.coder.defaultValue(),B=[];for(let F=0;F<this.length;F++)B.push(Q);return B}encode(Q,B){Array.isArray(B)||this._throwError("expected array value",B);let F=this.length;-1===F&&(F=B.length,Q.writeValue(B.length)),SF.checkArgumentCount(B.length,F,"coder array"+(this.localName?" "+this.localName:""));let U=[];for(let Q=0;Q<B.length;Q++)U.push(this.coder);return ZF(Q,U,B)}decode(Q){let B=this.length;-1===B&&(B=Q.readValue().toNumber(),32*B>Q._data.length&&SF.throwError("insufficient data length",iQ.errors.BUFFER_OVERRUN,{length:Q._data.length,count:B}));let F=[];for(let Q=0;Q<B;Q++)F.push(new lF(this.coder));return Q.coerce(this.name,GF(Q,F))}}class xF extends JB{constructor(Q){super("bool","bool",Q,!1)}defaultValue(){return!1}encode(Q,B){return Q.writeValue(B?1:0)}decode(Q){return Q.coerce(this.type,!Q.readValue().isZero())}}class yF extends JB{constructor(Q,B){super(Q,Q,B,!0)}defaultValue(){return"0x"}encode(Q,B){B=aQ(B);let F=Q.writeValue(B.length);return F+=Q.writeBytes(B),F}decode(Q){return Q.readBytes(Q.readValue().toNumber(),!0)}}class dF extends yF{constructor(Q){super("bytes",Q)}decode(Q){return Q.coerce(this.name,YQ(super.decode(Q)))}}class bF extends JB{constructor(Q,B){let F="bytes"+String(Q);super(F,F,B,!1),this.size=Q}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(Q,B){let F=aQ(B);return F.length!==this.size&&this._throwError("incorrect data length",B),Q.writeBytes(F)}decode(Q){return Q.coerce(this.name,YQ(Q.readBytes(this.size)))}}class VF extends JB{constructor(Q){super("null","",Q,!1)}defaultValue(){return null}encode(Q,B){return null!=B&&this._throwError("not null",B),Q.writeBytes([])}decode(Q){return Q.readBytes(0),Q.coerce(this.name,null)}}const NF=zQ.from(-1),RF=zQ.from(0),AF=zQ.from(1),DF=zQ.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class mF extends JB{constructor(Q,B,F){const U=(B?"int":"uint")+8*Q;super(U,U,F,!1),this.size=Q,this.signed=B}defaultValue(){return 0}encode(Q,B){let F=zQ.from(B),U=DF.mask(8*Q.wordSize);if(this.signed){let Q=U.mask(8*this.size-1);(F.gt(Q)||F.lt(Q.add(AF).mul(NF)))&&this._throwError("value out-of-bounds",B)}else(F.lt(RF)||F.gt(U.mask(8*this.size)))&&this._throwError("value out-of-bounds",B);return F=F.toTwos(8*this.size).mask(8*this.size),this.signed&&(F=F.fromTwos(8*this.size).toTwos(8*Q.wordSize)),Q.writeValue(F)}decode(Q){let B=Q.readValue().mask(8*this.size);return this.signed&&(B=B.fromTwos(8*this.size)),Q.coerce(this.name,B)}}const EF=new iQ("strings/5.6.0");var JF,tF;function iF(Q,B,F,U,g){if(Q===tF.BAD_PREFIX||Q===tF.UNEXPECTED_CONTINUE){let Q=0;for(let U=B+1;U<F.length&&F[U]>>6==2;U++)Q++;return Q}return Q===tF.OVERRUN?F.length-B-1:0}!function(Q){Q.current="",Q.NFC="NFC",Q.NFD="NFD",Q.NFKC="NFKC",Q.NFKD="NFKD"}(JF||(JF={})),function(Q){Q.UNEXPECTED_CONTINUE="unexpected continuation byte",Q.BAD_PREFIX="bad codepoint prefix",Q.OVERRUN="string overrun",Q.MISSING_CONTINUE="missing continuation byte",Q.OUT_OF_RANGE="out of UTF-8 range",Q.UTF16_SURROGATE="UTF-16 surrogate",Q.OVERLONG="overlong representation"}(tF||(tF={}));const XF=Object.freeze({error:function(Q,B,F,U,g){return EF.throwArgumentError(`invalid codepoint at offset ${B}; ${Q}`,"bytes",F)},ignore:iF,replace:function(Q,B,F,U,g){return Q===tF.OVERLONG?(U.push(g),0):(U.push(65533),iF(Q,B,F))}});function nF(Q,B=JF.current){B!=JF.current&&(EF.checkNormalize(),Q=Q.normalize(B));let F=[];for(let B=0;B<Q.length;B++){const U=Q.charCodeAt(B);if(U<128)F.push(U);else if(U<2048)F.push(U>>6|192),F.push(63&U|128);else if(55296==(64512&U)){B++;const g=Q.charCodeAt(B);if(B>=Q.length||56320!=(64512&g))throw new Error("invalid utf-8 string");const I=65536+((1023&U)<<10)+(1023&g);F.push(I>>18|240),F.push(I>>12&63|128),F.push(I>>6&63|128),F.push(63&I|128)}else F.push(U>>12|224),F.push(U>>6&63|128),F.push(63&U|128)}return aQ(F)}function uF(Q,B){return F=function(Q,B){null==B&&(B=XF.error),Q=aQ(Q);const F=[];let U=0;for(;U<Q.length;){const g=Q[U++];if(g>>7==0){F.push(g);continue}let I=null,C=null;if(192==(224&g))I=1,C=127;else if(224==(240&g))I=2,C=2047;else{if(240!=(248&g)){U+=B(128==(192&g)?tF.UNEXPECTED_CONTINUE:tF.BAD_PREFIX,U-1,Q,F);continue}I=3,C=65535}if(U-1+I>=Q.length){U+=B(tF.OVERRUN,U-1,Q,F);continue}let s=g&(1<<8-I-1)-1;for(let g=0;g<I;g++){let g=Q[U];if(128!=(192&g)){U+=B(tF.MISSING_CONTINUE,U,Q,F),s=null;break}s=s<<6|63&g,U++}null!==s&&(s>1114111?U+=B(tF.OUT_OF_RANGE,U-1-I,Q,F,s):s>=55296&&s<=57343?U+=B(tF.UTF16_SURROGATE,U-1-I,Q,F,s):s<=C?U+=B(tF.OVERLONG,U-1-I,Q,F,s):F.push(s))}return F}(Q,B),F.map((Q=>Q<=65535?String.fromCharCode(Q):(Q-=65536,String.fromCharCode(55296+(Q>>10&1023),56320+(1023&Q))))).join("");var F}class HF extends yF{constructor(Q){super("string",Q)}defaultValue(){return""}encode(Q,B){return super.encode(Q,nF(B))}decode(Q){return uF(super.decode(Q))}}class WF extends JB{constructor(Q,B){let F=!1;const U=[];Q.forEach((Q=>{Q.dynamic&&(F=!0),U.push(Q.type)}));super("tuple","tuple("+U.join(",")+")",B,F),this.coders=Q}defaultValue(){const Q=[];this.coders.forEach((B=>{Q.push(B.defaultValue())}));const B=this.coders.reduce(((Q,B)=>{const F=B.localName;return F&&(Q[F]||(Q[F]=0),Q[F]++),Q}),{});return this.coders.forEach(((F,U)=>{let g=F.localName;g&&1===B[g]&&("length"===g&&(g="_length"),null==Q[g]&&(Q[g]=Q[U]))})),Object.freeze(Q)}encode(Q,B){return ZF(Q,this.coders,B)}decode(Q){return Q.coerce(this.name,GF(Q,this.coders))}}const aF=new iQ("abi/5.6.0"),oF=new RegExp(/^bytes([0-9]*)$/),hF=new RegExp(/^(u?int)([0-9]*)$/);class YF{constructor(Q){aF.checkNew(new.target,YF),PQ(this,"coerceFunc",Q||null)}_getCoder(Q){switch(Q.baseType){case"address":return new cF(Q.name);case"bool":return new xF(Q.name);case"string":return new HF(Q.name);case"bytes":return new dF(Q.name);case"array":return new LF(this._getCoder(Q.arrayChildren),Q.arrayLength,Q.name);case"tuple":return new WF((Q.components||[]).map((Q=>this._getCoder(Q))),Q.name);case"":return new VF(Q.name)}let B=Q.type.match(hF);if(B){let F=parseInt(B[2]||"256");return(0===F||F>256||F%8!=0)&&aF.throwArgumentError("invalid "+B[1]+" bit length","param",Q),new mF(F/8,"int"===B[1],Q.name)}if(B=Q.type.match(oF),B){let F=parseInt(B[1]);return(0===F||F>32)&&aF.throwArgumentError("invalid bytes length","param",Q),new bF(F,Q.name)}return aF.throwArgumentError("invalid type","type",Q.type)}_getWordSize(){return 32}_getReader(Q,B){return new iB(Q,this._getWordSize(),this.coerceFunc,B)}_getWriter(){return new tB(this._getWordSize())}getDefaultValue(Q){const B=Q.map((Q=>this._getCoder(lB.from(Q))));return new WF(B,"_").defaultValue()}encode(Q,B){Q.length!==B.length&&aF.throwError("types/values length mismatch",iQ.errors.INVALID_ARGUMENT,{count:{types:Q.length,values:B.length},value:{types:Q,values:B}});const F=Q.map((Q=>this._getCoder(lB.from(Q)))),U=new WF(F,"_"),g=this._getWriter();return U.encode(g,B),g.data}decode(Q,B,F){const U=Q.map((Q=>this._getCoder(lB.from(Q))));return new WF(U,"_").decode(this._getReader(aQ(B),F))}}const eF=new YF;function kF(Q){return BF(nF(Q))}const pF=new iQ("abi/5.6.0");class MF extends QB{}class TF extends QB{}class zF extends QB{}class rF extends QB{static isIndexed(Q){return!(!Q||!Q._isIndexed)}}const vF={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function wF(Q,B){const F=new Error(`deferred error during ABI decoding triggered accessing ${Q}`);return F.error=B,F}class KF{constructor(Q){pF.checkNew(new.target,KF);let B=[];B="string"==typeof Q?JSON.parse(Q):Q,PQ(this,"fragments",B.map((Q=>ZB.from(Q))).filter((Q=>null!=Q))),PQ(this,"_abiCoder",fQ(new.target,"getAbiCoder")()),PQ(this,"functions",{}),PQ(this,"errors",{}),PQ(this,"events",{}),PQ(this,"structs",{}),this.fragments.forEach((Q=>{let B=null;switch(Q.type){case"constructor":return this.deploy?void pF.warn("duplicate definition - constructor"):void PQ(this,"deploy",Q);case"function":B=this.functions;break;case"event":B=this.events;break;case"error":B=this.errors;break;default:return}let F=Q.format();B[F]?pF.warn("duplicate definition - "+F):B[F]=Q})),this.deploy||PQ(this,"deploy",dB.from({payable:!1,type:"constructor"})),PQ(this,"_isInterface",!0)}format(Q){Q||(Q=sB.full),Q===sB.sighash&&pF.throwArgumentError("interface does not support formatting sighash","format",Q);const B=this.fragments.map((B=>B.format(Q)));return Q===sB.json?JSON.stringify(B.map((Q=>JSON.parse(Q)))):B}static getAbiCoder(){return eF}static getAddress(Q){return sF(Q)}static getSighash(Q){return B=kF(Q.format()),F=0,U=4,"string"!=typeof B?B=YQ(B):(!hQ(B)||B.length%2)&&XQ.throwArgumentError("invalid hexData","value",B),F=2+2*F,null!=U?"0x"+B.substring(F,2+2*U):"0x"+B.substring(F);var B,F,U}static getEventTopic(Q){return kF(Q.format())}getFunction(Q){if(hQ(Q)){for(const B in this.functions)if(Q===this.getSighash(B))return this.functions[B];pF.throwArgumentError("no matching function","sighash",Q)}if(-1===Q.indexOf("(")){const B=Q.trim(),F=Object.keys(this.functions).filter((Q=>Q.split("(")[0]===B));return 0===F.length?pF.throwArgumentError("no matching function","name",B):F.length>1&&pF.throwArgumentError("multiple matching functions","name",B),this.functions[F[0]]}const B=this.functions[bB.fromString(Q).format()];return B||pF.throwArgumentError("no matching function","signature",Q),B}getEvent(Q){if(hQ(Q)){const B=Q.toLowerCase();for(const Q in this.events)if(B===this.getEventTopic(Q))return this.events[Q];pF.throwArgumentError("no matching event","topichash",B)}if(-1===Q.indexOf("(")){const B=Q.trim(),F=Object.keys(this.events).filter((Q=>Q.split("(")[0]===B));return 0===F.length?pF.throwArgumentError("no matching event","name",B):F.length>1&&pF.throwArgumentError("multiple matching events","name",B),this.events[F[0]]}const B=this.events[GB.fromString(Q).format()];return B||pF.throwArgumentError("no matching event","signature",Q),B}getError(Q){if(hQ(Q)){const B=fQ(this.constructor,"getSighash");for(const F in this.errors){if(Q===B(this.errors[F]))return this.errors[F]}pF.throwArgumentError("no matching error","sighash",Q)}if(-1===Q.indexOf("(")){const B=Q.trim(),F=Object.keys(this.errors).filter((Q=>Q.split("(")[0]===B));return 0===F.length?pF.throwArgumentError("no matching error","name",B):F.length>1&&pF.throwArgumentError("multiple matching errors","name",B),this.errors[F[0]]}const B=this.errors[bB.fromString(Q).format()];return B||pF.throwArgumentError("no matching error","signature",Q),B}getSighash(Q){if("string"==typeof Q)try{Q=this.getFunction(Q)}catch(B){try{Q=this.getError(Q)}catch(Q){throw B}}return fQ(this.constructor,"getSighash")(Q)}getEventTopic(Q){return"string"==typeof Q&&(Q=this.getEvent(Q)),fQ(this.constructor,"getEventTopic")(Q)}_decodeParams(Q,B){return this._abiCoder.decode(Q,B)}_encodeParams(Q,B){return this._abiCoder.encode(Q,B)}encodeDeploy(Q){return this._encodeParams(this.deploy.inputs,Q||[])}decodeErrorResult(Q,B){"string"==typeof Q&&(Q=this.getError(Q));const F=aQ(B);return YQ(F.slice(0,4))!==this.getSighash(Q)&&pF.throwArgumentError(`data signature does not match error ${Q.name}.`,"data",YQ(F)),this._decodeParams(Q.inputs,F.slice(4))}encodeErrorResult(Q,B){return"string"==typeof Q&&(Q=this.getError(Q)),YQ(oQ([this.getSighash(Q),this._encodeParams(Q.inputs,B||[])]))}decodeFunctionData(Q,B){"string"==typeof Q&&(Q=this.getFunction(Q));const F=aQ(B);return YQ(F.slice(0,4))!==this.getSighash(Q)&&pF.throwArgumentError(`data signature does not match function ${Q.name}.`,"data",YQ(F)),this._decodeParams(Q.inputs,F.slice(4))}encodeFunctionData(Q,B){return"string"==typeof Q&&(Q=this.getFunction(Q)),YQ(oQ([this.getSighash(Q),this._encodeParams(Q.inputs,B||[])]))}decodeFunctionResult(Q,B){"string"==typeof Q&&(Q=this.getFunction(Q));let F=aQ(B),U=null,g=null,I=null,C=null;switch(F.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(Q.outputs,F)}catch(Q){}break;case 4:{const Q=YQ(F.slice(0,4)),B=vF[Q];if(B)g=this._abiCoder.decode(B.inputs,F.slice(4)),I=B.name,C=B.signature,B.reason&&(U=g[0]);else try{const B=this.getError(Q);g=this._abiCoder.decode(B.inputs,F.slice(4)),I=B.name,C=B.format()}catch(Q){}break}}return pF.throwError("call revert exception",iQ.errors.CALL_EXCEPTION,{method:Q.format(),errorArgs:g,errorName:I,errorSignature:C,reason:U})}encodeFunctionResult(Q,B){return"string"==typeof Q&&(Q=this.getFunction(Q)),YQ(this._abiCoder.encode(Q.outputs,B||[]))}encodeFilterTopics(Q,B){"string"==typeof Q&&(Q=this.getEvent(Q)),B.length>Q.inputs.length&&pF.throwError("too many arguments for "+Q.format(),iQ.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:B});let F=[];Q.anonymous||F.push(this.getEventTopic(Q));const U=(Q,B)=>"string"===Q.type?kF(B):"bytes"===Q.type?BF(YQ(B)):("address"===Q.type&&this._abiCoder.encode(["address"],[B]),eQ(YQ(B),32));for(B.forEach(((B,g)=>{let I=Q.inputs[g];I.indexed?null==B?F.push(null):"array"===I.baseType||"tuple"===I.baseType?pF.throwArgumentError("filtering with tuples or arrays not supported","contract."+I.name,B):Array.isArray(B)?F.push(B.map((Q=>U(I,Q)))):F.push(U(I,B)):null!=B&&pF.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+I.name,B)}));F.length&&null===F[F.length-1];)F.pop();return F}encodeEventLog(Q,B){"string"==typeof Q&&(Q=this.getEvent(Q));const F=[],U=[],g=[];return Q.anonymous||F.push(this.getEventTopic(Q)),B.length!==Q.inputs.length&&pF.throwArgumentError("event arguments/values mismatch","values",B),Q.inputs.forEach(((Q,I)=>{const C=B[I];if(Q.indexed)if("string"===Q.type)F.push(kF(C));else if("bytes"===Q.type)F.push(BF(C));else{if("tuple"===Q.baseType||"array"===Q.baseType)throw new Error("not implemented");F.push(this._abiCoder.encode([Q.type],[C]))}else U.push(Q),g.push(C)})),{data:this._abiCoder.encode(U,g),topics:F}}decodeEventLog(Q,B,F){if("string"==typeof Q&&(Q=this.getEvent(Q)),null!=F&&!Q.anonymous){let B=this.getEventTopic(Q);hQ(F[0],32)&&F[0].toLowerCase()===B||pF.throwError("fragment/topic mismatch",iQ.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:B,value:F[0]}),F=F.slice(1)}let U=[],g=[],I=[];Q.inputs.forEach(((Q,B)=>{Q.indexed?"string"===Q.type||"bytes"===Q.type||"tuple"===Q.baseType||"array"===Q.baseType?(U.push(lB.fromObject({type:"bytes32",name:Q.name})),I.push(!0)):(U.push(Q),I.push(!1)):(g.push(Q),I.push(!1))}));let C=null!=F?this._abiCoder.decode(U,oQ(F)):null,s=this._abiCoder.decode(g,B,!0),c=[],l=0,S=0;Q.inputs.forEach(((Q,B)=>{if(Q.indexed)if(null==C)c[B]=new rF({_isIndexed:!0,hash:null});else if(I[B])c[B]=new rF({_isIndexed:!0,hash:C[S++]});else try{c[B]=C[S++]}catch(Q){c[B]=Q}else try{c[B]=s[l++]}catch(Q){c[B]=Q}if(Q.name&&null==c[Q.name]){const F=c[B];F instanceof Error?Object.defineProperty(c,Q.name,{enumerable:!0,get:()=>{throw wF(`property ${JSON.stringify(Q.name)}`,F)}}):c[Q.name]=F}}));for(let Q=0;Q<c.length;Q++){const B=c[Q];B instanceof Error&&Object.defineProperty(c,Q,{enumerable:!0,get:()=>{throw wF(`index ${Q}`,B)}})}return Object.freeze(c)}parseTransaction(Q){let B=this.getFunction(Q.data.substring(0,10).toLowerCase());return B?new TF({args:this._abiCoder.decode(B.inputs,"0x"+Q.data.substring(10)),functionFragment:B,name:B.name,signature:B.format(),sighash:this.getSighash(B),value:zQ.from(Q.value||"0")}):null}parseLog(Q){let B=this.getEvent(Q.topics[0]);return!B||B.anonymous?null:new MF({eventFragment:B,name:B.name,signature:B.format(),topic:this.getEventTopic(B),args:this.decodeEventLog(B,Q.data,Q.topics)})}parseError(Q){const B=YQ(Q);let F=this.getError(B.substring(0,10).toLowerCase());return F?new zF({args:this._abiCoder.decode(F.inputs,"0x"+B.substring(10)),errorFragment:F,name:F.name,signature:F.format(),sighash:this.getSighash(F)}):null}static isInterface(Q){return!(!Q||!Q._isInterface)}}function OF(Q,B){(null==B||B>Q.length)&&(B=Q.length);for(var F=0,U=new Array(B);F<B;F++)U[F]=Q[F];return U}function PF(Q,B){if(Q){if("string"==typeof Q)return OF(Q,B);var F=Object.prototype.toString.call(Q).slice(8,-1);return"Object"===F&&Q.constructor&&(F=Q.constructor.name),"Map"===F||"Set"===F?Array.from(Q):"Arguments"===F||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(F)?OF(Q,B):void 0}}function fF(Q){return function(Q){if(Array.isArray(Q))return OF(Q)}(Q)||function(Q){if("undefined"!=typeof Symbol&&null!=Q[Symbol.iterator]||null!=Q["@@iterator"])return Array.from(Q)}(Q)||PF(Q)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jF(Q){if(void 0===Q)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return Q}function qF(Q,B){return qF=Object.setPrototypeOf||function(Q,B){return Q.__proto__=B,Q},qF(Q,B)}function _F(Q,B){if("function"!=typeof B&&null!==B)throw new TypeError("Super expression must either be null or a function");Q.prototype=Object.create(B&&B.prototype,{constructor:{value:Q,writable:!0,configurable:!0}}),Object.defineProperty(Q,"prototype",{writable:!1}),B&&qF(Q,B)}function $F(Q){return $F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(Q){return typeof Q}:function(Q){return Q&&"function"==typeof Symbol&&Q.constructor===Symbol&&Q!==Symbol.prototype?"symbol":typeof Q},$F(Q)}function QU(Q,B){if(B&&("object"===$F(B)||"function"==typeof B))return B;if(void 0!==B)throw new TypeError("Derived constructors may only return object or undefined");return jF(Q)}function BU(Q){return BU=Object.setPrototypeOf?Object.getPrototypeOf:function(Q){return Q.__proto__||Object.getPrototypeOf(Q)},BU(Q)}var FU=gU,UU=null;try{UU=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(Q){}function gU(Q,B,F){this.low=0|Q,this.high=0|B,this.unsigned=!!F}function IU(Q){return!0===(Q&&Q.__isLong__)}gU.prototype.__isLong__,Object.defineProperty(gU.prototype,"__isLong__",{value:!0}),gU.isLong=IU;var CU={},sU={};function cU(Q,B){var F,U,g;return B?(g=0<=(Q>>>=0)&&Q<256)&&(U=sU[Q])?U:(F=SU(Q,(0|Q)<0?-1:0,!0),g&&(sU[Q]=F),F):(g=-128<=(Q|=0)&&Q<128)&&(U=CU[Q])?U:(F=SU(Q,Q<0?-1:0,!1),g&&(CU[Q]=F),F)}function lU(Q,B){if(isNaN(Q))return B?NU:VU;if(B){if(Q<0)return NU;if(Q>=yU)return EU}else{if(Q<=-dU)return JU;if(Q+1>=dU)return mU}return Q<0?lU(-Q,B).neg():SU(Q%xU|0,Q/xU|0,B)}function SU(Q,B,F){return new gU(Q,B,F)}gU.fromInt=cU,gU.fromNumber=lU,gU.fromBits=SU;var ZU=Math.pow;function GU(Q,B,F){if(0===Q.length)throw Error("empty string");if("NaN"===Q||"Infinity"===Q||"+Infinity"===Q||"-Infinity"===Q)return VU;if("number"==typeof B?(F=B,B=!1):B=!!B,(F=F||10)<2||36<F)throw RangeError("radix");var U;if((U=Q.indexOf("-"))>0)throw Error("interior hyphen");if(0===U)return GU(Q.substring(1),B,F).neg();for(var g=lU(ZU(F,8)),I=VU,C=0;C<Q.length;C+=8){var s=Math.min(8,Q.length-C),c=parseInt(Q.substring(C,C+s),F);if(s<8){var l=lU(ZU(F,s));I=I.mul(l).add(lU(c))}else I=(I=I.mul(g)).add(lU(c))}return I.unsigned=B,I}function LU(Q,B){return"number"==typeof Q?lU(Q,B):"string"==typeof Q?GU(Q,B):SU(Q.low,Q.high,"boolean"==typeof B?B:Q.unsigned)}gU.fromString=GU,gU.fromValue=LU;var xU=4294967296,yU=xU*xU,dU=yU/2,bU=cU(1<<24),VU=cU(0);gU.ZERO=VU;var NU=cU(0,!0);gU.UZERO=NU;var RU=cU(1);gU.ONE=RU;var AU=cU(1,!0);gU.UONE=AU;var DU=cU(-1);gU.NEG_ONE=DU;var mU=SU(-1,2147483647,!1);gU.MAX_VALUE=mU;var EU=SU(-1,-1,!0);gU.MAX_UNSIGNED_VALUE=EU;var JU=SU(0,-2147483648,!1);gU.MIN_VALUE=JU;var tU=gU.prototype;tU.toInt=function(){return this.unsigned?this.low>>>0:this.low},tU.toNumber=function(){return this.unsigned?(this.high>>>0)*xU+(this.low>>>0):this.high*xU+(this.low>>>0)},tU.toString=function(Q){if((Q=Q||10)<2||36<Q)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(JU)){var B=lU(Q),F=this.div(B),U=F.mul(B).sub(this);return F.toString(Q)+U.toInt().toString(Q)}return"-"+this.neg().toString(Q)}for(var g=lU(ZU(Q,6),this.unsigned),I=this,C="";;){var s=I.div(g),c=(I.sub(s.mul(g)).toInt()>>>0).toString(Q);if((I=s).isZero())return c+C;for(;c.length<6;)c="0"+c;C=""+c+C}},tU.getHighBits=function(){return this.high},tU.getHighBitsUnsigned=function(){return this.high>>>0},tU.getLowBits=function(){return this.low},tU.getLowBitsUnsigned=function(){return this.low>>>0},tU.getNumBitsAbs=function(){if(this.isNegative())return this.eq(JU)?64:this.neg().getNumBitsAbs();for(var Q=0!=this.high?this.high:this.low,B=31;B>0&&0==(Q&1<<B);B--);return 0!=this.high?B+33:B+1},tU.isZero=function(){return 0===this.high&&0===this.low},tU.eqz=tU.isZero,tU.isNegative=function(){return!this.unsigned&&this.high<0},tU.isPositive=function(){return this.unsigned||this.high>=0},tU.isOdd=function(){return 1==(1&this.low)},tU.isEven=function(){return 0==(1&this.low)},tU.equals=function(Q){return IU(Q)||(Q=LU(Q)),(this.unsigned===Q.unsigned||this.high>>>31!=1||Q.high>>>31!=1)&&(this.high===Q.high&&this.low===Q.low)},tU.eq=tU.equals,tU.notEquals=function(Q){return!this.eq(Q)},tU.neq=tU.notEquals,tU.ne=tU.notEquals,tU.lessThan=function(Q){return this.comp(Q)<0},tU.lt=tU.lessThan,tU.lessThanOrEqual=function(Q){return this.comp(Q)<=0},tU.lte=tU.lessThanOrEqual,tU.le=tU.lessThanOrEqual,tU.greaterThan=function(Q){return this.comp(Q)>0},tU.gt=tU.greaterThan,tU.greaterThanOrEqual=function(Q){return this.comp(Q)>=0},tU.gte=tU.greaterThanOrEqual,tU.ge=tU.greaterThanOrEqual,tU.compare=function(Q){if(IU(Q)||(Q=LU(Q)),this.eq(Q))return 0;var B=this.isNegative(),F=Q.isNegative();return B&&!F?-1:!B&&F?1:this.unsigned?Q.high>>>0>this.high>>>0||Q.high===this.high&&Q.low>>>0>this.low>>>0?-1:1:this.sub(Q).isNegative()?-1:1},tU.comp=tU.compare,tU.negate=function(){return!this.unsigned&&this.eq(JU)?JU:this.not().add(RU)},tU.neg=tU.negate,tU.add=function(Q){IU(Q)||(Q=LU(Q));var B=this.high>>>16,F=65535&this.high,U=this.low>>>16,g=65535&this.low,I=Q.high>>>16,C=65535&Q.high,s=Q.low>>>16,c=0,l=0,S=0,Z=0;return S+=(Z+=g+(65535&Q.low))>>>16,l+=(S+=U+s)>>>16,c+=(l+=F+C)>>>16,c+=B+I,SU((S&=65535)<<16|(Z&=65535),(c&=65535)<<16|(l&=65535),this.unsigned)},tU.subtract=function(Q){return IU(Q)||(Q=LU(Q)),this.add(Q.neg())},tU.sub=tU.subtract,tU.multiply=function(Q){if(this.isZero())return VU;if(IU(Q)||(Q=LU(Q)),UU)return SU(UU.mul(this.low,this.high,Q.low,Q.high),UU.get_high(),this.unsigned);if(Q.isZero())return VU;if(this.eq(JU))return Q.isOdd()?JU:VU;if(Q.eq(JU))return this.isOdd()?JU:VU;if(this.isNegative())return Q.isNegative()?this.neg().mul(Q.neg()):this.neg().mul(Q).neg();if(Q.isNegative())return this.mul(Q.neg()).neg();if(this.lt(bU)&&Q.lt(bU))return lU(this.toNumber()*Q.toNumber(),this.unsigned);var B=this.high>>>16,F=65535&this.high,U=this.low>>>16,g=65535&this.low,I=Q.high>>>16,C=65535&Q.high,s=Q.low>>>16,c=65535&Q.low,l=0,S=0,Z=0,G=0;return Z+=(G+=g*c)>>>16,S+=(Z+=U*c)>>>16,Z&=65535,S+=(Z+=g*s)>>>16,l+=(S+=F*c)>>>16,S&=65535,l+=(S+=U*s)>>>16,S&=65535,l+=(S+=g*C)>>>16,l+=B*c+F*s+U*C+g*I,SU((Z&=65535)<<16|(G&=65535),(l&=65535)<<16|(S&=65535),this.unsigned)},tU.mul=tU.multiply,tU.divide=function(Q){if(IU(Q)||(Q=LU(Q)),Q.isZero())throw Error("division by zero");var B,F,U;if(UU)return this.unsigned||-2147483648!==this.high||-1!==Q.low||-1!==Q.high?SU((this.unsigned?UU.div_u:UU.div_s)(this.low,this.high,Q.low,Q.high),UU.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?NU:VU;if(this.unsigned){if(Q.unsigned||(Q=Q.toUnsigned()),Q.gt(this))return NU;if(Q.gt(this.shru(1)))return AU;U=NU}else{if(this.eq(JU))return Q.eq(RU)||Q.eq(DU)?JU:Q.eq(JU)?RU:(B=this.shr(1).div(Q).shl(1)).eq(VU)?Q.isNegative()?RU:DU:(F=this.sub(Q.mul(B)),U=B.add(F.div(Q)));if(Q.eq(JU))return this.unsigned?NU:VU;if(this.isNegative())return Q.isNegative()?this.neg().div(Q.neg()):this.neg().div(Q).neg();if(Q.isNegative())return this.div(Q.neg()).neg();U=VU}for(F=this;F.gte(Q);){B=Math.max(1,Math.floor(F.toNumber()/Q.toNumber()));for(var g=Math.ceil(Math.log(B)/Math.LN2),I=g<=48?1:ZU(2,g-48),C=lU(B),s=C.mul(Q);s.isNegative()||s.gt(F);)s=(C=lU(B-=I,this.unsigned)).mul(Q);C.isZero()&&(C=RU),U=U.add(C),F=F.sub(s)}return U},tU.div=tU.divide,tU.modulo=function(Q){return IU(Q)||(Q=LU(Q)),UU?SU((this.unsigned?UU.rem_u:UU.rem_s)(this.low,this.high,Q.low,Q.high),UU.get_high(),this.unsigned):this.sub(this.div(Q).mul(Q))},tU.mod=tU.modulo,tU.rem=tU.modulo,tU.not=function(){return SU(~this.low,~this.high,this.unsigned)},tU.and=function(Q){return IU(Q)||(Q=LU(Q)),SU(this.low&Q.low,this.high&Q.high,this.unsigned)},tU.or=function(Q){return IU(Q)||(Q=LU(Q)),SU(this.low|Q.low,this.high|Q.high,this.unsigned)},tU.xor=function(Q){return IU(Q)||(Q=LU(Q)),SU(this.low^Q.low,this.high^Q.high,this.unsigned)},tU.shiftLeft=function(Q){return IU(Q)&&(Q=Q.toInt()),0==(Q&=63)?this:Q<32?SU(this.low<<Q,this.high<<Q|this.low>>>32-Q,this.unsigned):SU(0,this.low<<Q-32,this.unsigned)},tU.shl=tU.shiftLeft,tU.shiftRight=function(Q){return IU(Q)&&(Q=Q.toInt()),0==(Q&=63)?this:Q<32?SU(this.low>>>Q|this.high<<32-Q,this.high>>Q,this.unsigned):SU(this.high>>Q-32,this.high>=0?0:-1,this.unsigned)},tU.shr=tU.shiftRight,tU.shiftRightUnsigned=function(Q){if(IU(Q)&&(Q=Q.toInt()),0===(Q&=63))return this;var B=this.high;return Q<32?SU(this.low>>>Q|B<<32-Q,B>>>Q,this.unsigned):SU(32===Q?B:B>>>Q-32,0,this.unsigned)},tU.shru=tU.shiftRightUnsigned,tU.shr_u=tU.shiftRightUnsigned,tU.toSigned=function(){return this.unsigned?SU(this.low,this.high,!1):this},tU.toUnsigned=function(){return this.unsigned?this:SU(this.low,this.high,!0)},tU.toBytes=function(Q){return Q?this.toBytesLE():this.toBytesBE()},tU.toBytesLE=function(){var Q=this.high,B=this.low;return[255&B,B>>>8&255,B>>>16&255,B>>>24,255&Q,Q>>>8&255,Q>>>16&255,Q>>>24]},tU.toBytesBE=function(){var Q=this.high,B=this.low;return[Q>>>24,Q>>>16&255,Q>>>8&255,255&Q,B>>>24,B>>>16&255,B>>>8&255,255&B]},gU.fromBytes=function(Q,B,F){return F?gU.fromBytesLE(Q,B):gU.fromBytesBE(Q,B)},gU.fromBytesLE=function(Q,B){return new gU(Q[0]|Q[1]<<8|Q[2]<<16|Q[3]<<24,Q[4]|Q[5]<<8|Q[6]<<16|Q[7]<<24,B)},gU.fromBytesBE=function(Q,B){return new gU(Q[4]<<24|Q[5]<<16|Q[6]<<8|Q[7],Q[0]<<24|Q[1]<<16|Q[2]<<8|Q[3],B)};var iU={exports:{}};!function(Q){!function(B){var F,U=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,g=Math.ceil,I=Math.floor,C="[BigNumber Error] ",s=C+"Number primitive has more than 15 significant digits: ",c=1e14,l=14,S=9007199254740991,Z=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],G=1e7,L=1e9;function x(Q){var B=0|Q;return Q>0||Q===B?B:B-1}function y(Q){for(var B,F,U=1,g=Q.length,I=Q[0]+"";U<g;){for(B=Q[U++]+"",F=l-B.length;F--;B="0"+B);I+=B}for(g=I.length;48===I.charCodeAt(--g););return I.slice(0,g+1||1)}function d(Q,B){var F,U,g=Q.c,I=B.c,C=Q.s,s=B.s,c=Q.e,l=B.e;if(!C||!s)return null;if(F=g&&!g[0],U=I&&!I[0],F||U)return F?U?0:-s:C;if(C!=s)return C;if(F=C<0,U=c==l,!g||!I)return U?0:!g^F?1:-1;if(!U)return c>l^F?1:-1;for(s=(c=g.length)<(l=I.length)?c:l,C=0;C<s;C++)if(g[C]!=I[C])return g[C]>I[C]^F?1:-1;return c==l?0:c>l^F?1:-1}function b(Q,B,F,U){if(Q<B||Q>F||Q!==I(Q))throw Error(C+(U||"Argument")+("number"==typeof Q?Q<B||Q>F?" out of range: ":" not an integer: ":" not a primitive number: ")+String(Q))}function V(Q){var B=Q.c.length-1;return x(Q.e/l)==B&&Q.c[B]%2!=0}function N(Q,B){return(Q.length>1?Q.charAt(0)+"."+Q.slice(1):Q)+(B<0?"e":"e+")+B}function R(Q,B,F){var U,g;if(B<0){for(g=F+".";++B;g+=F);Q=g+Q}else if(++B>(U=Q.length)){for(g=F,B-=U;--B;g+=F);Q+=g}else B<U&&(Q=Q.slice(0,B)+"."+Q.slice(B));return Q}F=function Q(B){var F,A,D,m,E,J,t,i,X,n,u=v.prototype={constructor:v,toString:null,valueOf:null},H=new v(1),W=20,a=4,o=-7,h=21,Y=-1e7,e=1e7,k=!1,p=1,M=0,T={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},z="0123456789abcdefghijklmnopqrstuvwxyz",r=!0;function v(Q,B){var F,g,C,c,Z,G,L,x,y=this;if(!(y instanceof v))return new v(Q,B);if(null==B){if(Q&&!0===Q._isBigNumber)return y.s=Q.s,void(!Q.c||Q.e>e?y.c=y.e=null:Q.e<Y?y.c=[y.e=0]:(y.e=Q.e,y.c=Q.c.slice()));if((G="number"==typeof Q)&&0*Q==0){if(y.s=1/Q<0?(Q=-Q,-1):1,Q===~~Q){for(c=0,Z=Q;Z>=10;Z/=10,c++);return void(c>e?y.c=y.e=null:(y.e=c,y.c=[Q]))}x=String(Q)}else{if(!U.test(x=String(Q)))return D(y,x,G);y.s=45==x.charCodeAt(0)?(x=x.slice(1),-1):1}(c=x.indexOf("."))>-1&&(x=x.replace(".","")),(Z=x.search(/e/i))>0?(c<0&&(c=Z),c+=+x.slice(Z+1),x=x.substring(0,Z)):c<0&&(c=x.length)}else{if(b(B,2,z.length,"Base"),10==B&&r)return P(y=new v(Q),W+y.e+1,a);if(x=String(Q),G="number"==typeof Q){if(0*Q!=0)return D(y,x,G,B);if(y.s=1/Q<0?(x=x.slice(1),-1):1,v.DEBUG&&x.replace(/^0\.0*|\./,"").length>15)throw Error(s+Q)}else y.s=45===x.charCodeAt(0)?(x=x.slice(1),-1):1;for(F=z.slice(0,B),c=Z=0,L=x.length;Z<L;Z++)if(F.indexOf(g=x.charAt(Z))<0){if("."==g){if(Z>c){c=L;continue}}else if(!C&&(x==x.toUpperCase()&&(x=x.toLowerCase())||x==x.toLowerCase()&&(x=x.toUpperCase()))){C=!0,Z=-1,c=0;continue}return D(y,String(Q),G,B)}G=!1,(c=(x=A(x,B,10,y.s)).indexOf("."))>-1?x=x.replace(".",""):c=x.length}for(Z=0;48===x.charCodeAt(Z);Z++);for(L=x.length;48===x.charCodeAt(--L););if(x=x.slice(Z,++L)){if(L-=Z,G&&v.DEBUG&&L>15&&(Q>S||Q!==I(Q)))throw Error(s+y.s*Q);if((c=c-Z-1)>e)y.c=y.e=null;else if(c<Y)y.c=[y.e=0];else{if(y.e=c,y.c=[],Z=(c+1)%l,c<0&&(Z+=l),Z<L){for(Z&&y.c.push(+x.slice(0,Z)),L-=l;Z<L;)y.c.push(+x.slice(Z,Z+=l));Z=l-(x=x.slice(Z)).length}else Z-=L;for(;Z--;x+="0");y.c.push(+x)}}else y.c=[y.e=0]}function w(Q,B,F,U){var g,I,C,s,c;if(null==F?F=a:b(F,0,8),!Q.c)return Q.toString();if(g=Q.c[0],C=Q.e,null==B)c=y(Q.c),c=1==U||2==U&&(C<=o||C>=h)?N(c,C):R(c,C,"0");else if(I=(Q=P(new v(Q),B,F)).e,s=(c=y(Q.c)).length,1==U||2==U&&(B<=I||I<=o)){for(;s<B;c+="0",s++);c=N(c,I)}else if(B-=C,c=R(c,I,"0"),I+1>s){if(--B>0)for(c+=".";B--;c+="0");}else if((B+=I-s)>0)for(I+1==s&&(c+=".");B--;c+="0");return Q.s<0&&g?"-"+c:c}function K(Q,B){for(var F,U=1,g=new v(Q[0]);U<Q.length;U++){if(!(F=new v(Q[U])).s){g=F;break}B.call(g,F)&&(g=F)}return g}function O(Q,B,F){for(var U=1,g=B.length;!B[--g];B.pop());for(g=B[0];g>=10;g/=10,U++);return(F=U+F*l-1)>e?Q.c=Q.e=null:F<Y?Q.c=[Q.e=0]:(Q.e=F,Q.c=B),Q}function P(Q,B,F,U){var C,s,S,G,L,x,y,d=Q.c,b=Z;if(d){Q:{for(C=1,G=d[0];G>=10;G/=10,C++);if((s=B-C)<0)s+=l,S=B,y=(L=d[x=0])/b[C-S-1]%10|0;else if((x=g((s+1)/l))>=d.length){if(!U)break Q;for(;d.length<=x;d.push(0));L=y=0,C=1,S=(s%=l)-l+1}else{for(L=G=d[x],C=1;G>=10;G/=10,C++);y=(S=(s%=l)-l+C)<0?0:L/b[C-S-1]%10|0}if(U=U||B<0||null!=d[x+1]||(S<0?L:L%b[C-S-1]),U=F<4?(y||U)&&(0==F||F==(Q.s<0?3:2)):y>5||5==y&&(4==F||U||6==F&&(s>0?S>0?L/b[C-S]:0:d[x-1])%10&1||F==(Q.s<0?8:7)),B<1||!d[0])return d.length=0,U?(B-=Q.e+1,d[0]=b[(l-B%l)%l],Q.e=-B||0):d[0]=Q.e=0,Q;if(0==s?(d.length=x,G=1,x--):(d.length=x+1,G=b[l-s],d[x]=S>0?I(L/b[C-S]%b[S])*G:0),U)for(;;){if(0==x){for(s=1,S=d[0];S>=10;S/=10,s++);for(S=d[0]+=G,G=1;S>=10;S/=10,G++);s!=G&&(Q.e++,d[0]==c&&(d[0]=1));break}if(d[x]+=G,d[x]!=c)break;d[x--]=0,G=1}for(s=d.length;0===d[--s];d.pop());}Q.e>e?Q.c=Q.e=null:Q.e<Y&&(Q.c=[Q.e=0])}return Q}function f(Q){var B,F=Q.e;return null===F?Q.toString():(B=y(Q.c),B=F<=o||F>=h?N(B,F):R(B,F,"0"),Q.s<0?"-"+B:B)}return v.clone=Q,v.ROUND_UP=0,v.ROUND_DOWN=1,v.ROUND_CEIL=2,v.ROUND_FLOOR=3,v.ROUND_HALF_UP=4,v.ROUND_HALF_DOWN=5,v.ROUND_HALF_EVEN=6,v.ROUND_HALF_CEIL=7,v.ROUND_HALF_FLOOR=8,v.EUCLID=9,v.config=v.set=function(Q){var B,F;if(null!=Q){if("object"!=typeof Q)throw Error(C+"Object expected: "+Q);if(Q.hasOwnProperty(B="DECIMAL_PLACES")&&(b(F=Q[B],0,L,B),W=F),Q.hasOwnProperty(B="ROUNDING_MODE")&&(b(F=Q[B],0,8,B),a=F),Q.hasOwnProperty(B="EXPONENTIAL_AT")&&((F=Q[B])&&F.pop?(b(F[0],-L,0,B),b(F[1],0,L,B),o=F[0],h=F[1]):(b(F,-L,L,B),o=-(h=F<0?-F:F))),Q.hasOwnProperty(B="RANGE"))if((F=Q[B])&&F.pop)b(F[0],-L,-1,B),b(F[1],1,L,B),Y=F[0],e=F[1];else{if(b(F,-L,L,B),!F)throw Error(C+B+" cannot be zero: "+F);Y=-(e=F<0?-F:F)}if(Q.hasOwnProperty(B="CRYPTO")){if((F=Q[B])!==!!F)throw Error(C+B+" not true or false: "+F);if(F){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw k=!F,Error(C+"crypto unavailable");k=F}else k=F}if(Q.hasOwnProperty(B="MODULO_MODE")&&(b(F=Q[B],0,9,B),p=F),Q.hasOwnProperty(B="POW_PRECISION")&&(b(F=Q[B],0,L,B),M=F),Q.hasOwnProperty(B="FORMAT")){if("object"!=typeof(F=Q[B]))throw Error(C+B+" not an object: "+F);T=F}if(Q.hasOwnProperty(B="ALPHABET")){if("string"!=typeof(F=Q[B])||/^.?$|[+\-.\s]|(.).*\1/.test(F))throw Error(C+B+" invalid: "+F);r="0123456789"==F.slice(0,10),z=F}}return{DECIMAL_PLACES:W,ROUNDING_MODE:a,EXPONENTIAL_AT:[o,h],RANGE:[Y,e],CRYPTO:k,MODULO_MODE:p,POW_PRECISION:M,FORMAT:T,ALPHABET:z}},v.isBigNumber=function(Q){if(!Q||!0!==Q._isBigNumber)return!1;if(!v.DEBUG)return!0;var B,F,U=Q.c,g=Q.e,s=Q.s;Q:if("[object Array]"=={}.toString.call(U)){if((1===s||-1===s)&&g>=-L&&g<=L&&g===I(g)){if(0===U[0]){if(0===g&&1===U.length)return!0;break Q}if((B=(g+1)%l)<1&&(B+=l),String(U[0]).length==B){for(B=0;B<U.length;B++)if((F=U[B])<0||F>=c||F!==I(F))break Q;if(0!==F)return!0}}}else if(null===U&&null===g&&(null===s||1===s||-1===s))return!0;throw Error(C+"Invalid BigNumber: "+Q)},v.maximum=v.max=function(){return K(arguments,u.lt)},v.minimum=v.min=function(){return K(arguments,u.gt)},v.random=(m=9007199254740992,E=Math.random()*m&2097151?function(){return I(Math.random()*m)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(Q){var B,F,U,s,c,S=0,G=[],x=new v(H);if(null==Q?Q=W:b(Q,0,L),s=g(Q/l),k)if(crypto.getRandomValues){for(B=crypto.getRandomValues(new Uint32Array(s*=2));S<s;)(c=131072*B[S]+(B[S+1]>>>11))>=9e15?(F=crypto.getRandomValues(new Uint32Array(2)),B[S]=F[0],B[S+1]=F[1]):(G.push(c%1e14),S+=2);S=s/2}else{if(!crypto.randomBytes)throw k=!1,Error(C+"crypto unavailable");for(B=crypto.randomBytes(s*=7);S<s;)(c=281474976710656*(31&B[S])+1099511627776*B[S+1]+4294967296*B[S+2]+16777216*B[S+3]+(B[S+4]<<16)+(B[S+5]<<8)+B[S+6])>=9e15?crypto.randomBytes(7).copy(B,S):(G.push(c%1e14),S+=7);S=s/7}if(!k)for(;S<s;)(c=E())<9e15&&(G[S++]=c%1e14);for(s=G[--S],Q%=l,s&&Q&&(c=Z[l-Q],G[S]=I(s/c)*c);0===G[S];G.pop(),S--);if(S<0)G=[U=0];else{for(U=-1;0===G[0];G.splice(0,1),U-=l);for(S=1,c=G[0];c>=10;c/=10,S++);S<l&&(U-=l-S)}return x.e=U,x.c=G,x}),v.sum=function(){for(var Q=1,B=arguments,F=new v(B[0]);Q<B.length;)F=F.plus(B[Q++]);return F},A=function(){var Q="0123456789";function B(Q,B,F,U){for(var g,I,C=[0],s=0,c=Q.length;s<c;){for(I=C.length;I--;C[I]*=B);for(C[0]+=U.indexOf(Q.charAt(s++)),g=0;g<C.length;g++)C[g]>F-1&&(null==C[g+1]&&(C[g+1]=0),C[g+1]+=C[g]/F|0,C[g]%=F)}return C.reverse()}return function(U,g,I,C,s){var c,l,S,Z,G,L,x,d,b=U.indexOf("."),V=W,N=a;for(b>=0&&(Z=M,M=0,U=U.replace(".",""),L=(d=new v(g)).pow(U.length-b),M=Z,d.c=B(R(y(L.c),L.e,"0"),10,I,Q),d.e=d.c.length),S=Z=(x=B(U,g,I,s?(c=z,Q):(c=Q,z))).length;0==x[--Z];x.pop());if(!x[0])return c.charAt(0);if(b<0?--S:(L.c=x,L.e=S,L.s=C,x=(L=F(L,d,V,N,I)).c,G=L.r,S=L.e),b=x[l=S+V+1],Z=I/2,G=G||l<0||null!=x[l+1],G=N<4?(null!=b||G)&&(0==N||N==(L.s<0?3:2)):b>Z||b==Z&&(4==N||G||6==N&&1&x[l-1]||N==(L.s<0?8:7)),l<1||!x[0])U=G?R(c.charAt(1),-V,c.charAt(0)):c.charAt(0);else{if(x.length=l,G)for(--I;++x[--l]>I;)x[l]=0,l||(++S,x=[1].concat(x));for(Z=x.length;!x[--Z];);for(b=0,U="";b<=Z;U+=c.charAt(x[b++]));U=R(U,S,c.charAt(0))}return U}}(),F=function(){function Q(Q,B,F){var U,g,I,C,s=0,c=Q.length,l=B%G,S=B/G|0;for(Q=Q.slice();c--;)s=((g=l*(I=Q[c]%G)+(U=S*I+(C=Q[c]/G|0)*l)%G*G+s)/F|0)+(U/G|0)+S*C,Q[c]=g%F;return s&&(Q=[s].concat(Q)),Q}function B(Q,B,F,U){var g,I;if(F!=U)I=F>U?1:-1;else for(g=I=0;g<F;g++)if(Q[g]!=B[g]){I=Q[g]>B[g]?1:-1;break}return I}function F(Q,B,F,U){for(var g=0;F--;)Q[F]-=g,g=Q[F]<B[F]?1:0,Q[F]=g*U+Q[F]-B[F];for(;!Q[0]&&Q.length>1;Q.splice(0,1));}return function(U,g,C,s,S){var Z,G,L,y,d,b,V,N,R,A,D,m,E,J,t,i,X,n=U.s==g.s?1:-1,u=U.c,H=g.c;if(!(u&&u[0]&&H&&H[0]))return new v(U.s&&g.s&&(u?!H||u[0]!=H[0]:H)?u&&0==u[0]||!H?0*n:n/0:NaN);for(R=(N=new v(n)).c=[],n=C+(G=U.e-g.e)+1,S||(S=c,G=x(U.e/l)-x(g.e/l),n=n/l|0),L=0;H[L]==(u[L]||0);L++);if(H[L]>(u[L]||0)&&G--,n<0)R.push(1),y=!0;else{for(J=u.length,i=H.length,L=0,n+=2,(d=I(S/(H[0]+1)))>1&&(H=Q(H,d,S),u=Q(u,d,S),i=H.length,J=u.length),E=i,D=(A=u.slice(0,i)).length;D<i;A[D++]=0);X=H.slice(),X=[0].concat(X),t=H[0],H[1]>=S/2&&t++;do{if(d=0,(Z=B(H,A,i,D))<0){if(m=A[0],i!=D&&(m=m*S+(A[1]||0)),(d=I(m/t))>1)for(d>=S&&(d=S-1),V=(b=Q(H,d,S)).length,D=A.length;1==B(b,A,V,D);)d--,F(b,i<V?X:H,V,S),V=b.length,Z=1;else 0==d&&(Z=d=1),V=(b=H.slice()).length;if(V<D&&(b=[0].concat(b)),F(A,b,D,S),D=A.length,-1==Z)for(;B(H,A,i,D)<1;)d++,F(A,i<D?X:H,D,S),D=A.length}else 0===Z&&(d++,A=[0]);R[L++]=d,A[0]?A[D++]=u[E]||0:(A=[u[E]],D=1)}while((E++<J||null!=A[0])&&n--);y=null!=A[0],R[0]||R.splice(0,1)}if(S==c){for(L=1,n=R[0];n>=10;n/=10,L++);P(N,C+(N.e=L+G*l-1)+1,s,y)}else N.e=G,N.r=+y;return N}}(),J=/^(-?)0([xbo])(?=\w[\w.]*$)/i,t=/^([^.]+)\.$/,i=/^\.([^.]+)$/,X=/^-?(Infinity|NaN)$/,n=/^\s*\+(?=[\w.])|^\s+|\s+$/g,D=function(Q,B,F,U){var g,I=F?B:B.replace(n,"");if(X.test(I))Q.s=isNaN(I)?null:I<0?-1:1;else{if(!F&&(I=I.replace(J,(function(Q,B,F){return g="x"==(F=F.toLowerCase())?16:"b"==F?2:8,U&&U!=g?Q:B})),U&&(g=U,I=I.replace(t,"$1").replace(i,"0.$1")),B!=I))return new v(I,g);if(v.DEBUG)throw Error(C+"Not a"+(U?" base "+U:"")+" number: "+B);Q.s=null}Q.c=Q.e=null},u.absoluteValue=u.abs=function(){var Q=new v(this);return Q.s<0&&(Q.s=1),Q},u.comparedTo=function(Q,B){return d(this,new v(Q,B))},u.decimalPlaces=u.dp=function(Q,B){var F,U,g,I=this;if(null!=Q)return b(Q,0,L),null==B?B=a:b(B,0,8),P(new v(I),Q+I.e+1,B);if(!(F=I.c))return null;if(U=((g=F.length-1)-x(this.e/l))*l,g=F[g])for(;g%10==0;g/=10,U--);return U<0&&(U=0),U},u.dividedBy=u.div=function(Q,B){return F(this,new v(Q,B),W,a)},u.dividedToIntegerBy=u.idiv=function(Q,B){return F(this,new v(Q,B),0,1)},u.exponentiatedBy=u.pow=function(Q,B){var F,U,s,c,S,Z,G,L,x=this;if((Q=new v(Q)).c&&!Q.isInteger())throw Error(C+"Exponent not an integer: "+f(Q));if(null!=B&&(B=new v(B)),S=Q.e>14,!x.c||!x.c[0]||1==x.c[0]&&!x.e&&1==x.c.length||!Q.c||!Q.c[0])return L=new v(Math.pow(+f(x),S?2-V(Q):+f(Q))),B?L.mod(B):L;if(Z=Q.s<0,B){if(B.c?!B.c[0]:!B.s)return new v(NaN);(U=!Z&&x.isInteger()&&B.isInteger())&&(x=x.mod(B))}else{if(Q.e>9&&(x.e>0||x.e<-1||(0==x.e?x.c[0]>1||S&&x.c[1]>=24e7:x.c[0]<8e13||S&&x.c[0]<=9999975e7)))return c=x.s<0&&V(Q)?-0:0,x.e>-1&&(c=1/c),new v(Z?1/c:c);M&&(c=g(M/l+2))}for(S?(F=new v(.5),Z&&(Q.s=1),G=V(Q)):G=(s=Math.abs(+f(Q)))%2,L=new v(H);;){if(G){if(!(L=L.times(x)).c)break;c?L.c.length>c&&(L.c.length=c):U&&(L=L.mod(B))}if(s){if(0===(s=I(s/2)))break;G=s%2}else if(P(Q=Q.times(F),Q.e+1,1),Q.e>14)G=V(Q);else{if(0===(s=+f(Q)))break;G=s%2}x=x.times(x),c?x.c&&x.c.length>c&&(x.c.length=c):U&&(x=x.mod(B))}return U?L:(Z&&(L=H.div(L)),B?L.mod(B):c?P(L,M,a,undefined):L)},u.integerValue=function(Q){var B=new v(this);return null==Q?Q=a:b(Q,0,8),P(B,B.e+1,Q)},u.isEqualTo=u.eq=function(Q,B){return 0===d(this,new v(Q,B))},u.isFinite=function(){return!!this.c},u.isGreaterThan=u.gt=function(Q,B){return d(this,new v(Q,B))>0},u.isGreaterThanOrEqualTo=u.gte=function(Q,B){return 1===(B=d(this,new v(Q,B)))||0===B},u.isInteger=function(){return!!this.c&&x(this.e/l)>this.c.length-2},u.isLessThan=u.lt=function(Q,B){return d(this,new v(Q,B))<0},u.isLessThanOrEqualTo=u.lte=function(Q,B){return-1===(B=d(this,new v(Q,B)))||0===B},u.isNaN=function(){return!this.s},u.isNegative=function(){return this.s<0},u.isPositive=function(){return this.s>0},u.isZero=function(){return!!this.c&&0==this.c[0]},u.minus=function(Q,B){var F,U,g,I,C=this,s=C.s;if(B=(Q=new v(Q,B)).s,!s||!B)return new v(NaN);if(s!=B)return Q.s=-B,C.plus(Q);var S=C.e/l,Z=Q.e/l,G=C.c,L=Q.c;if(!S||!Z){if(!G||!L)return G?(Q.s=-B,Q):new v(L?C:NaN);if(!G[0]||!L[0])return L[0]?(Q.s=-B,Q):new v(G[0]?C:3==a?-0:0)}if(S=x(S),Z=x(Z),G=G.slice(),s=S-Z){for((I=s<0)?(s=-s,g=G):(Z=S,g=L),g.reverse(),B=s;B--;g.push(0));g.reverse()}else for(U=(I=(s=G.length)<(B=L.length))?s:B,s=B=0;B<U;B++)if(G[B]!=L[B]){I=G[B]<L[B];break}if(I&&(g=G,G=L,L=g,Q.s=-Q.s),(B=(U=L.length)-(F=G.length))>0)for(;B--;G[F++]=0);for(B=c-1;U>s;){if(G[--U]<L[U]){for(F=U;F&&!G[--F];G[F]=B);--G[F],G[U]+=c}G[U]-=L[U]}for(;0==G[0];G.splice(0,1),--Z);return G[0]?O(Q,G,Z):(Q.s=3==a?-1:1,Q.c=[Q.e=0],Q)},u.modulo=u.mod=function(Q,B){var U,g,I=this;return Q=new v(Q,B),!I.c||!Q.s||Q.c&&!Q.c[0]?new v(NaN):!Q.c||I.c&&!I.c[0]?new v(I):(9==p?(g=Q.s,Q.s=1,U=F(I,Q,0,3),Q.s=g,U.s*=g):U=F(I,Q,0,p),(Q=I.minus(U.times(Q))).c[0]||1!=p||(Q.s=I.s),Q)},u.multipliedBy=u.times=function(Q,B){var F,U,g,I,C,s,S,Z,L,y,d,b,V,N,R,A=this,D=A.c,m=(Q=new v(Q,B)).c;if(!(D&&m&&D[0]&&m[0]))return!A.s||!Q.s||D&&!D[0]&&!m||m&&!m[0]&&!D?Q.c=Q.e=Q.s=null:(Q.s*=A.s,D&&m?(Q.c=[0],Q.e=0):Q.c=Q.e=null),Q;for(U=x(A.e/l)+x(Q.e/l),Q.s*=A.s,(S=D.length)<(y=m.length)&&(V=D,D=m,m=V,g=S,S=y,y=g),g=S+y,V=[];g--;V.push(0));for(N=c,R=G,g=y;--g>=0;){for(F=0,d=m[g]%R,b=m[g]/R|0,I=g+(C=S);I>g;)F=((Z=d*(Z=D[--C]%R)+(s=b*Z+(L=D[C]/R|0)*d)%R*R+V[I]+F)/N|0)+(s/R|0)+b*L,V[I--]=Z%N;V[I]=F}return F?++U:V.splice(0,1),O(Q,V,U)},u.negated=function(){var Q=new v(this);return Q.s=-Q.s||null,Q},u.plus=function(Q,B){var F,U=this,g=U.s;if(B=(Q=new v(Q,B)).s,!g||!B)return new v(NaN);if(g!=B)return Q.s=-B,U.minus(Q);var I=U.e/l,C=Q.e/l,s=U.c,S=Q.c;if(!I||!C){if(!s||!S)return new v(g/0);if(!s[0]||!S[0])return S[0]?Q:new v(s[0]?U:0*g)}if(I=x(I),C=x(C),s=s.slice(),g=I-C){for(g>0?(C=I,F=S):(g=-g,F=s),F.reverse();g--;F.push(0));F.reverse()}for((g=s.length)-(B=S.length)<0&&(F=S,S=s,s=F,B=g),g=0;B;)g=(s[--B]=s[B]+S[B]+g)/c|0,s[B]=c===s[B]?0:s[B]%c;return g&&(s=[g].concat(s),++C),O(Q,s,C)},u.precision=u.sd=function(Q,B){var F,U,g,I=this;if(null!=Q&&Q!==!!Q)return b(Q,1,L),null==B?B=a:b(B,0,8),P(new v(I),Q,B);if(!(F=I.c))return null;if(U=(g=F.length-1)*l+1,g=F[g]){for(;g%10==0;g/=10,U--);for(g=F[0];g>=10;g/=10,U++);}return Q&&I.e+1>U&&(U=I.e+1),U},u.shiftedBy=function(Q){return b(Q,-9007199254740991,S),this.times("1e"+Q)},u.squareRoot=u.sqrt=function(){var Q,B,U,g,I,C=this,s=C.c,c=C.s,l=C.e,S=W+4,Z=new v("0.5");if(1!==c||!s||!s[0])return new v(!c||c<0&&(!s||s[0])?NaN:s?C:1/0);if(0==(c=Math.sqrt(+f(C)))||c==1/0?(((B=y(s)).length+l)%2==0&&(B+="0"),c=Math.sqrt(+B),l=x((l+1)/2)-(l<0||l%2),U=new v(B=c==1/0?"5e"+l:(B=c.toExponential()).slice(0,B.indexOf("e")+1)+l)):U=new v(c+""),U.c[0])for((c=(l=U.e)+S)<3&&(c=0);;)if(I=U,U=Z.times(I.plus(F(C,I,S,1))),y(I.c).slice(0,c)===(B=y(U.c)).slice(0,c)){if(U.e<l&&--c,"9999"!=(B=B.slice(c-3,c+1))&&(g||"4999"!=B)){+B&&(+B.slice(1)||"5"!=B.charAt(0))||(P(U,U.e+W+2,1),Q=!U.times(U).eq(C));break}if(!g&&(P(I,I.e+W+2,0),I.times(I).eq(C))){U=I;break}S+=4,c+=4,g=1}return P(U,U.e+W+1,a,Q)},u.toExponential=function(Q,B){return null!=Q&&(b(Q,0,L),Q++),w(this,Q,B,1)},u.toFixed=function(Q,B){return null!=Q&&(b(Q,0,L),Q=Q+this.e+1),w(this,Q,B)},u.toFormat=function(Q,B,F){var U,g=this;if(null==F)null!=Q&&B&&"object"==typeof B?(F=B,B=null):Q&&"object"==typeof Q?(F=Q,Q=B=null):F=T;else if("object"!=typeof F)throw Error(C+"Argument not an object: "+F);if(U=g.toFixed(Q,B),g.c){var I,s=U.split("."),c=+F.groupSize,l=+F.secondaryGroupSize,S=F.groupSeparator||"",Z=s[0],G=s[1],L=g.s<0,x=L?Z.slice(1):Z,y=x.length;if(l&&(I=c,c=l,l=I,y-=I),c>0&&y>0){for(I=y%c||c,Z=x.substr(0,I);I<y;I+=c)Z+=S+x.substr(I,c);l>0&&(Z+=S+x.slice(I)),L&&(Z="-"+Z)}U=G?Z+(F.decimalSeparator||"")+((l=+F.fractionGroupSize)?G.replace(new RegExp("\\d{"+l+"}\\B","g"),"$&"+(F.fractionGroupSeparator||"")):G):Z}return(F.prefix||"")+U+(F.suffix||"")},u.toFraction=function(Q){var B,U,g,I,s,c,S,G,L,x,d,b,V=this,N=V.c;if(null!=Q&&(!(S=new v(Q)).isInteger()&&(S.c||1!==S.s)||S.lt(H)))throw Error(C+"Argument "+(S.isInteger()?"out of range: ":"not an integer: ")+f(S));if(!N)return new v(V);for(B=new v(H),L=U=new v(H),g=G=new v(H),b=y(N),s=B.e=b.length-V.e-1,B.c[0]=Z[(c=s%l)<0?l+c:c],Q=!Q||S.comparedTo(B)>0?s>0?B:L:S,c=e,e=1/0,S=new v(b),G.c[0]=0;x=F(S,B,0,1),1!=(I=U.plus(x.times(g))).comparedTo(Q);)U=g,g=I,L=G.plus(x.times(I=L)),G=I,B=S.minus(x.times(I=B)),S=I;return I=F(Q.minus(U),g,0,1),G=G.plus(I.times(L)),U=U.plus(I.times(g)),G.s=L.s=V.s,d=F(L,g,s*=2,a).minus(V).abs().comparedTo(F(G,U,s,a).minus(V).abs())<1?[L,g]:[G,U],e=c,d},u.toNumber=function(){return+f(this)},u.toPrecision=function(Q,B){return null!=Q&&b(Q,1,L),w(this,Q,B,2)},u.toString=function(Q){var B,F=this,U=F.s,g=F.e;return null===g?U?(B="Infinity",U<0&&(B="-"+B)):B="NaN":(null==Q?B=g<=o||g>=h?N(y(F.c),g):R(y(F.c),g,"0"):10===Q&&r?B=R(y((F=P(new v(F),W+g+1,a)).c),F.e,"0"):(b(Q,2,z.length,"Base"),B=A(R(y(F.c),g,"0"),10,Q,U,!0)),U<0&&F.c[0]&&(B="-"+B)),B},u.valueOf=u.toJSON=function(){return f(this)},u._isBigNumber=!0,null!=B&&v.set(B),v}(),F.default=F.BigNumber=F,Q.exports?Q.exports=F:(B||(B="undefined"!=typeof self&&self?self:window),B.BigNumber=F)}(q)}(iU);var XU=iU.exports,nU={exports:{}},uU=nU.exports=function(Q){return new HU(Q)};function HU(Q){this.value=Q}function WU(Q,B,F){var U=[],g=[],I=!0;return function Q(C){var s=F?aU(C):C,c={},l=!0,S={node:s,node_:C,path:[].concat(U),parent:g[g.length-1],parents:g,key:U.slice(-1)[0],isRoot:0===U.length,level:U.length,circular:null,update:function(Q,B){S.isRoot||(S.parent.node[S.key]=Q),S.node=Q,B&&(l=!1)},delete:function(Q){delete S.parent.node[S.key],Q&&(l=!1)},remove:function(Q){YU(S.parent.node)?S.parent.node.splice(S.key,1):delete S.parent.node[S.key],Q&&(l=!1)},keys:null,before:function(Q){c.before=Q},after:function(Q){c.after=Q},pre:function(Q){c.pre=Q},post:function(Q){c.post=Q},stop:function(){I=!1},block:function(){l=!1}};if(!I)return S;function Z(){if("object"==typeof S.node&&null!==S.node){S.keys&&S.node_===S.node||(S.keys=oU(S.node)),S.isLeaf=0==S.keys.length;for(var Q=0;Q<g.length;Q++)if(g[Q].node_===C){S.circular=g[Q];break}}else S.isLeaf=!0,S.keys=null;S.notLeaf=!S.isLeaf,S.notRoot=!S.isRoot}Z();var G=B.call(S,S.node);return void 0!==G&&S.update&&S.update(G),c.before&&c.before.call(S,S.node),l?("object"!=typeof S.node||null===S.node||S.circular||(g.push(S),Z(),eU(S.keys,(function(B,g){U.push(B),c.pre&&c.pre.call(S,S.node[B],B);var I=Q(S.node[B]);F&&kU.call(S.node,B)&&(S.node[B]=I.node),I.isLast=g==S.keys.length-1,I.isFirst=0==g,c.post&&c.post.call(S,I),U.pop()})),g.pop()),c.after&&c.after.call(S,S.node),S):S}(Q).node}function aU(Q){if("object"==typeof Q&&null!==Q){var B;if(YU(Q))B=[];else if("[object Date]"===hU(Q))B=new Date(Q.getTime?Q.getTime():Q);else if(function(Q){return"[object RegExp]"===hU(Q)}(Q))B=new RegExp(Q);else if(function(Q){return"[object Error]"===hU(Q)}(Q))B={message:Q.message};else if(function(Q){return"[object Boolean]"===hU(Q)}(Q))B=new Boolean(Q);else if(function(Q){return"[object Number]"===hU(Q)}(Q))B=new Number(Q);else if(function(Q){return"[object String]"===hU(Q)}(Q))B=new String(Q);else if(Object.create&&Object.getPrototypeOf)B=Object.create(Object.getPrototypeOf(Q));else if(Q.constructor===Object)B={};else{var F=Q.constructor&&Q.constructor.prototype||Q.__proto__||{},U=function(){};U.prototype=F,B=new U}return eU(oU(Q),(function(F){B[F]=Q[F]})),B}return Q}HU.prototype.get=function(Q){for(var B=this.value,F=0;F<Q.length;F++){var U=Q[F];if(!B||!kU.call(B,U)){B=void 0;break}B=B[U]}return B},HU.prototype.has=function(Q){for(var B=this.value,F=0;F<Q.length;F++){var U=Q[F];if(!B||!kU.call(B,U))return!1;B=B[U]}return!0},HU.prototype.set=function(Q,B){for(var F=this.value,U=0;U<Q.length-1;U++){var g=Q[U];kU.call(F,g)||(F[g]={}),F=F[g]}return F[Q[U]]=B,B},HU.prototype.map=function(Q){return WU(this.value,Q,!0)},HU.prototype.forEach=function(Q){return this.value=WU(this.value,Q,!1),this.value},HU.prototype.reduce=function(Q,B){var F=1===arguments.length,U=F?this.value:B;return this.forEach((function(B){this.isRoot&&F||(U=Q.call(this,U,B))})),U},HU.prototype.paths=function(){var Q=[];return this.forEach((function(B){Q.push(this.path)})),Q},HU.prototype.nodes=function(){var Q=[];return this.forEach((function(B){Q.push(this.node)})),Q},HU.prototype.clone=function(){var Q=[],B=[];return function F(U){for(var g=0;g<Q.length;g++)if(Q[g]===U)return B[g];if("object"==typeof U&&null!==U){var I=aU(U);return Q.push(U),B.push(I),eU(oU(U),(function(Q){I[Q]=F(U[Q])})),Q.pop(),B.pop(),I}return U}(this.value)};var oU=Object.keys||function(Q){var B=[];for(var F in Q)B.push(F);return B};function hU(Q){return Object.prototype.toString.call(Q)}var YU=Array.isArray||function(Q){return"[object Array]"===Object.prototype.toString.call(Q)},eU=function(Q,B){if(Q.forEach)return Q.forEach(B);for(var F=0;F<Q.length;F++)B(Q[F],F,Q)};eU(oU(HU.prototype),(function(Q){uU[Q]=function(B){var F=[].slice.call(arguments,1),U=new HU(B);return U[Q].apply(U,F)}}));var kU=Object.hasOwnProperty||function(Q,B){return B in Q},pU=nU.exports,MU=function(){function Q(B,F){P(this,Q),this.session=B,this.id=F}var B,F;return j(Q,[{key:"log",get:function(){return this.session.log}},{key:"equals",value:function(B){return B instanceof Q?B.id.toString()===this.id.toString():this._equals(B)}},{key:"deleteEntity",value:function(Q){var B=this._getDeleteTransaction(Q);return this.executeAndReturnStatus(B)}},{key:"updateEntity",value:(F=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,this._getUpdateTransaction(B);case 2:return F=Q.sent,Q.abrupt("return",this.executeAndReturnStatus(F));case 4:case"end":return Q.stop()}}),Q,this)}))),function(Q){return F.apply(this,arguments)})},{key:"_equals",value:function(Q){return!1}},{key:"executeAndReturnStatus",value:(B=O(QQ.mark((function Q(B){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",this.session.execute(B,qI.Receipt,!1).then((function(Q){return Q.status})));case 1:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}]),Q}();function TU(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function zU(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?TU(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):TU(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function rU(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var vU=function(g){_F(C,MU);var I=rU(C);function C(){return P(this,C),I.apply(this,arguments)}return j(C,[{key:"getBalanceOfLiveEntity",value:function(){var B=this._getBalancePayload(),F=new Q(B);return this.session.execute(F,qI.Result,!1)}},{key:"transferHbarToLiveEntity",value:function(Q){var U=Q instanceof B?Q:new B(Q),g=(new F).addHbarTransfer(this.session.wallet.account.id,U.negated()).addHbarTransfer(this.id.toString(),U);return this.executeAndReturnStatus(g)}},{key:"associateTokensWithLiveEntity",value:function(Q){var B=(new U).setAccountId(this.id.toString()).setTokenIds(Q);return this.executeAndReturnStatus(B)}},{key:"_getDeleteTransaction",value:function(Q){return this.newDeleteTransaction(this._getDeleteArguments(Q))}},{key:"_getDeleteArguments",value:function(Q){var B=Q;return Q&&Q.has("transferAccountId")&&Q.has("transferContractId")||(B=zU(zU({},Q),{},{transferAccountId:this.session.wallet.account.id})),B}}]),C}();function wU(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}function KU(Q,B,F){return KU=wU()?Reflect.construct:function(Q,B,F){var U=[null];U.push.apply(U,B);var g=new(Function.bind.apply(Q,U));return F&&qF(g,F.prototype),g},KU.apply(null,arguments)}function OU(Q){var B="function"==typeof Map?new Map:void 0;return OU=function(Q){if(null===Q||(F=Q,-1===Function.toString.call(F).indexOf("[native code]")))return Q;var F;if("function"!=typeof Q)throw new TypeError("Super expression must either be null or a function");if(void 0!==B){if(B.has(Q))return B.get(Q);B.set(Q,U)}function U(){return KU(Q,arguments,BU(this).constructor)}return U.prototype=Object.create(Q.prototype,{constructor:{value:U,enumerable:!1,writable:!0,configurable:!0}}),qF(U,Q)},OU(Q)}var PU=function(){function Q(B){P(this,Q),this.paramType=B}return j(Q,[{key:"map",value:function(Q){var B=Q.prefix,F=void 0===B?"":B,U=this._geCanonicalTypeFor(this.paramType);return"".concat(F).concat(this._getFunctionParticleFor(U))}},{key:"_geCanonicalTypeFor",value:function(Q){return"int"===Q.type?"int256":"int[]"===Q.type?"int256[]":"uint"===Q.type?"uint256":"uint[]"===Q.type?"uint256[]":Q.type}},{key:"_getFunctionParticleFor",value:function(Q){var B,F=(B=Q).charAt(0).toUpperCase()+B.slice(1);return F.endsWith("[]")&&(F=F.replace("[]","Array")),F}}]),Q}();function fU(Q){return Q&&Q.getSolidityAddress&&"function"==typeof Q.getSolidityAddress}function jU(Q){var B=/^(?:0x)?([0-9a-fA-F]{40})$/g.exec(Q);return null!=B?B[1]:void 0}function qU(Q,B){return Array.isArray(Q)?Q.map((function(Q){return qU(Q,B)})):B(Q)}function _U(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var $U=function(Q){_F(I,g);var F,U=_U(I);function I(){return P(this,I),U.call(this)}return j(I,null,[{key:"newFor",value:(F=O(QQ.mark((function Q(F,U){var g,C,s,c,l,S;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(Array.isArray(U)){Q.next=4;break}throw new Qg("I need an array of args in order to construct the ContractFunctionParameters instance for.");case 4:if(F.inputs.length===U.length){Q.next=6;break}throw new Qg("The contract expects ".concat(F.inputs.length," arguments yet ").concat(U.length," were provided."));case 6:for(C in g=new I,U)s=F.inputs[C],c=new PU(s).map({prefix:"add"}),l=-1!==c.indexOf("64")||-1!==c.indexOf("256"),S=U[C],s.type.startsWith("address")?S=qU(S,(function(Q){return fU(Q)?Q.getSolidityAddress():Q})):!s.type.startsWith("bytes")||S instanceof Uint8Array?l&&(S=qU(S,(function(Q){return Q instanceof B?Q._valueInTinybar:Q instanceof XU?Q:new XU(Q)}))):S=qU(S,aQ),g[c](S);return Q.abrupt("return",g);case 9:case"end":return Q.stop()}}),Q)}))),function(Q,B){return F.apply(this,arguments)})}]),I}(),Qg=function(Q){_F(F,OU(Error));var B=_U(F);function F(Q){return P(this,F),B.call(this,Q)}return j(F)}();function Bg(Q,B){for(;!Object.prototype.hasOwnProperty.call(Q,B)&&null!==(Q=BU(Q)););return Q}function Fg(){return Fg="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(Q,B,F){var U=Bg(Q,B);if(U){var g=Object.getOwnPropertyDescriptor(U,B);return g.get?g.get.call(arguments.length<3?Q:F):g.value}},Fg.apply(this,arguments)}var Ug,gg=j((function Q(B){P(this,Q),this.name=B}));function Ig(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function Cg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}!function(Q){Q[Q.ECDSA=0]="ECDSA",Q[Q.ED25519=1]="ED25519",Q[Q.Unknown=2]="Unknown"}(Ug||(Ug={}));var sg=function(Q){_F(s,gg);var B,F,U,g=Cg(s);function s(Q){var B;return P(this,s),(B=g.call(this,"Account")).accountFeatures=function(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?Ig(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):Ig(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}({keyType:Ug.ED25519},Q),B}return j(s,[{key:"createVia",value:(U=O(QQ.mark((function Q(B){var F,U,g,I,c;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,this.key&&(U=Object.assign({},this.accountFeatures,{key:this.key})),Q.next=4,s.mapAccountFeaturesToAccountArguments(F,this.accountFeatures);case 4:return U=Q.sent,g=new C(U),Q.next=8,F.execute(g,qI.Receipt,!0);case 8:return I=Q.sent,c=I.accountId,Q.abrupt("return",new Zg({id:c,privateKey:U.key,session:F}));case 11:case"end":return Q.stop()}}),Q,this)}))),function(Q){return U.apply(this,arguments)})}],[{key:"mapAccountFeaturesToAccountArguments",value:(F=O(QQ.mark((function Q(B,F){var U;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(null===F.keyType){Q.next=5;break}return Q.next=3,s.considerGenerateKeyFromAccountFeatures(B.log,F);case 3:return U=Q.sent,Q.abrupt("return",Object.assign({},F,{key:U}));case 5:return Q.abrupt("return",F);case 6:case"end":return Q.stop()}}),Q)}))),function(Q,B){return F.apply(this,arguments)})},{key:"considerGenerateKeyFromAccountFeatures",value:(B=O(QQ.mark((function Q(B,F){var U,g,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(U=F.key,F.key){Q.next=15;break}if(g=F.keyType,C=g===Ug.ED25519?Ug[Ug.ED25519]:Ug[Ug.ECDSA],g!==Ug.ED25519){Q.next=10;break}return Q.next=7,I.generateED25519Async();case 7:Q.t0=Q.sent,Q.next=13;break;case 10:return Q.next=12,I.generateECDSAAsync();case 12:Q.t0=Q.sent;case 13:U=Q.t0,B.debug("A new '".concat(C,"' key has been created: ").concat(U.toStringDer()," . Copy it since this is only time you'll see it."));case 15:return Q.abrupt("return",U);case 16:case"end":return Q.stop()}}),Q)}))),function(Q,F){return B.apply(this,arguments)})}]),s}();function cg(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function lg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var Sg=function(Q){_F(U,vU);var B,F=lg(U);function U(Q){var B=Q.session,g=Q.id;return P(this,U),F.call(this,B,g)}return j(U,[{key:"getSolidityAddress",value:function(){return this.id.toSolidityAddress()}},{key:"getLiveEntityInfo",value:function(){var Q=(new s).setAccountId(this.id);return this.session.execute(Q,qI.Result,!1)}},{key:"newDeleteTransaction",value:function(Q){return new c(function(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?cg(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):cg(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}({accountId:this.id},Q))}},{key:"_getUpdateTransaction",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,sg.mapAccountFeaturesToAccountArguments(this.session,B);case 2:return F=Q.sent,Q.abrupt("return",new l(F));case 4:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"_getBalancePayload",value:function(){return{accountId:this.id}}}]),U}(),Zg=function(Q){_F(U,Sg);var B,F=lg(U);function U(Q){var B,g=Q.session,I=Q.id,C=Q.privateKey;return P(this,U),(B=F.call(this,{id:I,session:g})).privateKey=C,B}return j(U,[{key:"tryToSign",value:function(Q){var B=this.privateKey.signTransaction(Q);Q.addSignature(this.privateKey.publicKey,B)}},{key:"_getUpdateTransaction",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,Fg(BU(U.prototype),"_getUpdateTransaction",this).call(this,B);case 2:return F=Q.sent,this.tryToSign(F),Q.abrupt("return",F);case 5:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"_getDeleteTransaction",value:function(Q){var B=Fg(BU(U.prototype),"_getDeleteTransaction",this).call(this,Q);return this.tryToSign(B),B}}]),U}(),Gg=function(){function Q(B,F){P(this,Q),this.session=B,this.id=Q.getSolidityAddressMatchOrDieTryingFrom(F)}var B,F;return j(Q,[{key:"getSolidityAddress",value:function(){return this.id}},{key:"toLiveAccount",value:(F=O(QQ.mark((function Q(){var B;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return B=S.fromSolidityAddress(this.getSolidityAddress()),Q.abrupt("return",new Sg({id:B,session:this.session}));case 2:case"end":return Q.stop()}}),Q,this)}))),function(){return F.apply(this,arguments)})},{key:"toLiveContract",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=Z.fromSolidityAddress(this.getSolidityAddress()),Q.abrupt("return",new ng({cInterface:B,id:F,session:this.session}));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"equals",value:function(Q){return Q instanceof MU?Q.id.toString()===this.id.toString():"string"==typeof Q?jU(Q).toLocaleLowerCase()===this.id:Q instanceof S&&Q.toSolidityAddress()===this.id}}],[{key:"getSolidityAddressMatchOrDieTryingFrom",value:function(Q){var B=jU(Q);if(!B)throw new Error("The provided address '".concat(Q,"' does not appear to be a valid Solidity address."));return B.toLowerCase()}}]),Q}(),Lg={},xg={exports:{}};!function(Q){Q.exports=function(Q){return Q&&Q.__esModule?Q:{default:Q}},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(xg);var yg={exports:{}},dg={exports:{}},bg={exports:{}};!function(Q){Q.exports=function(Q,B){(null==B||B>Q.length)&&(B=Q.length);for(var F=0,U=new Array(B);F<B;F++)U[F]=Q[F];return U},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(bg),function(Q){var B=bg.exports;Q.exports=function(Q){if(Array.isArray(Q))return B(Q)},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(dg);var Vg={exports:{}};!function(Q){Q.exports=function(Q){if("undefined"!=typeof Symbol&&null!=Q[Symbol.iterator]||null!=Q["@@iterator"])return Array.from(Q)},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(Vg);var Ng={exports:{}};!function(Q){var B=bg.exports;Q.exports=function(Q,F){if(Q){if("string"==typeof Q)return B(Q,F);var U=Object.prototype.toString.call(Q).slice(8,-1);return"Object"===U&&Q.constructor&&(U=Q.constructor.name),"Map"===U||"Set"===U?Array.from(Q):"Arguments"===U||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(U)?B(Q,F):void 0}},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(Ng);var Rg={exports:{}};!function(Q){Q.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(Rg),function(Q){var B=dg.exports,F=Vg.exports,U=Ng.exports,g=Rg.exports;Q.exports=function(Q){return B(Q)||F(Q)||U(Q)||g()},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(yg);var Ag=xg.exports;Object.defineProperty(Lg,"__esModule",{value:!0});var Dg=Lg.encodeToHex=function(Q){var B=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],F=(0,mg.default)(Q).map((function(Q){return Q.toString(16).padStart(2,"0")})).join("");return B?"0x".concat(F):F},mg=Ag(yg.exports);function Eg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}function Jg(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function tg(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?Jg(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):Jg(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function ig(Q){return Q instanceof x}function Xg(Q,B){return B.map((function(B){var F=Dg(B.data),U=B.topics.map((function(Q){return Dg(Q)}));try{var g=Q.parseLog({data:F,topics:U}),I=Object.keys(g.args).filter((function(Q){return isNaN(Number(Q))})).map((function(Q){return w({},Q,g.args[Q])})).reduce((function(Q,B){return tg(tg({},Q),B)}),{});return{name:g.name,payload:I}}catch(Q){return null}})).filter((function(Q){return null!==Q}))}var ng=function(Q){_F(I,vU);var F,U,g=Eg(I);function I(Q){var B,F=Q.session,U=Q.id,C=Q.cInterface;return P(this,I),(B=g.call(this,F,U)).events=new BQ.exports.EventEmitter,B.interface=C,Object.values(B.interface.functions).forEach((function(Q){return Object.defineProperty(jF(B),Q.name,{enumerable:!0,value:function(){var Q=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l,S=arguments;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:for(F=S.length,U=new Array(F>1?F-1:0),g=1;g<F;g++)U[g-1]=S[g];return Q.next=3,this.createContractRequestFor({fDescription:B,args:U});case 3:return I=Q.sent,C=I.request,s=I.meta,c=!(C instanceof x)&&s.onlyReceipt?qI.Receipt:qI.Result,Q.next=10,this.session.execute(C,c,s.emitReceipt);case 10:if(l=Q.sent,c!=qI.Result){Q.next=16;break}return this.tryToProcessForEvents(l),Q.next=15,this.tryExtractingResponse(l,B);case 15:return Q.abrupt("return",Q.sent);case 16:return Q.abrupt("return",l);case 17:case"end":return Q.stop()}}),Q,this)})));return function(B){return Q.apply(this,arguments)}}().bind(jF(B),Q),writable:!1})})),B}return j(I,[{key:"getSolidityAddress",value:function(){return this.id.toSolidityAddress()}},{key:"onEvent",value:function(Q,B){if(!(void 0!==Object.values(this.interface.events).find((function(B){return B.name===Q})))&&"UnhandledEventName"!==Q)throw new Error("There is no such event named '".concat(Q,"' defined in this contract."));B?this.events.on(Q,B):this.events.removeAllListeners(Q)}},{key:"onUnhandledEvents",value:function(Q){this.onEvent("UnhandledEventName",Q)}},{key:"createContractRequestFor",value:(U=O(QQ.mark((function Q(F){var U,g,I,C,s,c,l;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return U=F.fDescription,g=F.args,I=!1,C={contractId:this.id,gas:this.session.defaults.contractTransactionGas},s={emitReceipt:this.session.defaults.emitLiveContractReceipts,onlyReceipt:this.session.defaults.onlyReceiptsFromContractRequests},g&&g.length>0&&(g[0].gas instanceof B&&(g[0].gas=g[0].gas.toTinybars()),(Number.isInteger(g[0].gas)||g[0].gas instanceof FU)&&(C.gas=g[0].gas,I=!0)),ig(c=U.constant?new x(C):new y(C))&&this.session.defaults.paymentForContractQuery>0&&(l=B.fromTinybars(this.session.defaults.paymentForContractQuery),c.setQueryPayment(l)),g&&g.length>0&&(ig(c)?(g[0].maxQueryPayment instanceof B&&(c.setMaxQueryPayment(g[0].maxQueryPayment),I=!0),g[0].paymentTransactionId instanceof d&&(c.setPaymentTransactionId(g[0].paymentTransactionId),I=!0),g[0].queryPayment instanceof B&&(c.setQueryPayment(g[0].queryPayment),I=!0)):(g[0].amount&&(c.setPayableAmount(g[0].amount),I=!0),g[0].maxTransactionFee&&(c.setMaxTransactionFee(g[0].maxTransactionFee),I=!0),Array.isArray(g[0].nodeAccountIds)&&(c.setNodeAccountIds(g[0].nodeAccountIds),I=!0),g[0].transactionId instanceof d&&(c.setTransactionId(g[0].transactionId),I=!0),g[0].transactionMemo&&(c.setTransactionMemo(g[0].transactionMemo),I=!0),Number.isInteger(g[0].transactionValidDuration)&&(c.setTransactionValidDuration(g[0].transactionValidDuration),I=!0))),g&&g.length>0&&(!1!==g[0].emitReceipt&&!0!==g[0].emitReceipt||(s.emitReceipt=g[0].emitReceipt,I=!0),!1!==g[0].onlyReceipt&&!0!==g[0].onlyReceipt||(s.onlyReceipt=g[0].onlyReceipt,I=!0)),I&&(g=g.slice(1)),Q.t0=c,Q.t1=U.name,Q.next=14,$U.newFor(U,g);case 14:return Q.t2=Q.sent,Q.t0.setFunction.call(Q.t0,Q.t1,Q.t2),Q.abrupt("return",{meta:s,request:c});case 17:case"end":return Q.stop()}}),Q,this)}))),function(Q){return U.apply(this,arguments)})},{key:"tryExtractingResponse",value:function(Q,B){var F,U=this,g=this.interface.decodeFunctionResult(B,Q.asBytes()),I=Object.keys(g).filter((function(Q){return isNaN(Number(Q))}));if(B.outputs&&0!==B.outputs.length){if(I.length===B.outputs.length){var C=function(Q){return function(Q){return B.outputs.find((function(B){return B.name===Q})).type.startsWith("bytes")}(Q)?aQ(g[Q]):g[Q]};F=I.map((function(Q){return w({},Q,C(Q))})).reduce((function(Q,B){return tg(tg({},Q),B)}),{})}else B.outputs.length>1?(F=fF(g),F=B.outputs.map((function(Q,B){return Q.type.startsWith("bytes")?aQ(F[B]):F[B]}))):F=g[0];var s=function(Q,B){var F=!1;return"string"==typeof Q&&void 0!==jU(Q)?(B(new Gg(U.session,Q),!0),F=!0):zQ.isBigNumber(Q)&&(B(new XU(Q.toString()),!1),F=!0),F};s(F,(function(Q){F=Q}))||pU(F).forEach((function(Q){s(Q,this.update)}))}return F}},{key:"tryToProcessForEvents",value:function(Q){var B=this;Xg(this.interface,Q.logs).forEach((function(Q){var F,U=Q.name,g=Q.payload;if(0===B.events.listenerCount(U)){if(0===B.events.listenerCount("UnhandledEventName"))return;F="UnhandledEventName"}else F=U;try{B.events.emit(F,g)}catch(Q){throw new Error("The event-emitter handle '".concat(U,"' failed to execute with the following reason: ").concat(Q.message))}}))}},{key:"getLiveEntityInfo",value:function(){var Q=(new G).setContractId(this.id);return this.session.execute(Q,qI.Result,!1)}},{key:"newDeleteTransaction",value:function(Q){return new L(tg({contractId:this.id},Q))}},{key:"_getUpdateTransaction",value:function(Q){throw new Error("Method not implemented.")}},{key:"_getBalancePayload",value:function(){return{contractId:this.id}}}],[{key:"newFollowingUpload",value:(F=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(F=B.session,U=B.contract,g=B.emitConstructorLogs,I=B.transaction,!g){Q.next=9;break}return Q.next=4,F.execute(I,qI.Record,!0);case 4:c=Q.sent,C=c.receipt.contractId,s=Xg(U.interface,c.contractFunctionResult.logs),Q.next=14;break;case 9:return Q.next=11,F.execute(I,qI.Receipt,!0);case 11:l=Q.sent,C=l.contractId,s=[];case 14:return Q.abrupt("return",new ug({cInterface:U.interface,id:C,logs:s,session:F}));case 15:case"end":return Q.stop()}}),Q)}))),function(Q){return F.apply(this,arguments)})}]),I}(),ug=function(Q){_F(F,ng);var B=Eg(F);function F(Q){var U,g=Q.session,I=Q.id,C=Q.cInterface,s=Q.logs;return P(this,F),(U=B.call(this,{cInterface:C,id:I,session:g})).liveContract=jF(U),U.logs=s,U}return j(F)}(),Hg={};Object.defineProperty(Hg,"__esModule",{value:!0});var Wg=Hg.config=function(){return{parsed:void 0}};function ag(Q,B){return function(Q){if(Array.isArray(Q))return Q}(Q)||function(Q,B){var F=null==Q?null:"undefined"!=typeof Symbol&&Q[Symbol.iterator]||Q["@@iterator"];if(null!=F){var U,g,I=[],C=!0,s=!1;try{for(F=F.call(Q);!(C=(U=F.next()).done)&&(I.push(U.value),!B||I.length!==B);C=!0);}catch(Q){s=!0,g=Q}finally{try{C||null==F.return||F.return()}finally{if(s)throw g}}return I}}(Q,B)||PF(Q,B)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function og(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var hg=function(Q){_F(F,OU(Error));var B=og(F);function F(Q){return P(this,F),B.call(this,Q)}return j(F)}();function Yg(Q,B){var F="undefined"!=typeof Symbol&&Q[Symbol.iterator]||Q["@@iterator"];if(!F){if(Array.isArray(Q)||(F=function(Q,B){if(!Q)return;if("string"==typeof Q)return eg(Q,B);var F=Object.prototype.toString.call(Q).slice(8,-1);"Object"===F&&Q.constructor&&(F=Q.constructor.name);if("Map"===F||"Set"===F)return Array.from(Q);if("Arguments"===F||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(F))return eg(Q,B)}(Q))||B&&Q&&"number"==typeof Q.length){F&&(Q=F);var U=0,g=function(){};return{s:g,n:function(){return U>=Q.length?{done:!0}:{done:!1,value:Q[U++]}},e:function(Q){throw Q},f:g}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var I,C=!0,s=!1;return{s:function(){F=F.call(Q)},n:function(){var Q=F.next();return C=Q.done,Q},e:function(Q){s=!0,I=Q},f:function(){try{C||null==F.return||F.return()}finally{if(s)throw I}}}}function eg(Q,B){(null==B||B>Q.length)&&(B=Q.length);for(var F=0,U=new Array(B);F<B;F++)U[F]=Q[F];return U}var kg="customnet",pg={CustomNet:"customnet",MainNet:"mainnet",PreviewNet:"previewnet",TestNet:"testnet"},Mg=function(){function Q(B,F,U){P(this,Q),this.defaults=B,this.name=F,this.nodesInfo=U,this.nodes="string"==typeof U?this.parseNetworkAddressBookFrom(U):U;var g=Object.values(pg);if(!g.includes(this.name))throw new hg("There is no such '".concat(this.name,"' network available. In order to continue, please choose a valid name from: ").concat(g.join(", ")));try{b.forName(this.name)}catch(Q){if("customnet"!==this.name)throw new hg("There is no such ".concat(this.name," network available in this library. Available network names to choose from are: ").concat(g.join(", ")));if(!this.nodes||0===Object.keys(this.nodes).length)throw new hg("Please provide a list of network nodes in order to use a ".concat(this.name," network."))}}return j(Q,[{key:"getClient",value:function(){return"customnet"===this.name?b.forNetwork(this.nodes):b.forName(this.name).setMaxNodesPerTransaction(1)}},{key:"parseNetworkAddressBookFrom",value:function(Q){var B={};if(Q){var F,U=Yg(Q.split(/\s*,\s*/).map((function(Q){if(-1===Q.indexOf("#"))throw new hg("Node definition entry '".concat(Q,"' is missing the account-id separator (#)"));var B=ag(Q.split("#"),2),F=B[0],U=B[1],g=parseInt(U);return w({},F,new S(g))})));try{for(U.s();!(F=U.n()).done;){var g=F.value,I=Object.keys(g)[0];B[I]=g[I]}}catch(Q){U.e(Q)}finally{U.f()}}return B}}],[{key:"newFrom",value:function(B){return new Q(B.defaults,B.name,B.nodes)}}]),Q}();function Tg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var zg=function(){function Q(B){P(this,Q),this.ctx=B,this.setNetwork(B.network)}return j(Q,[{key:"setNetwork",value:function(Q){return this.network=Q,this}},{key:"buildFor",value:function(Q){return this.sanityCheck(),this._buildCold(Q)}},{key:"sanityCheck",value:function(){if(!this.network)throw new Error("Please first provide a HederaNetwork to the WalletProvider in order to build a new Wallet.")}}]),Q}(),rg=function(Q){_F(F,zg);var B=Tg(F);function F(Q,U){throw P(this,F),B.call(this,Q),new Error("You're trying to create a wallet-provider for a not-supported wallet-type. Something went wrong since you most likely would not want to ever do that.")}return j(F,[{key:"_buildCold",value:function(Q){return Promise.resolve()}}]),F}(),vg=function(){function Q(B){P(this,Q),this.wallet=B,this.signer=B}var B;return j(Q,[{key:"account",get:function(){return{id:this.wallet.getAccountId(),publicKey:this.wallet.getAccountKey()}}},{key:"execute",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.next=2,B.executeWithSigner(this.wallet);case 2:return F=Q.sent,Q.abrupt("return",F);case 4:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"getReceipt",value:function(Q){return this.wallet.getProvider().getTransactionReceipt(Q.transactionId)}}]),Q}();function wg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var Kg=function(Q){_F(U,zg);var B,F=wg(U);function U(Q,B){var g;return P(this,U),(g=F.call(this,Q)).controller=B,g}return j(U,[{key:"_buildCold",value:(B=O(QQ.mark((function Q(B){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",new Og(this.controller,B.propName));case 1:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}]),U}(),Og=function(Q){_F(F,vg);var B=wg(F);function F(Q,U){return P(this,F),B.call(this,window[U])}return j(F)}();function Pg(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var fg=function(Q){_F(F,OU(Error));var B=Pg(F);function F(Q){return P(this,F),B.call(this,Q)}return j(F)}();function jg(Q,B){var F="undefined"!=typeof Symbol&&Q[Symbol.iterator]||Q["@@iterator"];if(!F){if(Array.isArray(Q)||(F=function(Q,B){if(!Q)return;if("string"==typeof Q)return qg(Q,B);var F=Object.prototype.toString.call(Q).slice(8,-1);"Object"===F&&Q.constructor&&(F=Q.constructor.name);if("Map"===F||"Set"===F)return Array.from(Q);if("Arguments"===F||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(F))return qg(Q,B)}(Q))||B&&Q&&"number"==typeof Q.length){F&&(Q=F);var U=0,g=function(){};return{s:g,n:function(){return U>=Q.length?{done:!0}:{done:!1,value:Q[U++]}},e:function(Q){throw Q},f:g}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var I,C=!0,s=!1;return{s:function(){F=F.call(Q)},n:function(){var Q=F.next();return C=Q.done,Q},e:function(Q){s=!0,I=Q},f:function(){try{C||null==F.return||F.return()}finally{if(s)throw I}}}}function qg(Q,B){(null==B||B>Q.length)&&(B=Q.length);for(var F=0,U=new Array(B);F<B;F++)U[F]=Q[F];return U}function _g(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var $g=function(B){_F(g,N);var F,U=_g(g);function g(Q,B,F){var I;return P(this,g),(I=U.call(this)).accountId=B,I.client=Q.getClient(),I.publicKey=F.publicKey,I.client.setOperator(B,F),I.signer=function(Q){return Promise.resolve(F.sign(Q))},I}return j(g,[{key:"getProvider",value:function(){var Q,B=this;return{getTransactionReceipt:(Q=O(QQ.mark((function Q(F){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",(new R).setTransactionId(F).execute(B.client));case 1:case"end":return Q.stop()}}),Q)}))),function(B){return Q.apply(this,arguments)})}}},{key:"getAccountKey",value:function(){return this.publicKey}},{key:"getLedgerId",value:function(){return this.client.ledgerId}},{key:"getAccountId",value:function(){return this.accountId}},{key:"getNetwork",value:function(){return this.client.network}},{key:"getMirrorNetwork",value:function(){return this.client.mirrorNetwork}},{key:"sign",value:(F=O(QQ.mark((function Q(B){var F,U,g,I;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:F=[],U=jg(B),Q.prev=2,U.s();case 4:if((g=U.n()).done){Q.next=18;break}return I=g.value,Q.t0=F,Q.t1=A,Q.t2=this.accountId,Q.t3=this.publicKey,Q.next=12,this.signer(I);case 12:Q.t4=Q.sent,Q.t5={accountId:Q.t2,publicKey:Q.t3,signature:Q.t4},Q.t6=new Q.t1(Q.t5),Q.t0.push.call(Q.t0,Q.t6);case 16:Q.next=4;break;case 18:Q.next=23;break;case 20:Q.prev=20,Q.t7=Q.catch(2),U.e(Q.t7);case 23:return Q.prev=23,U.f(),Q.finish(23);case 26:return Q.abrupt("return",F);case 27:case"end":return Q.stop()}}),Q,this,[[2,20,23,26]])}))),function(Q){return F.apply(this,arguments)})},{key:"getAccountBalance",value:function(){return(new Q).setAccountId(this.accountId).execute(this.client)}},{key:"getAccountInfo",value:function(){return(new s).setAccountId(this.accountId).execute(this.client)}},{key:"getAccountRecords",value:function(){return(new V).setAccountId(this.accountId).execute(this.client)}},{key:"signTransaction",value:function(Q){return Q.signWith(this.publicKey,this.signer)}},{key:"checkTransaction",value:function(Q){var B=Q.transactionId;if(null!=B.accountId&&0!=B.accountId.compare(this.accountId))throw new Error("transaction's ID constructed with a different account ID");var F=(null!=Q.nodeAccountIds?Q.nodeAccountIds:[]).map((function(Q){return Q.toString()})),U=Object.values(this.getNetwork()).map((function(Q){return Q.toString()}));if(!F.reduce((function(Q,B){return Q&&U.includes(B)}),!0))throw new Error("Transaction already set node account IDs to values not within the current network");return Promise.resolve(Q)}},{key:"populateTransaction",value:function(Q){return Q.setTransactionId(d.generate(this.accountId)),Q.setNodeAccountIds(this.client._network.getNodeAccountIdsForExecute()),Promise.resolve(Q.freeze())}},{key:"sendRequest",value:function(Q){return Q.execute(this.client)}}]),g}();function QI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var BI=function(Q){_F(g,zg);var B,F,U=QI(g);function g(Q,B){var F;return P(this,g),(F=U.call(this,Q)).controller=B,F}return j(g,[{key:"buildOperatedBy",value:(F=O(QQ.mark((function Q(B,F){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return this.sanityCheck(),Q.abrupt("return",new FI(this.controller,this.ctx.network,"string"==typeof B?S.fromString(B):B,"string"==typeof F?I.fromString(F):F));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q,B){return F.apply(this,arguments)})},{key:"_buildCold",value:(B=O(QQ.mark((function Q(B){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",this.buildOperatedBy(B.accountId,B.privateKey));case 1:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}]),g}(),FI=function(Q){_F(F,vg);var B=QI(F);function F(Q,U,g,C){var s;return P(this,F),(s=B.call(this,new $g(U,g,C))).network=U,s.operatorId=g,s.operatorKey=C,Q.onAccountChanged((function(Q){s.operatorKey=I.fromString(Q.operatorKey),s.wallet=new $g(U,S.fromString(Q.operatorId),I.fromString(Q.operatorKey)),s.operatorId=s.wallet.getAccountId()})),Q.onNetworkChanged((function(Q){s.network=Q,s.wallet=new $g(Q,s.wallet.getAccountId(),C)})),s}return j(F)}();function UI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var gI=function(){function Q(B,F,U){P(this,Q),this.events=B,this.eventName=F,this.clb=U,B.on(F,U)}return j(Q,[{key:"unsubscribe",value:function(){this.events.off(this.eventName,this.clb)}}]),Q}(),II=new(function(Q){_F(F,gI);var B=UI(F);function F(){return P(this,F),B.call(this,new BQ.exports.EventEmitter,"NeverFiringSubscription",(function(Q){}))}return j(F)}()),CI=function(){function Q(B){P(this,Q),this.ctx=B,this.pubSub=new BQ.exports.EventEmitter}return j(Q,[{key:"changeAccount",value:function(B){for(var F=arguments.length,U=new Array(F>1?F-1:0),g=1;g<F;g++)U[g-1]=arguments[g];var I=this.getAccountPayload.apply(this,[B].concat(U));this.pubSub.emit(Q.ACCOUNT_CHANGE_REQUESTED,I)}},{key:"changeNetwork",value:function(B){this.pubSub.emit(Q.NETWORK_CHANGE_REQUESTED,B)}},{key:"onAccountChanged",value:function(B){return new gI(this.pubSub,Q.ACCOUNT_CHANGE_REQUESTED,B)}},{key:"onNetworkChanged",value:function(B){return new gI(this.pubSub,Q.NETWORK_CHANGE_REQUESTED,B)}}]),Q}();function sI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}w(CI,"NETWORK_CHANGE_REQUESTED","NETWORK_CHANGE_REQUESTED"),w(CI,"ACCOUNT_CHANGE_REQUESTED","ACCOUNT_CHANGE_REQUESTED");var cI=function(Q){_F(F,CI);var B=sI(F);function F(Q){return P(this,F),B.call(this,Q)}return j(F,[{key:"getAccountPayload",value:function(Q){if(0==(arguments.length<=1?0:arguments.length-1))throw new Error("The private-key must also be provided in order to switch the account.");try{var B=(arguments.length<=1?void 0:arguments[1])instanceof I?arguments.length<=1?void 0:arguments[1]:I.fromString(arguments.length<=1?void 0:arguments[1]);return{operatorId:Q instanceof S?Q.toString():Q,operatorKey:B.toStringDer()}}catch(Q){throw new Error("The provided key is not in a valid format. Cannot change account.")}}}]),F}(),lI=function(){function Q(){P(this,Q)}return j(Q,[{key:"changeAccount",value:function(Q){throw new Error("This WalletController cannot change the account of the underlying wallet.")}},{key:"changeNetwork",value:function(Q){throw new Error("This WalletController cannot change the network of the underlying wallet.")}},{key:"onAccountChanged",value:function(Q){return II}},{key:"onNetworkChanged",value:function(Q){return II}}]),Q}(),SI={},ZI=function(){function Q(B,F){var U=arguments.length>2&&void 0!==arguments[2]?arguments[2]:lI,g=arguments.length>3&&void 0!==arguments[3]?arguments[3]:rg,I=arguments.length>4?arguments[4]:void 0;if(P(this,Q),this.name=F,this.defaultController=U,this.providerHaving=g,this.computeColdStartOptionsFrom=I,B!==SI)throw new Error("Wallet types cannot be defined from outside this module!")}return j(Q,[{key:"equals",value:function(B){return B instanceof Q&&this.name===B.name}}]),Q}(),GI=function(){function Q(){P(this,Q),w(this,"unknownWalletType",new ZI(SI,"Unknown")),this.knownWalletTypes=[new ZI(SI,"Sdk",cI,BI,(function(Q){try{return{accountId:S.fromString(Q.wallet.sdk.operatorId),privateKey:I.fromString(Q.wallet.sdk.operatorKey)}}catch(Q){throw new fg(Q.message)}})),new ZI(SI,"Browser",lI,Kg,(function(Q){return{propName:Q.wallet.window.propName}}))]}return j(Q,[{key:"isKnown",value:function(Q){return!this.Unknown.equals(Q)}},{key:"Unknown",get:function(){return this.unknownWalletType}},{key:"getBy",value:function(Q){var B=Q.name,F=this.knownWalletTypes.filter((function(Q){return Q.name===B}));return 0===F.length?this.Unknown:F[0]}}]),Q}(),LI={},xI={exports:{}};!function(Q){Q.exports=function(Q,B){if(!(Q instanceof B))throw new TypeError("Cannot call a class as a function")},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(xI);var yI={exports:{}};!function(Q){function B(Q,B){for(var F=0;F<B.length;F++){var U=B[F];U.enumerable=U.enumerable||!1,U.configurable=!0,"value"in U&&(U.writable=!0),Object.defineProperty(Q,U.key,U)}}Q.exports=function(Q,F,U){return F&&B(Q.prototype,F),U&&B(Q,U),Object.defineProperty(Q,"prototype",{writable:!1}),Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(yI);var dI={exports:{}},bI={exports:{}};!function(Q){function B(F,U){return Q.exports=B=Object.setPrototypeOf||function(Q,B){return Q.__proto__=B,Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports,B(F,U)}Q.exports=B,Q.exports.__esModule=!0,Q.exports.default=Q.exports}(bI),function(Q){var B=bI.exports;Q.exports=function(Q,F){if("function"!=typeof F&&null!==F)throw new TypeError("Super expression must either be null or a function");Q.prototype=Object.create(F&&F.prototype,{constructor:{value:Q,writable:!0,configurable:!0}}),Object.defineProperty(Q,"prototype",{writable:!1}),F&&B(Q,F)},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(dI);var VI={exports:{}},NI={exports:{}};!function(Q){function B(F){return Q.exports=B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(Q){return typeof Q}:function(Q){return Q&&"function"==typeof Symbol&&Q.constructor===Symbol&&Q!==Symbol.prototype?"symbol":typeof Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports,B(F)}Q.exports=B,Q.exports.__esModule=!0,Q.exports.default=Q.exports}(NI);var RI={exports:{}};!function(Q){Q.exports=function(Q){if(void 0===Q)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(RI),function(Q){var B=NI.exports.default,F=RI.exports;Q.exports=function(Q,U){if(U&&("object"===B(U)||"function"==typeof U))return U;if(void 0!==U)throw new TypeError("Derived constructors may only return object or undefined");return F(Q)},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(VI);var AI={exports:{}};!function(Q){function B(F){return Q.exports=B=Object.setPrototypeOf?Object.getPrototypeOf:function(Q){return Q.__proto__||Object.getPrototypeOf(Q)},Q.exports.__esModule=!0,Q.exports.default=Q.exports,B(F)}Q.exports=B,Q.exports.__esModule=!0,Q.exports.default=Q.exports}(AI);var DI=xg.exports;Object.defineProperty(LI,"__esModule",{value:!0});var mI=LI.StratoLogger=void 0,EI=DI(xI.exports),JI=DI(yI.exports),tI=DI(dI.exports),iI=DI(VI.exports),XI=DI(AI.exports),nI=DI(BQ.exports);function uI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=(0,XI.default)(Q);if(B){var g=(0,XI.default)(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return(0,iI.default)(this,F)}}var HI={error:0,warn:1,info:2,http:3,verbose:4,debug:5,silly:6},WI=function(Q){(0,tI.default)(F,Q);var B=uI(F);function F(Q){var U;return(0,EI.default)(this,F),(U=B.call(this)).level=HI[Q.level],U.isLoggingEnabled=Q.enabled,U}return(0,JI.default)(F,[{key:"isSillyLoggingEnabled",get:function(){return this._isLevelEnabled(HI.silly)}},{key:"debug",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.debug)&&this.emit.apply(this,["debug",Q].concat(F)),this}},{key:"error",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.error)&&this.emit.apply(this,["error",Q].concat(F)),this}},{key:"info",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.info)&&this.emit.apply(this,["info",Q].concat(F)),this}},{key:"silly",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.silly)&&this.emit.apply(this,["debug",Q].concat(F)),this}},{key:"verbose",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.verbose)&&this.emit.apply(this,["debug",Q].concat(F)),this}},{key:"warn",value:function(Q){for(var B=arguments.length,F=new Array(B>1?B-1:0),U=1;U<B;U++)F[U-1]=arguments[U];return this._isLevelEnabled(HI.warn)&&this.emit.apply(this,["warn",Q].concat(F)),this}},{key:"_isLevelEnabled",value:function(Q){return this.isLoggingEnabled&&this.level>=Q}}]),F}(nI.default);function aI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}mI=LI.StratoLogger=WI;var oI,hI=function(Q){_F(F,cI);var B=aI(F);function F(Q){return P(this,F),B.call(this,Q)}return j(F,[{key:"getAccountPayload",value:function(Q){return Fg(BU(F.prototype),"getAccountPayload",this).call(this,Q,this.ctx.params.wallet.controller.default.operatorKey)}}]),F}(),YI=function(){function Q(B){P(this,Q),this.impotentController=new lI,this.knownControllers=[{name:"Hedera",value:new cI(B)},{name:"DefaultPrivateKey",value:new hI(B)}]}return j(Q,[{key:"Unknown",get:function(){return this.impotentController}},{key:"getBy",value:function(Q){var B=Q.name,F=this.knownControllers.filter((function(Q){return Q.name===B}));return 0===F.length?this.Unknown:F[0].value}}]),Q}(),eI=(w(oI={},pg.CustomNet,{fileChunkSize:1024}),w(oI,pg.MainNet,{fileChunkSize:1024}),w(oI,pg.TestNet,{fileChunkSize:1024}),w(oI,pg.PreviewNet,{fileChunkSize:1024}),oI),kI=function(){function Q(B){var F,U,g,I,C,s,c,l,S,Z,G,L,x,y,d,b;P(this,Q);var V=Wg({path:B.path}).parsed,N={},R=null!==(F=null==B?void 0:B.params)&&void 0!==F?F:{};V||(V={HEDERAS_NETWORK:"testnet",HEDERAS_OPERATOR_ID:"0.0.2908307",HEDERAS_OPERATOR_KEY:"302e020100300506032b657004220420261b8e33bc1c3258ce166b8577548462149b422f60f699495eef744368808dee",HEDERAS_DEFAULT_CONTRACT_REQUESTS_RETURN_ONLY_RECEIPTS:"false",HEDERAS_DEFAULT_PAYMENT_FOR_CONTRACT_QUERY:"1000000",HEDERAS_LOGGER_LEVEL:"debug",HEDERAS_LOGGER_ENABLED:"true",HEDERAS_CONTRACTS_RELATIVE_PATH:"./lib.docs/src/strato/contracts"}),Object.keys(V).filter((function(Q){return Q.startsWith("HEDERAS_")})).forEach((function(Q){N[Q]=V[Q]}));var A=null!==(U=null!==(g=null===(I=R.network)||void 0===I?void 0:I.name)&&void 0!==g?g:N.HEDERAS_NETWORK)&&void 0!==U?U:"unspecified";this.walletTypes=new GI,this.params={logger:{enabled:"true"===(null!==(C=null!==(s=null===(c=R.logger)||void 0===c?void 0:c.enabled)&&void 0!==s?s:N.HEDERAS_LOGGER_ENABLED)&&void 0!==C?C:"false"),level:null!==(l=null!==(S=null===(Z=R.logger)||void 0===Z?void 0:Z.level)&&void 0!==S?S:N.HEDERAS_LOGGER_LEVEL)&&void 0!==l?l:"info"},network:{defaults:eI[null!==(G=null!==(L=null===(x=R.network)||void 0===x?void 0:x.name)&&void 0!==L?L:N.HEDERAS_NETWORK)&&void 0!==G?G:"unspecified"],name:A,nodes:null!==(y=null!==(d=null===(b=R.network)||void 0===b?void 0:b.nodes)&&void 0!==d?d:N.HEDERAS_NODES)&&void 0!==y?y:""},session:{defaults:this.parseSessionDefaultsFrom(A,R,N)},wallet:this.computeWalletSpecsFrom(R,N)},this.walletControllers=new YI(this),this.log=new mI(this.params.logger),this.network=Mg.newFrom(this.params.network)}var B;return j(Q,[{key:"getWallet",value:(B=O(QQ.mark((function Q(B){var F,U,g,I,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(U="string"==typeof this.params.wallet.type?this.walletTypes.getBy({name:this.params.wallet.type}):this.params.wallet.type,g=null!==(F=null!=B?B:this.walletControllers.getBy({name:this.params.wallet.controller.type}))&&void 0!==F?F:new U.defaultController(this),I=new U.providerHaving(this,g),!(C=U.computeColdStartOptionsFrom(this.params))){Q.next=12;break}return Q.t0=g,Q.next=8,I.buildFor(C);case 8:return Q.t1=Q.sent,Q.abrupt("return",{controller:Q.t0,wallet:Q.t1});case 12:throw new Error("Please provide either the cold-start data or a saved-state from where to create the bounded underlying Wallet with.");case 13:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"computeWalletSpecsFrom",value:function(Q,B){var F,U,g,I,C,s,c,l,S,Z,G,L,x,y,d,b,V,N,R,A,D=null!==(F=null===(U=Q.wallet)||void 0===U||null===(g=U.controller)||void 0===g||null===(I=g.default)||void 0===I?void 0:I.operatorKey)&&void 0!==F?F:B.HEDERAS_WALLET_CONTROLLER_DEFAULT_PRIVATE_KEY,m=null!==(C=null!==(s=null===(c=Q.wallet)||void 0===c||null===(l=c.controller)||void 0===l?void 0:l.type)&&void 0!==s?s:B.HEDERAS_WALLET_CONTROLLER)&&void 0!==C?C:"Hedera",E=this.walletTypes.getBy({name:"string"==typeof(null===(S=Q.wallet)||void 0===S?void 0:S.type)?null===(Z=Q.wallet)||void 0===Z?void 0:Z.type:B.HEDERAS_WALLET_TYPE?B.HEDERAS_WALLET_TYPE:"Sdk"}),J=null!==(G=null!==(L=null===(x=Q.wallet)||void 0===x||null===(y=x.window)||void 0===y?void 0:y.propName)&&void 0!==L?L:B.HEDERAS_WALLET_WINDOW_PROPERTY_NAME)&&void 0!==G?G:"hedera";if(!this.walletTypes.isKnown(E))throw new Error("Only 'Sdk' and 'Browser' wallet types are currently supported. If not specified, it defaults to 'Sdk'.");return{controller:{default:{operatorKey:D},type:m},sdk:{operatorId:null!==(d=null===(b=Q.wallet)||void 0===b||null===(V=b.sdk)||void 0===V?void 0:V.operatorId)&&void 0!==d?d:B.HEDERAS_OPERATOR_ID,operatorKey:null!==(N=null===(R=Q.wallet)||void 0===R||null===(A=R.sdk)||void 0===A?void 0:A.operatorKey)&&void 0!==N?N:B.HEDERAS_OPERATOR_KEY},type:E,window:{propName:J}}}},{key:"parseSessionDefaultsFrom",value:function(Q,B,F){var U,g,I,C,s,c,l,S,Z,G,L,x,y,d,b,V,N,R,A,D,m,E,J,t,i=function(B){return F["HEDERAS_".concat(Q.toUpperCase(),"_DEFAULT_").concat(B.toUpperCase())]||F["HEDERAS_DEFAULT_".concat(B.toUpperCase())]};return{contractCreationGas:null!==(U=null===(g=B.session)||void 0===g||null===(I=g.defaults)||void 0===I?void 0:I.contractCreationGas)&&void 0!==U?U:parseInt(null!==(C=i("contract_creation_gas"))&&void 0!==C?C:"150000"),contractTransactionGas:null!==(s=null===(c=B.session)||void 0===c||null===(l=c.defaults)||void 0===l?void 0:l.contractCreationGas)&&void 0!==s?s:parseInt(null!==(S=i("contract_transaction_gas"))&&void 0!==S?S:"169000"),emitConstructorLogs:null!==(Z=null===(G=B.session)||void 0===G||null===(L=G.defaults)||void 0===L?void 0:L.emitConstructorLogs)&&void 0!==Z?Z:"true"===(null!==(x=i("emit_constructor_logs"))&&void 0!==x?x:"true"),emitLiveContractReceipts:null!==(y=null===(d=B.session)||void 0===d||null===(b=d.defaults)||void 0===b?void 0:b.emitLiveContractReceipts)&&void 0!==y?y:"true"===(null!==(V=i("emit_live_contracts_receipts"))&&void 0!==V?V:"false"),onlyReceiptsFromContractRequests:null!==(N=null===(R=B.session)||void 0===R||null===(A=R.defaults)||void 0===A?void 0:A.onlyReceiptsFromContractRequests)&&void 0!==N?N:"true"===(null!==(D=i("contract_requests_return_only_receipts"))&&void 0!==D?D:"true"),paymentForContractQuery:null!==(m=null===(E=B.session)||void 0===E||null===(J=E.defaults)||void 0===J?void 0:J.paymentForContractQuery)&&void 0!==m?m:parseInt(null!==(t=i("payment_for_contract_query"))&&void 0!==t?t:"1000000")}}}]),Q}();function pI(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function MI(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?pI(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):pI(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}var TI=function(){function Q(B){P(this,Q),this.nameOfUpload=B}var B,F;return j(Q,[{key:"uploadTo",value:(F=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l,S;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,U=B.args,g=void 0===U?[]:U,Q.next=3,this.getContent();case 3:return I=Q.sent,Q.next=6,this._getFileTransactionsFor({args:g,content:I,session:F});case 6:return C=Q.sent,s=C.appendTxCount,c=C.areOverridesProvided,l=C.fileTransactions,Q.next=12,F.execute(l[0],qI.Receipt,!0);case 12:if((S=Q.sent).status===D.Success){Q.next=17;break}throw new Error("There was an issue while creating the file (status ".concat(S.status,"). Aborting file upload."));case 17:if(F.log.debug("Uploaded content to HFS resulting in file id ".concat(S.fileId)),!(l.length>1&&l[1]instanceof E)){Q.next=23;break}return F.log.debug("Appending the remaining content with a total of ".concat(s," file-append transactions.")),Q.next=22,F.execute(l[1].setFileId(S.fileId),qI.Result,!0);case 22:F.log.verbose("Done appending. Content has been successfully uploaded and is available at HFS id ".concat(S.fileId));case 23:return c&&(g=g.slice(1)),Q.abrupt("return",this.onFileUploaded({args:g,receipt:S,session:F}));case 25:case"end":return Q.stop()}}),Q,this)}))),function(Q){return F.apply(this,arguments)})},{key:"_getFileTransactionsFor",value:(B=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l,S;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.content,U=B.session,g=B.args,I=void 0===g?[]:g,C=U.network.defaults.fileChunkSize,s=[],c={},I.length>0&&0!==Object.keys(I[0]).length&&"_file"===Object.keys(I[0])[0]&&(c=I[0]._file),s.push(new m(Object.assign({},MI({keys:[U.wallet.account.publicKey]},c),{contents:F.length>C?F.slice(0,C):F}))),l=0,F.length>C&&(S=F.slice(C),l=Math.ceil(S.length/C),s.push(new E({contents:S,maxChunks:l}))),Q.abrupt("return",{appendTxCount:l,areOverridesProvided:0!==Object.keys(c).length,fileTransactions:s});case 9:case"end":return Q.stop()}}),Q)}))),function(Q){return B.apply(this,arguments)})}]),Q}();function zI(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function rI(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?zI(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):zI(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function vI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var wI=function(Q){_F(g,MU);var B,F,U=vI(g);function g(Q){var B,F=Q.session,I=Q.id,C=Q.data;return P(this,g),(B=U.call(this,F,I instanceof J?I:J.fromString(I))).data=C,B}return j(g,[{key:"getLiveEntityInfo",value:function(){var Q=new t({fileId:this.id});return this.session.execute(Q,qI.Result,!1)}},{key:"getSolidityAddress",value:function(){return this.id.toSolidityAddress()}},{key:"_getDeleteTransaction",value:function(Q){return new i({fileId:this.id})}},{key:"_getUpdateTransaction",value:(F=O(QQ.mark((function Q(B){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",new X(rI(rI({},B),{},{fileId:this.id})));case 1:case"end":return Q.stop()}}),Q,this)}))),function(Q){return F.apply(this,arguments)})},{key:"getContents",value:(B=O(QQ.mark((function Q(){var B,F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return B=new n({fileId:this.id}),Q.next=3,this.session.execute(B,qI.Result,!1);case 3:return F=Q.sent,Q.abrupt("return",F);case 5:case"end":return Q.stop()}}),Q,this)}))),function(){return B.apply(this,arguments)})}]),g}();function KI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var OI=function(Q){_F(g,TI);var B,F,U=KI(g);function g(Q){var B;return P(this,g),(B=U.call(this,"File")).info=Q,B}return j(g,[{key:"getContent",value:(F=O(QQ.mark((function Q(){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",this.info);case 1:case"end":return Q.stop()}}),Q,this)}))),function(){return F.apply(this,arguments)})},{key:"onFileUploaded",value:(B=O(QQ.mark((function Q(B){var F,U;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,U=B.receipt,Q.abrupt("return",new wI({data:this.info,id:U.fileId,session:F}));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}]),g}();function PI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var fI=function(Q){_F(F,wI);var B=PI(F);function F(Q){var U,g=Q.session,I=Q.id,C=Q.data;return P(this,F),U=B.call(this,{data:C,id:I,session:g}),"string"==typeof C&&(C=JSON.parse(C)),Object.keys(C).forEach((function(Q){return Object.defineProperty(jF(U),Q,{enumerable:!0,value:C[Q],writable:!1})})),U}return j(F)}();function jI(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var qI,_I=function(Q){_F(g,TI);var B,F,U=jI(g);function g(Q){var B;return P(this,g),(B=U.call(this,"Json")).info=Q,g._guardForInvalid(Q),B}return j(g,[{key:"getContent",value:(F=O(QQ.mark((function Q(){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return Q.abrupt("return",JSON.stringify(this.info));case 1:case"end":return Q.stop()}}),Q,this)}))),function(){return F.apply(this,arguments)})},{key:"onFileUploaded",value:(B=O(QQ.mark((function Q(B){var F,U;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,U=B.receipt,Q.abrupt("return",new fI({data:JSON.stringify(this.info),id:U.fileId,session:F}));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}],[{key:"isInfoAcceptable",value:function(Q){try{return g._guardForInvalid(Q),!0}catch(Q){}return!1}},{key:"_guardForInvalid",value:function(Q){if(null===Q||"object"!==$F(Q))throw new Error("Please provide a valid JSON object to instantiate a static Json with.");if(void 0!==Object.keys(Q).find((function(Q){return Q.length>0&&("_"===Q[0]||"id"===Q)})))throw new Error("Static Jsons can only be constructed from JSON objects who's properties don't start with '_' or has the 'id' naming.")}}]),g}();!function(Q){Q.Receipt="Receipt",Q.Record="Record",Q.Result="Result"}(qI||(qI={}));var $I={},QC=function(){function Q(B,F){var U=F.ctx,g=F.client;if(P(this,Q),B!==$I)throw new Error("API sessions can only be constructed through a SessionBuilder instance!");this.log=U.log,this.network=U.network,this.client=g,this.defaults=U.params.session.defaults,this.events=new BQ.exports.EventEmitter}var B,F,U,g,I,C,s;return j(Q,[{key:"wallet",get:function(){return this.client}},{key:"create",value:(s=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return this.log.info("Creating a new Hedera ".concat(B.name)),Q.next=3,B.createVia({session:this});case 3:return F=Q.sent,this.log.info("Successfully created ".concat(B.name," id ").concat(F.id)),Q.abrupt("return",F);case 6:case"end":return Q.stop()}}),Q,this)}))),function(Q){return s.apply(this,arguments)})},{key:"execute",value:(C=O(QQ.mark((function Q(B,F){var U,g,I,C,s,c,l,S,Z=arguments;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return g=Z.length>2&&void 0!==Z[2]&&Z[2],I=B instanceof x||B instanceof y,Q.next=4,this.client.execute(B);case 4:if(l=Q.sent,C=l,!(l instanceof H)){Q.next=19;break}return Q.next=9,this.client.getReceipt(l);case 9:if(s=Q.sent,!(F===qI.Record||I&&F===qI.Result)){Q.next=16;break}return S=(new u).setTransactionId(l.transactionId),Q.next=14,this.client.execute(S);case 14:c=Q.sent,C=c.contractFunctionResult;case 16:this.canReceiptBeEmitted(g)&&this.events.emit("__TransactionOnReceiptAvailable_EventName__",{receipt:s,transaction:B}),Q.next=19;break;case 19:return Q.abrupt("return",(U={},w(U,qI.Record,c),w(U,qI.Receipt,s),w(U,qI.Result,C),U)[F]);case 20:case"end":return Q.stop()}}),Q,this)}))),function(Q,B){return C.apply(this,arguments)})},{key:"getSolidityAddress",value:function(){return this.wallet.account.id.toSolidityAddress()}},{key:"getLiveContract",value:(I=O(QQ.mark((function Q(B){var F,U,g,I,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.id,U=B.abi,g=void 0===U?[]:U,Q.next=3,g;case 3:C=Q.sent,Q.prev=4,I=F instanceof Z?F:Z.fromString(F),Q.next=11;break;case 8:throw Q.prev=8,Q.t0=Q.catch(4),new Error("Please provide a valid Hedera contract id in order try to lock onto an already-deployed contract.");case 11:return Q.abrupt("return",new ng({cInterface:C instanceof KF?C:new KF(C),id:I,session:this}));case 12:case"end":return Q.stop()}}),Q,this,[[4,8]])}))),function(Q){return I.apply(this,arguments)})},{key:"getLiveJson",value:(g=O(QQ.mark((function Q(B){var F,U,g,I,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:F=B.id,Q.prev=1,U=F instanceof J?F:J.fromString(F),Q.next=8;break;case 5:throw Q.prev=5,Q.t0=Q.catch(1),new Error("Please provide a valid Hedera file id in order try to lock onto an already-deployed Json object.");case 8:return g=(new n).setFileId(U),Q.next=11,this.execute(g,qI.Result,!1);case 11:return I=Q.sent,C=new TextDecoder("utf8").decode(I),Q.abrupt("return",new fI({data:JSON.parse(C),id:U,session:this}));case 14:case"end":return Q.stop()}}),Q,this,[[1,5]])}))),function(Q){return g.apply(this,arguments)})},{key:"subscribeToReceiptsWith",value:function(Q){return new gI(this.events,"__TransactionOnReceiptAvailable_EventName__",Q)}},{key:"upload",value:(U=O(QQ.mark((function Q(B){var F,U,g,I,C,s=arguments;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(B instanceof TI!=0){Q.next=12;break}if(!("string"==typeof B||B instanceof Uint8Array)){Q.next=5;break}F=new OI(B),Q.next=10;break;case 5:if(!_I.isInfoAcceptable(B)){Q.next=9;break}F=new _I(B),Q.next=10;break;case 9:throw new Error("Can only upload UploadableFile-s or Json-file acceptable content.");case 10:Q.next=13;break;case 12:F=B;case 13:for(this.log.info("Uploading a new ".concat(F.nameOfUpload," to Hedera File Service (HFS).")),U=s.length,g=new Array(U>1?U-1:0),I=1;I<U;I++)g[I-1]=s[I];return Q.next=17,F.uploadTo({args:g,session:this});case 17:return C=Q.sent,this.log.info("Successfully created a ".concat(F.nameOfUpload," id ").concat(C.id,".")),Q.abrupt("return",C);case 20:case"end":return Q.stop()}}),Q,this)}))),function(Q){return U.apply(this,arguments)})},{key:"canReceiptBeEmitted",value:function(Q){return Q&&0!==this.events.listenerCount("__TransactionOnReceiptAvailable_EventName__")}}],[{key:"default",value:(F=O(QQ.mark((function B(){var F,U,g,I=arguments;return QQ.wrap((function(B){for(;;)switch(B.prev=B.next){case 0:return F=I.length>0&&void 0!==I[0]?I[0]:{},U=I.length>1&&void 0!==I[1]?I[1]:".env",g=new kI("string"==typeof F?{params:{},path:F}:{params:F,path:U}),B.abrupt("return",Q.buildFrom(g));case 5:case"end":return B.stop()}}),B)}))),function(){return F.apply(this,arguments)})},{key:"buildFrom",value:(B=O(QQ.mark((function B(F){var U,g,I;return QQ.wrap((function(B){for(;;)switch(B.prev=B.next){case 0:return B.next=2,F.getWallet();case 2:return U=B.sent,g=U.wallet,I=U.controller,B.abrupt("return",{controller:I,session:new Q($I,{client:g,ctx:F})});case 6:case"end":return B.stop()}}),B)}))),function(Q){return B.apply(this,arguments)})}]),Q}();function BC(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function FC(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?BC(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):BC(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function UC(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var gC={},IC=function(){function Q(B,F){if(P(this,Q),this.hTokenType=F,B!==gC)throw new Error("TokenType-s can only be created from within the static/Token module")}return j(Q,[{key:"equals",value:function(B){return B instanceof Q?this.hTokenType._code===B.hTokenType._code:B instanceof W&&this.hTokenType._code===B._code}}]),Q}(),CC={FungibleCommon:new IC(gC,W.FungibleCommon),NonFungibleUnique:new IC(gC,W.NonFungibleUnique)},sC=function(Q){_F(U,gg);var B,F=UC(U);function U(Q){var B;return P(this,U),(B=F.call(this,"Token")).info=Q,B}return j(U,[{key:"createVia",value:(B=O(QQ.mark((function Q(B){var F,g,I,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,g=U.mapTokenFeaturesToTokenArguments(this.info,F),I=new a(g),Q.next=5,F.execute(I,qI.Receipt,!0);case 5:return C=Q.sent,Q.abrupt("return",new ZC({id:C.tokenId,session:F}));case 7:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}],[{key:"mapTokenFeaturesToTokenUpgradeArguments",value:function(Q){var B,F,U,g,I,C,s,c,l,S,Z,G,L,x,y={};return(null===(B=Q.keys)||void 0===B?void 0:B.admin)&&(y.adminKey=null===(F=Q.keys)||void 0===F?void 0:F.admin),(null===(U=Q.keys)||void 0===U?void 0:U.feeSchedule)&&(y.feeScheduleKey=null===(g=Q.keys)||void 0===g?void 0:g.feeSchedule),(null===(I=Q.keys)||void 0===I?void 0:I.freeze)&&(y.freezeKey=null===(C=Q.keys)||void 0===C?void 0:C.freeze),(null===(s=Q.keys)||void 0===s?void 0:s.kyc)&&(y.kycKey=null===(c=Q.keys)||void 0===c?void 0:c.kyc),(null===(l=Q.keys)||void 0===l?void 0:l.pause)&&(y.pauseKey=null===(S=Q.keys)||void 0===S?void 0:S.pause),(null===(Z=Q.keys)||void 0===Z?void 0:Z.supply)&&(y.supplyKey=null===(G=Q.keys)||void 0===G?void 0:G.supply),(null===(L=Q.keys)||void 0===L?void 0:L.wipe)&&(y.wipeKey=null===(x=Q.keys)||void 0===x?void 0:x.wipe),Q.name&&(y.tokenName=Q.name),Q.symbol&&(y.tokenSymbol=Q.symbol),Q.treasuryAccountId&&(y.treasuryAccountId=Q.treasuryAccountId),FC(FC({},y),Q)}},{key:"mapTokenFeaturesToTokenArguments",value:function(Q,B){var F,U,g,I,C,s,c,l,S,Z,G,L,x,y,d,b,V,N,R,A,D,m,E,J=B.wallet.account.publicKey,t=B.wallet.account.id;return FC({adminKey:null!==(null===(F=Q.keys)||void 0===F?void 0:F.admin)?null!==(U=null===(g=Q.keys)||void 0===g?void 0:g.admin)&&void 0!==U?U:J:void 0,feeScheduleKey:null!==(null===(I=Q.keys)||void 0===I?void 0:I.feeSchedule)?null!==(C=null===(s=Q.keys)||void 0===s?void 0:s.feeSchedule)&&void 0!==C?C:J:void 0,freezeKey:null!==(null===(c=Q.keys)||void 0===c?void 0:c.freeze)?null!==(l=null===(S=Q.keys)||void 0===S?void 0:S.freeze)&&void 0!==l?l:J:void 0,kycKey:null!==(null===(Z=Q.keys)||void 0===Z?void 0:Z.kyc)?null!==(G=null===(L=Q.keys)||void 0===L?void 0:L.kyc)&&void 0!==G?G:J:void 0,pauseKey:null!==(null===(x=Q.keys)||void 0===x?void 0:x.pause)?null!==(y=null===(d=Q.keys)||void 0===d?void 0:d.pause)&&void 0!==y?y:J:void 0,supplyKey:null!==(null===(b=Q.keys)||void 0===b?void 0:b.supply)?null!==(V=null===(N=Q.keys)||void 0===N?void 0:N.supply)&&void 0!==V?V:J:void 0,tokenName:Q.name,tokenSymbol:Q.symbol,tokenType:null!==(R=Q.type.hTokenType)&&void 0!==R?R:W.FungibleCommon,treasuryAccountId:null!==(A=Q.treasuryAccountId)&&void 0!==A?A:t,wipeKey:null!==(null===(D=Q.keys)||void 0===D?void 0:D.wipe)?null!==(m=null===(E=Q.keys)||void 0===E?void 0:E.wipe)&&void 0!==m?m:J:void 0},Q)}}]),U}();function cC(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function lC(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?cC(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):cC(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function SC(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var ZC=function(Q){_F(I,MU);var B,F,U,g=SC(I);function I(Q){var B=Q.session,F=Q.id;return P(this,I),g.call(this,B,F)}return j(I,[{key:"getSolidityAddress",value:function(){return this.id.toSolidityAddress()}},{key:"assignSupplyControlTo",value:(U=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=(new h).setTokenId(this.id).setSupplyKey(B instanceof Y?B:B.id),Q.next=3,this.session.execute(F,qI.Receipt,!0);case 3:case"end":return Q.stop()}}),Q,this)}))),function(Q){return U.apply(this,arguments)})},{key:"getLiveEntityInfo",value:(F=O(QQ.mark((function Q(){var B;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return B=(new e).setTokenId(this.id),Q.abrupt("return",this.session.execute(B,qI.Result,!1));case 2:case"end":return Q.stop()}}),Q,this)}))),function(){return F.apply(this,arguments)})},{key:"_getDeleteTransaction",value:function(Q){return new o({tokenId:this.id})}},{key:"_getUpdateTransaction",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=sC.mapTokenFeaturesToTokenUpgradeArguments(B),Q.abrupt("return",new h(lC(lC({},F),{},{tokenId:this.id})));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}]),I}();function GC(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var LC=function(Q){_F(U,gg);var B,F=GC(U);function U(){var Q,B=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return P(this,U),(Q=F.call(this,"Topic")).topicFeatures=B,Q}return j(U,[{key:"createVia",value:(B=O(QQ.mark((function Q(B){var F,g,I,C;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,g=U.mapTopicFeaturesToTopicArguments(this.topicFeatures),I=new k(g),Q.next=5,F.execute(I,qI.Receipt,!0);case 5:return C=Q.sent,Q.abrupt("return",new bC({session:F,topicId:C.topicId}));case 7:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})}],[{key:"mapTopicFeaturesToTopicArguments",value:function(Q){var B,F;return{adminKey:null===(B=Q.keys)||void 0===B?void 0:B.admin,autoRenewAccountId:Q.autoRenewAccountId,autoRenewPeriod:Q.autoRenewPeriod,submitKey:null===(F=Q.keys)||void 0===F?void 0:F.submit,topicMemo:Q.memo}}}]),U}();function xC(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function yC(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?xC(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):xC(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function dC(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var bC=function(Q){_F(U,MU);var B,F=dC(U);function U(Q){var B=Q.session,g=Q.topicId;return P(this,U),F.call(this,B,g instanceof p?g:p.fromString(g))}return j(U,[{key:"getLiveEntityInfo",value:function(){var Q=new M({topicId:this.id});return this.session.execute(Q,qI.Result,!1)}},{key:"getSolidityAddress",value:function(){return this.id.toSolidityAddress()}},{key:"_getDeleteTransaction",value:function(Q){return new T({topicId:this.id})}},{key:"_getUpdateTransaction",value:(B=O(QQ.mark((function Q(B){var F;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=LC.mapTopicFeaturesToTopicArguments(B),Q.abrupt("return",new r(yC(yC({},F),{},{topicId:this.id})));case 2:case"end":return Q.stop()}}),Q,this)}))),function(Q){return B.apply(this,arguments)})},{key:"submitMessage",value:function(Q){var B=new z({message:Q,topicId:this.id});return this.executeAndReturnStatus(B)}}]),U}(),VC={"counter.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract Counter {\n  uint public count;\n\n  // Function to get the current count\n  function get() public view returns (uint) {\n    return count;\n  }\n\n  // Function to increment count by 1\n  function inc() public {\n    count += 1;\n  }\n\n  // Function to decrement count by 1\n  function dec() public {\n    count -= 1;\n  }\n}\n","events.sol":'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract Event {\n  // Event declaration\n  // Up to 3 parameters can be indexed.\n  // Indexed parameters helps you filter the logs by the indexed parameter\n  event Log(address indexed sender, string message);\n  event AnotherLog();\n\n  constructor() {\n    emit Log(msg.sender, "Event contract constructed!");\n  }\n\n  function test() public {\n    emit Log(msg.sender, "Hello World!");\n    emit Log(msg.sender, "Hello EVM!");\n    emit AnotherLog();\n  }\n}\n',"hello_world.sol":'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract HelloWorld {\n  string public greet = "Hello World!";\n}\n',"increment.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract Incrementer {\n  uint public count;\n\n  function get() public view returns (uint) {\n    return count;\n  }\n\n  function inc() public {\n    count += 1;\n  }\n}\n","state_variables.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract SimpleStorage {\n  // State variable to store a number\n  uint public num;\n\n  // You need to send a transaction to write to a state variable.\n  function set(uint _num) public {\n    num = _num;\n  }\n\n  // You can read from a state variable without sending a transaction.\n  function get() public view returns (uint) {\n    return num;\n  }\n}\n"},NC=Object.freeze({__proto__:null,default:VC});function RC(Q){return Q&&Object.prototype.hasOwnProperty.call(Q,"default")?Q.default:Q}var AC={},DC={exports:{}};!function(Q){Q.exports=function(Q){return Q&&Q.__esModule?Q:{default:Q}},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(DC);var mC={exports:{}};!function(Q){Q.exports=function(Q,B){if(!(Q instanceof B))throw new TypeError("Cannot call a class as a function")},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(mC);var EC={exports:{}};!function(Q){function B(Q,B){for(var F=0;F<B.length;F++){var U=B[F];U.enumerable=U.enumerable||!1,U.configurable=!0,"value"in U&&(U.writable=!0),Object.defineProperty(Q,U.key,U)}}Q.exports=function(Q,F,U){return F&&B(Q.prototype,F),U&&B(Q,U),Object.defineProperty(Q,"prototype",{writable:!1}),Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(EC);var JC={exports:{}};!function(Q){Q.exports=function(Q,B,F){return B in Q?Object.defineProperty(Q,B,{value:F,enumerable:!0,configurable:!0,writable:!0}):Q[B]=F,Q},Q.exports.__esModule=!0,Q.exports.default=Q.exports}(JC);var tC=null;try{var iC="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");tC=iC.Worker}catch(Q){}function XC(Q,B,F){var U=void 0===B?null:B,g=function(Q,B){return Buffer.from(Q,"base64").toString(B?"utf16":"utf8")}(Q,void 0!==F&&F),I=g.indexOf("\n",10)+1,C=g.substring(I)+(U?"//# sourceMappingURL="+U:"");return function(Q){return new tC(C,Object.assign({},Q,{eval:!0}))}}function nC(Q,B,F){var U=void 0===B?null:B,g=function(Q,B){var F=atob(Q);if(B){for(var U=new Uint8Array(F.length),g=0,I=F.length;g<I;++g)U[g]=F.charCodeAt(g);return String.fromCharCode.apply(null,new Uint16Array(U.buffer))}return F}(Q,void 0!==F&&F),I=g.indexOf("\n",10)+1,C=g.substring(I)+(U?"//# sourceMappingURL="+U:""),s=new Blob([C],{type:"application/javascript"});return URL.createObjectURL(s)}var uC="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var HC,WC,aC,oC=(HC="",WC="data:application/json;charset=utf-8;base64,",aC=!1,uC?XC(HC,WC,aC):function(Q,B,F){var U;return function(g){return U=U||nC(Q,B,F),new Worker(U,g)}}(HC,WC,aC)),hC=RC(Object.freeze({__proto__:null,default:oC})),YC=RC(NC),eC=DC.exports;Object.defineProperty(AC,"__esModule",{value:!0});var kC=AC.VIRTUAL_SOURCE_CONTRACT_FILE_NAME=PC=AC.SolidityCompiler=void 0,pC=eC(mC.exports),MC=eC(EC.exports),TC=eC(JC.exports),zC=eC(hC),rC=eC(YC);kC=AC.VIRTUAL_SOURCE_CONTRACT_FILE_NAME="__contract__.sol";var vC=null,wC=!1;function KC(Q){var B={language:"Solidity",settings:{metadata:{bytecodeHash:"none"},outputSelection:{"*":{"*":["*"]}}},sources:(0,TC.default)({},"__contract__.sol",{content:Q})};if(!vC)throw new Error("First initialize the compile web-worker.");vC.postMessage({payload:JSON.stringify(B),type:"compile"})}var OC=function(){function Q(){(0,pC.default)(this,Q)}return(0,MC.default)(Q,null,[{key:"compile",value:function(Q){var B=Q.code,F=Q.path;if(!window.Worker)throw new Error("Your browser does not support WebWorkers therefore Contract compilation is not available.");if(void 0!==F){if(F.startsWith(".."))throw new Error("Cannot load contracts which are outside the bundled designated folder from which the 'ContractsInFileStorage' is constructed.");if(F.startsWith("./")&&(F=F.substring(2)),void 0!==rC.default[F])B=rC.default[F];else if(!B||void 0!==F)throw new Error("Only direct code compilation is fully supported by the browser at this point. Path loading is limited to the pre-bundled contracts stored in 'ContractsInFileStorage'.")}return vC?KC(B):vC=new zC.default,new Promise((function(Q,F){vC.onmessage=function(F){var U=F.data;if("compile_result"===U.type)Q(U.payload);else{if("loaded"===U.type||wC)return wC=!0,void KC(B);console.log("Unhandled message received from web-worker:",U)}},vC.onerror=function(Q){F(Q)}}))}}]),Q}(),PC=AC.SolidityCompiler=OC;function fC(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var jC=function(Q){_F(F,OU(Error));var B=fC(F);function F(Q){var U;return P(this,F),(U=B.call(this,"There are issues with the contract code:\n".concat(F._listOfSimpleIssueMessagesFor(Q).join("\n")))).issues=Q,U}return j(F,null,[{key:"tryThrowingIfErrorsIn",value:function(Q){var B=Q.compileResult,U=void 0===B?null:B,g=Q.ignoreWarnings,I=void 0===g||g;if(null!=U&&Array.isArray(U.errors)){var C=U.errors.filter((function(Q){return I&&"Warning"!==Q.type||!I}));if(0!=C.length)throw new F(C)}}},{key:"_listOfSimpleIssueMessagesFor",value:function(Q){return Q.map((function(Q){return"[ ".concat(Q.sourceLocation.start,":").concat(Q.sourceLocation.end," ] ").concat(Q.message)}))}}]),F}();function qC(Q,B){var F=Object.keys(Q);if(Object.getOwnPropertySymbols){var U=Object.getOwnPropertySymbols(Q);B&&(U=U.filter((function(B){return Object.getOwnPropertyDescriptor(Q,B).enumerable}))),F.push.apply(F,U)}return F}function _C(Q){for(var B=1;B<arguments.length;B++){var F=null!=arguments[B]?arguments[B]:{};B%2?qC(Object(F),!0).forEach((function(B){w(Q,B,F[B])})):Object.getOwnPropertyDescriptors?Object.defineProperties(Q,Object.getOwnPropertyDescriptors(F)):qC(Object(F)).forEach((function(B){Object.defineProperty(Q,B,Object.getOwnPropertyDescriptor(F,B))}))}return Q}function $C(Q,B){var F="undefined"!=typeof Symbol&&Q[Symbol.iterator]||Q["@@iterator"];if(!F){if(Array.isArray(Q)||(F=function(Q,B){if(!Q)return;if("string"==typeof Q)return Qs(Q,B);var F=Object.prototype.toString.call(Q).slice(8,-1);"Object"===F&&Q.constructor&&(F=Q.constructor.name);if("Map"===F||"Set"===F)return Array.from(Q);if("Arguments"===F||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(F))return Qs(Q,B)}(Q))||B&&Q&&"number"==typeof Q.length){F&&(Q=F);var U=0,g=function(){};return{s:g,n:function(){return U>=Q.length?{done:!0}:{done:!1,value:Q[U++]}},e:function(Q){throw Q},f:g}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var I,C=!0,s=!1;return{s:function(){F=F.call(Q)},n:function(){var Q=F.next();return C=Q.done,Q},e:function(Q){s=!0,I=Q},f:function(){try{C||null==F.return||F.return()}finally{if(s)throw I}}}}function Qs(Q,B){(null==B||B>Q.length)&&(B=Q.length);for(var F=0,U=new Array(B);F<B;F++)U[F]=Q[F];return U}function Bs(Q){var B=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Q){return!1}}();return function(){var F,U=BU(Q);if(B){var g=BU(this).constructor;F=Reflect.construct(U,arguments,g)}else F=U.apply(this,arguments);return QU(this,F)}}var Fs=function(Q){_F(s,TI);var B,F,U,g,I,C=Bs(s);function s(Q){var B,F=Q.name,U=Q.abi,g=Q.byteCode;if(P(this,s),!F)throw new Error("Please provide a name for the Contract instance.");if(!U)throw new Error("Please provide a, valid, EthersProject-compatible, ABI definition for the Contract instance.");if("string"==typeof g&&0!==g.length){if(/.*__\$.*\$__.*/.test(g))throw new Error("Library linking is not currently supported. Please follow issue #38 for more info.");if(!/^[0-9a-f]+$/.test(g))throw new Error("Please provide the valid formatted byte-code definition for the Contract in order to instantiate it.")}return(B=C.call(this,"".concat(F,"-Contract"))).name=F,B.byteCode=g,B.interface=new KF(U),B}return j(s,[{key:"equals",value:function(Q){if(Q instanceof s==!1)return!1;var B=this.interface.fragments,F=Q.interface.fragments;if(B.length!==F.length)return!1;var U,g=!0,I=$C(B);try{var C=function(){var Q=U.value;if(!F.find((function(B){return B.format()===Q.format()})))return g=!1,"break"};for(I.s();!(U=I.n()).done;){if("break"===C())break}}catch(Q){I.e(Q)}finally{I.f()}return this.byteCode===Q.byteCode&&g}},{key:"serialize",value:function(){return JSON.stringify({abi:this.interface.format(),byteCode:this.byteCode,name:this.name})}},{key:"getContent",value:(I=O(QQ.mark((function Q(){return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(this.byteCode){Q.next=2;break}throw new Error("Won't upload contract to network because it's lacking the required byte-code data.");case 2:return Q.abrupt("return",this.byteCode);case 3:case"end":return Q.stop()}}),Q,this)}))),function(){return I.apply(this,arguments)})},{key:"onFileUploaded",value:(g=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,U=B.receipt,g=B.args,I=void 0===g?[]:g,Q.next=3,this._getContractCreateOptionsFor({args:I,receipt:U,session:F});case 3:return C=Q.sent,s=C.createContractOptions,c=C.emitConstructorLogs,l=new v(s),Q.next=9,ng.newFollowingUpload({contract:this,emitConstructorLogs:c,session:F,transaction:l});case 9:return Q.abrupt("return",Q.sent);case 10:case"end":return Q.stop()}}),Q,this)}))),function(Q){return g.apply(this,arguments)})},{key:"_getContractCreateOptionsFor",value:(U=O(QQ.mark((function Q(B){var F,U,g,I,C,s,c,l,S;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:return F=B.session,U=B.receipt,g=B.args,I=void 0===g?[]:g,C=U.fileId,s=this.interface.deploy,c={},l=F.defaults.emitConstructorLogs,I.length>0&&0!==Object.keys(I[0]).length&&"_contract"===Object.keys(I[0])[0]&&(S=I[0]._contract,l=void 0!==S.emitConstructorLogs?S.emitConstructorLogs:l,delete S.emitConstructorLogs,c=S,I=I.slice(1)),Q.t0=Object,Q.t1={},Q.t2=_C,Q.t3=F.wallet.account.publicKey,Q.t4=C,Q.next=13,$U.newFor(s,I);case 13:return Q.t5=Q.sent,Q.t6=F.defaults.contractCreationGas,Q.t7={adminKey:Q.t3,bytecodeFileId:Q.t4,constructorParameters:Q.t5,gas:Q.t6},Q.t8=c,Q.t9=(0,Q.t2)(Q.t7,Q.t8),Q.t10=Q.t0.assign.call(Q.t0,Q.t1,Q.t9),Q.t11=l,Q.abrupt("return",{createContractOptions:Q.t10,emitConstructorLogs:Q.t11});case 21:case"end":return Q.stop()}}),Q,this)}))),function(Q){return U.apply(this,arguments)})}],[{key:"newFrom",value:(F=O(QQ.mark((function Q(B){var F,U,g,I,C,c,l,S,Z;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(F=B.code,U=B.index,g=void 0===U?0:U,I=B.ignoreWarnings,C=void 0!==I&&I,c=B.name,l=B.path,F||l){Q.next=3;break}throw new Error("In order to continue, either provide the direct solidity code or a file path where the top-level code resides.");case 3:if(c||!(g||Number.isInteger(g)&&g<0)){Q.next=5;break}throw new Error("Please provide either a non-negative index or the actual name of the contract to reference the Contract instance with.");case 5:return Q.next=7,s.allFrom({code:F,ignoreWarnings:C,path:l});case 7:if(S=Q.sent,!c){Q.next=15;break}if(Z=S.find((function(Q){return Q.name===c}))){Q.next=12;break}throw new Error("There is no such contract named '".concat(c,"' present in the referenced code."));case 12:return Q.abrupt("return",Z);case 15:if(!(g>=S.length)){Q.next=17;break}throw new Error("Index out of range. Your requested contract-id ".concat(g," is not in range of the ").concat(S.length," contracts present in the given code."));case 17:return Q.abrupt("return",S[g]);case 18:case"end":return Q.stop()}}),Q)}))),function(Q){return F.apply(this,arguments)})},{key:"allFrom",value:(B=O(QQ.mark((function Q(B){var F,U,g,I,C,c,l,S,Z,G,L,x;return QQ.wrap((function(Q){for(;;)switch(Q.prev=Q.next){case 0:if(F=B.code,U=B.ignoreWarnings,g=void 0!==U&&U,I=B.path,F||I){Q.next=3;break}throw new Error("Can only retrieve contracts if either the direct solidity code is provided or a file path where that top-level code resides.");case 3:return Q.next=5,PC.compile({code:F,path:I});case 5:for(C=Q.sent,c=s._tryParsingCompileResultFrom({ignoreWarnings:g,rawCompileResult:C}),l=c.contracts[kC],S=[],Z=0,G=Object.keys(l);Z<G.length;Z++)L=G[Z],x=l[L],S.push(new s({abi:x.abi,byteCode:x.evm.bytecode.object,name:L}));return Q.abrupt("return",S);case 11:case"end":return Q.stop()}}),Q)}))),function(Q){return B.apply(this,arguments)})},{key:"deserialize",value:function(Q){var B={};try{B=JSON.parse(Q)}catch(Q){throw new Error("Please provide something valid to be deserialized.")}return new s(B)}},{key:"_tryParsingCompileResultFrom",value:function(Q){var B=Q.rawCompileResult,F=Q.ignoreWarnings,U=JSON.parse(B);return jC.tryThrowingIfErrorsIn({compileResult:U,ignoreWarnings:F}),U}}]),s}(),Us={Counter:["function count() view returns (uint256)","function dec()","function get() view returns (uint256)","function inc()"],Event:["constructor()","event AnotherLog()","event Log(address indexed sender, string message)","function test()"],HelloWorld:["function greet() view returns (string)"],Incrementer:["function count() view returns (uint256)","function get() view returns (uint256)","function inc()"],SimpleStorage:["function get() view returns (uint256)","function num() view returns (uint256)","function set(uint256 _num)"]};export{pg as AVAILABLE_NETWORK_NAMES,sg as Account,QC as ApiSession,Fs as Contract,Us as ContractRegistry,OI as File,kg as HEDERA_CUSTOM_NET_NAME,Mg as HederaNetwork,_I as Json,Ug as KeyType,Sg as LiveAccount,Zg as LiveAccountWithPrivateKey,ng as LiveContract,ug as LiveContractWithLogs,wI as LiveFile,fI as LiveJson,ZC as LiveToken,bC as LiveTopic,sC as Token,IC as TokenType,CC as TokenTypes,LC as Topic,qI as TypeOfExecutionReturn};
//# sourceMappingURL=hedera-strato.js.map
